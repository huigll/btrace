{
  "android.content.pm.IBackgroundInstallControlService": {
    "1": "android.content.pm.ParceledListSlice getBackgroundInstalledPackages(long, int)"
  },
  "android.net.nsd.INsdManager": {
    "1": "android.net.connectivity.android.net.nsd.INsdServiceConnector connect(android.net.connectivity.android.net.nsd.INsdManagerCallback, boolean)"
  },
  "android.system.keystore2.IKeystoreService": {
    "1": "android.system.keystore2.IKeystoreSecurityLevel getSecurityLevel(int)",
    "2": "android.system.keystore2.KeyEntryResponse getKeyEntry(android.system.keystore2.KeyDescriptor)",
    "3": "void updateSubcomponent(android.system.keystore2.KeyDescriptor, [B, [B)",
    "4": "[Landroid.system.keystore2.KeyDescriptor; listEntries(int, long)",
    "5": "void deleteKey(android.system.keystore2.KeyDescriptor)",
    "6": "android.system.keystore2.KeyDescriptor grant(android.system.keystore2.KeyDescriptor, int, int)",
    "7": "void ungrant(android.system.keystore2.KeyDescriptor, int)",
    "8": "int getNumberOfEntries(int, long)",
    "9": "[Landroid.system.keystore2.KeyDescriptor; listEntriesBatched(int, long, java.lang.String)"
  },
  "android.content.IContentService": {
    "1": "void unregisterContentObserver(android.database.IContentObserver)",
    "2": "void registerContentObserver(android.net.Uri, boolean, android.database.IContentObserver, int, int)",
    "3": "void notifyChange([Landroid.net.Uri;, android.database.IContentObserver, boolean, int, int, int, java.lang.String)",
    "4": "void requestSync(android.accounts.Account, java.lang.String, android.os.Bundle, java.lang.String)",
    "5": "void sync(android.content.SyncRequest, java.lang.String)",
    "6": "void syncAsUser(android.content.SyncRequest, int, java.lang.String)",
    "7": "void cancelSync(android.accounts.Account, java.lang.String, android.content.ComponentName)",
    "8": "void cancelSyncAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int)",
    "9": "void cancelRequest(android.content.SyncRequest)",
    "10": "boolean getSyncAutomatically(android.accounts.Account, java.lang.String)",
    "11": "boolean getSyncAutomaticallyAsUser(android.accounts.Account, java.lang.String, int)",
    "12": "void setSyncAutomatically(android.accounts.Account, java.lang.String, boolean)",
    "13": "void setSyncAutomaticallyAsUser(android.accounts.Account, java.lang.String, boolean, int)",
    "14": "java.util.List getPeriodicSyncs(android.accounts.Account, java.lang.String, android.content.ComponentName)",
    "15": "void addPeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle, long)",
    "16": "void removePeriodicSync(android.accounts.Account, java.lang.String, android.os.Bundle)",
    "17": "int getIsSyncable(android.accounts.Account, java.lang.String)",
    "18": "int getIsSyncableAsUser(android.accounts.Account, java.lang.String, int)",
    "19": "void setIsSyncable(android.accounts.Account, java.lang.String, int)",
    "20": "void setIsSyncableAsUser(android.accounts.Account, java.lang.String, int, int)",
    "21": "void setMasterSyncAutomatically(boolean)",
    "22": "void setMasterSyncAutomaticallyAsUser(boolean, int)",
    "23": "boolean getMasterSyncAutomatically()",
    "24": "boolean getMasterSyncAutomaticallyAsUser(int)",
    "25": "java.util.List getCurrentSyncs()",
    "26": "java.util.List getCurrentSyncsAsUser(int)",
    "27": "[Landroid.content.SyncAdapterType; getSyncAdapterTypes()",
    "28": "[Landroid.content.SyncAdapterType; getSyncAdapterTypesAsUser(int)",
    "29": "[Ljava.lang.String; getSyncAdapterPackagesForAuthorityAsUser(java.lang.String, int)",
    "30": "java.lang.String getSyncAdapterPackageAsUser(java.lang.String, java.lang.String, int)",
    "31": "boolean isSyncActive(android.accounts.Account, java.lang.String, android.content.ComponentName)",
    "32": "android.content.SyncStatusInfo getSyncStatus(android.accounts.Account, java.lang.String, android.content.ComponentName)",
    "33": "android.content.SyncStatusInfo getSyncStatusAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int)",
    "34": "boolean isSyncPending(android.accounts.Account, java.lang.String, android.content.ComponentName)",
    "35": "boolean isSyncPendingAsUser(android.accounts.Account, java.lang.String, android.content.ComponentName, int)",
    "36": "void addStatusChangeListener(int, android.content.ISyncStatusObserver)",
    "37": "void removeStatusChangeListener(android.content.ISyncStatusObserver)",
    "38": "void putCache(java.lang.String, android.net.Uri, android.os.Bundle, int)",
    "39": "android.os.Bundle getCache(java.lang.String, android.net.Uri, int)",
    "40": "void resetTodayStats()",
    "41": "void onDbCorruption(java.lang.String, java.lang.String, java.lang.String)"
  },
  "android.os.IStoraged": {
    "1": "void onUserStarted(int)",
    "2": "void onUserStopped(int)",
    "3": "int getRecentPerf()"
  },
  "android.content.res.IResourcesManager": {
    "1": "boolean dumpResources(java.lang.String, android.os.ParcelFileDescriptor, android.os.RemoteCallback)"
  },
  "android.hardware.fingerprint.IFingerprintService": {
    "1": "android.hardware.biometrics.ITestSession createTestSession(int, android.hardware.biometrics.ITestSessionCallback, java.lang.String)",
    "2": "[B dumpSensorServiceStateProto(int, boolean)",
    "3": "java.util.List getSensorPropertiesInternal(java.lang.String)",
    "4": "android.hardware.fingerprint.FingerprintSensorPropertiesInternal getSensorProperties(int, java.lang.String)",
    "5": "long authenticate(android.os.IBinder, long, android.hardware.fingerprint.IFingerprintServiceReceiver, android.hardware.fingerprint.FingerprintAuthenticateOptions)",
    "6": "long detectFingerprint(android.os.IBinder, android.hardware.fingerprint.IFingerprintServiceReceiver, android.hardware.fingerprint.FingerprintAuthenticateOptions)",
    "7": "void prepareForAuthentication(android.os.IBinder, long, android.hardware.biometrics.IBiometricSensorReceiver, android.hardware.fingerprint.FingerprintAuthenticateOptions, long, int, boolean)",
    "8": "void startPreparedClient(int, int)",
    "9": "void cancelAuthentication(android.os.IBinder, java.lang.String, java.lang.String, long)",
    "10": "void cancelFingerprintDetect(android.os.IBinder, java.lang.String, long)",
    "11": "void cancelAuthenticationFromService(int, android.os.IBinder, java.lang.String, long)",
    "12": "long enroll(android.os.IBinder, [B, int, android.hardware.fingerprint.IFingerprintServiceReceiver, java.lang.String, int)",
    "13": "void cancelEnrollment(android.os.IBinder, long)",
    "14": "void remove(android.os.IBinder, int, int, android.hardware.fingerprint.IFingerprintServiceReceiver, java.lang.String)",
    "15": "void removeAll(android.os.IBinder, int, android.hardware.fingerprint.IFingerprintServiceReceiver, java.lang.String)",
    "16": "void rename(int, int, java.lang.String)",
    "17": "java.util.List getEnrolledFingerprints(int, java.lang.String, java.lang.String)",
    "18": "boolean isHardwareDetectedDeprecated(java.lang.String, java.lang.String)",
    "19": "boolean isHardwareDetected(int, java.lang.String)",
    "20": "void generateChallenge(android.os.IBinder, int, int, android.hardware.fingerprint.IFingerprintServiceReceiver, java.lang.String)",
    "21": "void revokeChallenge(android.os.IBinder, int, int, java.lang.String, long)",
    "22": "boolean hasEnrolledFingerprintsDeprecated(int, java.lang.String, java.lang.String)",
    "23": "boolean hasEnrolledFingerprints(int, int, java.lang.String)",
    "24": "int getLockoutModeForUser(int, int)",
    "25": "void invalidateAuthenticatorId(int, int, android.hardware.biometrics.IInvalidationCallback)",
    "26": "long getAuthenticatorId(int, int)",
    "27": "void resetLockout(android.os.IBinder, int, int, [B, java.lang.String)",
    "28": "void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback, java.lang.String)",
    "29": "boolean isClientActive()",
    "30": "void addClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)",
    "31": "void removeClientActiveCallback(android.hardware.fingerprint.IFingerprintClientActiveCallback)",
    "32": "void registerAuthenticators(java.util.List)",
    "33": "void addAuthenticatorsRegisteredCallback(android.hardware.fingerprint.IFingerprintAuthenticatorsRegisteredCallback)",
    "34": "void onPointerDown(long, int, android.hardware.biometrics.fingerprint.PointerContext)",
    "35": "void onPointerUp(long, int, android.hardware.biometrics.fingerprint.PointerContext)",
    "36": "void onUiReady(long, int)",
    "37": "void setUdfpsOverlayController(android.hardware.fingerprint.IUdfpsOverlayController)",
    "38": "void setSidefpsController(android.hardware.fingerprint.ISidefpsController)",
    "39": "void setUdfpsOverlay(android.hardware.fingerprint.IUdfpsOverlay)",
    "40": "void registerBiometricStateListener(android.hardware.biometrics.IBiometricStateListener)",
    "41": "void onPowerPressed()",
    "42": "void scheduleWatchdog()"
  },
  "com.android.internal.widget.ILockSettings": {
    "1": "void setBoolean(java.lang.String, boolean, int)",
    "2": "void setLong(java.lang.String, long, int)",
    "3": "void setString(java.lang.String, java.lang.String, int)",
    "4": "boolean getBoolean(java.lang.String, boolean, int)",
    "5": "long getLong(java.lang.String, long, int)",
    "6": "java.lang.String getString(java.lang.String, java.lang.String, int)",
    "7": "boolean setLockCredential(com.android.internal.widget.LockscreenCredential, com.android.internal.widget.LockscreenCredential, int)",
    "8": "void resetKeyStore(int)",
    "9": "com.android.internal.widget.VerifyCredentialResponse checkCredential(com.android.internal.widget.LockscreenCredential, int, com.android.internal.widget.ICheckCredentialProgressCallback)",
    "10": "com.android.internal.widget.VerifyCredentialResponse verifyCredential(com.android.internal.widget.LockscreenCredential, int, int)",
    "11": "com.android.internal.widget.VerifyCredentialResponse verifyTiedProfileChallenge(com.android.internal.widget.LockscreenCredential, int, int)",
    "12": "com.android.internal.widget.VerifyCredentialResponse verifyGatekeeperPasswordHandle(long, long, int)",
    "13": "void removeGatekeeperPasswordHandle(long)",
    "14": "int getCredentialType(int)",
    "15": "int getPinLength(int)",
    "16": "boolean refreshStoredPinLength(int)",
    "17": "[B getHashFactor(com.android.internal.widget.LockscreenCredential, int)",
    "18": "void setSeparateProfileChallengeEnabled(int, boolean, com.android.internal.widget.LockscreenCredential)",
    "19": "boolean getSeparateProfileChallengeEnabled(int)",
    "20": "void registerStrongAuthTracker(android.app.trust.IStrongAuthTracker)",
    "21": "void unregisterStrongAuthTracker(android.app.trust.IStrongAuthTracker)",
    "22": "void requireStrongAuth(int, int)",
    "23": "void reportSuccessfulBiometricUnlock(boolean, int)",
    "24": "void scheduleNonStrongBiometricIdleTimeout(int)",
    "25": "void systemReady()",
    "26": "void userPresent(int)",
    "27": "int getStrongAuthForUser(int)",
    "28": "boolean hasPendingEscrowToken(int)",
    "29": "void initRecoveryServiceWithSigFile(java.lang.String, [B, [B)",
    "30": "android.security.keystore.recovery.KeyChainSnapshot getKeyChainSnapshot()",
    "31": "java.lang.String generateKey(java.lang.String)",
    "32": "java.lang.String generateKeyWithMetadata(java.lang.String, [B)",
    "33": "java.lang.String importKey(java.lang.String, [B)",
    "34": "java.lang.String importKeyWithMetadata(java.lang.String, [B, [B)",
    "35": "java.lang.String getKey(java.lang.String)",
    "36": "void removeKey(java.lang.String)",
    "37": "void setSnapshotCreatedPendingIntent(android.app.PendingIntent)",
    "38": "void setServerParams([B)",
    "39": "void setRecoveryStatus(java.lang.String, int)",
    "40": "java.util.Map getRecoveryStatus()",
    "41": "void setRecoverySecretTypes([I)",
    "42": "[I getRecoverySecretTypes()",
    "43": "[B startRecoverySessionWithCertPath(java.lang.String, java.lang.String, android.security.keystore.recovery.RecoveryCertPath, [B, [B, java.util.List)",
    "44": "java.util.Map recoverKeyChainSnapshot(java.lang.String, [B, java.util.List)",
    "45": "void closeSession(java.lang.String)",
    "46": "android.app.RemoteLockscreenValidationSession startRemoteLockscreenValidation()",
    "47": "android.app.RemoteLockscreenValidationResult validateRemoteLockscreen([B)",
    "48": "boolean hasSecureLockScreen()",
    "49": "boolean tryUnlockWithCachedUnifiedChallenge(int)",
    "50": "void removeCachedUnifiedChallenge(int)",
    "51": "boolean registerWeakEscrowTokenRemovedListener(com.android.internal.widget.IWeakEscrowTokenRemovedListener)",
    "52": "boolean unregisterWeakEscrowTokenRemovedListener(com.android.internal.widget.IWeakEscrowTokenRemovedListener)",
    "53": "long addWeakEscrowToken([B, int, com.android.internal.widget.IWeakEscrowTokenActivatedListener)",
    "54": "boolean removeWeakEscrowToken(long, int)",
    "55": "boolean isWeakEscrowTokenActive(long, int)",
    "56": "boolean isWeakEscrowTokenValid(long, [B, int)"
  },
  "android.app.IUriGrantsManager": {
    "1": "void takePersistableUriPermission(android.net.Uri, int, java.lang.String, int)",
    "2": "void releasePersistableUriPermission(android.net.Uri, int, java.lang.String, int)",
    "3": "void grantUriPermissionFromOwner(android.os.IBinder, int, java.lang.String, android.net.Uri, int, int, int)",
    "4": "android.content.pm.ParceledListSlice getGrantedUriPermissions(java.lang.String, int)",
    "5": "void clearGrantedUriPermissions(java.lang.String, int)",
    "6": "android.content.pm.ParceledListSlice getUriPermissions(java.lang.String, boolean, boolean)"
  },
  "android.app.IGameManagerService": {
    "1": "int getGameMode(java.lang.String, int)",
    "2": "void setGameMode(java.lang.String, int, int)",
    "3": "[I getAvailableGameModes(java.lang.String, int)",
    "4": "boolean isAngleEnabled(java.lang.String, int)",
    "5": "void notifyGraphicsEnvironmentSetup(java.lang.String, int)",
    "6": "void setGameState(java.lang.String, android.app.GameState, int)",
    "7": "android.app.GameModeInfo getGameModeInfo(java.lang.String, int)",
    "8": "void setGameServiceProvider(java.lang.String)",
    "9": "void updateResolutionScalingFactor(java.lang.String, int, float, int)",
    "10": "float getResolutionScalingFactor(java.lang.String, int, int)",
    "11": "void updateCustomGameModeConfiguration(java.lang.String, android.app.GameModeConfiguration, int)",
    "12": "void addGameModeListener(android.app.IGameModeListener)",
    "13": "void removeGameModeListener(android.app.IGameModeListener)"
  },
  "android.app.usage.IUsageStatsManager": {
    "1": "android.content.pm.ParceledListSlice queryUsageStats(int, long, long, java.lang.String, int)",
    "2": "android.content.pm.ParceledListSlice queryConfigurationStats(int, long, long, java.lang.String)",
    "3": "android.content.pm.ParceledListSlice queryEventStats(int, long, long, java.lang.String)",
    "4": "android.app.usage.UsageEvents queryEvents(long, long, java.lang.String)",
    "5": "android.app.usage.UsageEvents queryEventsForPackage(long, long, java.lang.String)",
    "6": "android.app.usage.UsageEvents queryEventsForUser(long, long, int, java.lang.String)",
    "7": "android.app.usage.UsageEvents queryEventsForPackageForUser(long, long, int, java.lang.String, java.lang.String)",
    "8": "void setAppInactive(java.lang.String, boolean, int)",
    "9": "boolean isAppStandbyEnabled()",
    "10": "boolean isAppInactive(java.lang.String, int, java.lang.String)",
    "11": "void onCarrierPrivilegedAppsChanged()",
    "12": "void reportChooserSelection(java.lang.String, int, java.lang.String, [Ljava.lang.String;, java.lang.String)",
    "13": "int getAppStandbyBucket(java.lang.String, java.lang.String, int)",
    "14": "void setAppStandbyBucket(java.lang.String, int, int)",
    "15": "android.content.pm.ParceledListSlice getAppStandbyBuckets(java.lang.String, int)",
    "16": "void setAppStandbyBuckets(android.content.pm.ParceledListSlice, int)",
    "17": "int getAppMinStandbyBucket(java.lang.String, java.lang.String, int)",
    "18": "void setEstimatedLaunchTime(java.lang.String, long, int)",
    "19": "void setEstimatedLaunchTimes(android.content.pm.ParceledListSlice, int)",
    "20": "void registerAppUsageObserver(int, [Ljava.lang.String;, long, android.app.PendingIntent, java.lang.String)",
    "21": "void unregisterAppUsageObserver(int, java.lang.String)",
    "22": "void registerUsageSessionObserver(int, [Ljava.lang.String;, long, long, android.app.PendingIntent, android.app.PendingIntent, java.lang.String)",
    "23": "void unregisterUsageSessionObserver(int, java.lang.String)",
    "24": "void registerAppUsageLimitObserver(int, [Ljava.lang.String;, long, long, android.app.PendingIntent, java.lang.String)",
    "25": "void unregisterAppUsageLimitObserver(int, java.lang.String)",
    "26": "void reportUsageStart(android.os.IBinder, java.lang.String, java.lang.String)",
    "27": "void reportPastUsageStart(android.os.IBinder, java.lang.String, long, java.lang.String)",
    "28": "void reportUsageStop(android.os.IBinder, java.lang.String, java.lang.String)",
    "29": "void reportUserInteraction(java.lang.String, int)",
    "30": "int getUsageSource()",
    "31": "void forceUsageSourceSettingRead()",
    "32": "long getLastTimeAnyComponentUsed(java.lang.String, java.lang.String)",
    "33": "android.app.usage.BroadcastResponseStatsList queryBroadcastResponseStats(java.lang.String, long, java.lang.String, int)",
    "34": "void clearBroadcastResponseStats(java.lang.String, long, java.lang.String, int)",
    "35": "void clearBroadcastEvents(java.lang.String, int)",
    "36": "java.lang.String getAppStandbyConstant(java.lang.String)"
  },
  "android.media.musicrecognition.IMusicRecognitionManager": {
    "1": "void beginRecognition(android.media.musicrecognition.RecognitionRequest, android.os.IBinder)"
  },
  "android.os.IPowerManager": {
    "1": "void acquireWakeLock(android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, java.lang.String, int, android.os.IWakeLockCallback)",
    "2": "void acquireWakeLockWithUid(android.os.IBinder, int, java.lang.String, java.lang.String, int, int, android.os.IWakeLockCallback)",
    "3": "void releaseWakeLock(android.os.IBinder, int)",
    "4": "void updateWakeLockUids(android.os.IBinder, [I)",
    "5": "void setPowerBoost(int, int)",
    "6": "void setPowerMode(int, boolean)",
    "7": "boolean setPowerModeChecked(int, boolean)",
    "8": "void updateWakeLockWorkSource(android.os.IBinder, android.os.WorkSource, java.lang.String)",
    "9": "void updateWakeLockCallback(android.os.IBinder, android.os.IWakeLockCallback)",
    "10": "boolean isWakeLockLevelSupported(int)",
    "11": "void userActivity(int, long, int, int)",
    "12": "void wakeUp(long, int, java.lang.String, java.lang.String)",
    "13": "void goToSleep(long, int, int)",
    "14": "void goToSleepWithDisplayId(int, long, int, int)",
    "15": "void nap(long)",
    "16": "float getBrightnessConstraint(int)",
    "17": "boolean isInteractive()",
    "18": "boolean isDisplayInteractive(int)",
    "19": "boolean areAutoPowerSaveModesEnabled()",
    "20": "boolean isPowerSaveMode()",
    "21": "android.os.PowerSaveState getPowerSaveState(int)",
    "22": "boolean setPowerSaveModeEnabled(boolean)",
    "23": "android.os.BatterySaverPolicyConfig getFullPowerSavePolicy()",
    "24": "boolean setFullPowerSavePolicy(android.os.BatterySaverPolicyConfig)",
    "25": "boolean setDynamicPowerSaveHint(boolean, int)",
    "26": "boolean setAdaptivePowerSavePolicy(android.os.BatterySaverPolicyConfig)",
    "27": "boolean setAdaptivePowerSaveEnabled(boolean)",
    "28": "int getPowerSaveModeTrigger()",
    "29": "void setBatteryDischargePrediction(android.os.ParcelDuration, boolean)",
    "30": "android.os.ParcelDuration getBatteryDischargePrediction()",
    "31": "boolean isBatteryDischargePredictionPersonalized()",
    "32": "boolean isDeviceIdleMode()",
    "33": "boolean isLightDeviceIdleMode()",
    "34": "boolean isLowPowerStandbySupported()",
    "35": "boolean isLowPowerStandbyEnabled()",
    "36": "void setLowPowerStandbyEnabled(boolean)",
    "37": "void setLowPowerStandbyActiveDuringMaintenance(boolean)",
    "38": "void forceLowPowerStandbyActive(boolean)",
    "39": "void setLowPowerStandbyPolicy(android.os.IPowerManager$LowPowerStandbyPolicy)",
    "40": "android.os.IPowerManager$LowPowerStandbyPolicy getLowPowerStandbyPolicy()",
    "41": "boolean isExemptFromLowPowerStandby()",
    "42": "boolean isReasonAllowedInLowPowerStandby(int)",
    "43": "boolean isFeatureAllowedInLowPowerStandby(java.lang.String)",
    "44": "void acquireLowPowerStandbyPorts(android.os.IBinder, java.util.List)",
    "45": "void releaseLowPowerStandbyPorts(android.os.IBinder)",
    "46": "java.util.List getActiveLowPowerStandbyPorts()",
    "47": "void reboot(boolean, java.lang.String, boolean)",
    "48": "void rebootSafeMode(boolean, boolean)",
    "49": "void shutdown(boolean, java.lang.String, boolean)",
    "50": "void crash(java.lang.String)",
    "51": "int getLastShutdownReason()",
    "52": "int getLastSleepReason()",
    "53": "void setStayOnSetting(int)",
    "54": "void boostScreenBrightness(long)",
    "55": "void acquireWakeLockAsync(android.os.IBinder, int, java.lang.String, java.lang.String, android.os.WorkSource, java.lang.String)",
    "56": "void releaseWakeLockAsync(android.os.IBinder, int)",
    "57": "void updateWakeLockUidsAsync(android.os.IBinder, [I)",
    "58": "boolean isScreenBrightnessBoosted()",
    "59": "void setAttentionLight(boolean, int)",
    "60": "void setDozeAfterScreenOff(boolean)",
    "61": "boolean isAmbientDisplayAvailable()",
    "62": "void suppressAmbientDisplay(java.lang.String, boolean)",
    "63": "boolean isAmbientDisplaySuppressedForToken(java.lang.String)",
    "64": "boolean isAmbientDisplaySuppressed()",
    "65": "boolean isAmbientDisplaySuppressedForTokenByApp(java.lang.String, int)",
    "66": "boolean forceSuspend()"
  },
  "android.media.midi.IMidiManager": {
    "1": "[Landroid.media.midi.MidiDeviceInfo; getDevices()",
    "2": "[Landroid.media.midi.MidiDeviceInfo; getDevicesForTransport(int)",
    "3": "void registerListener(android.os.IBinder, android.media.midi.IMidiDeviceListener)",
    "4": "void unregisterListener(android.os.IBinder, android.media.midi.IMidiDeviceListener)",
    "5": "void openDevice(android.os.IBinder, android.media.midi.MidiDeviceInfo, android.media.midi.IMidiDeviceOpenCallback)",
    "6": "void openBluetoothDevice(android.os.IBinder, android.bluetooth.BluetoothDevice, android.media.midi.IMidiDeviceOpenCallback)",
    "7": "void closeDevice(android.os.IBinder, android.os.IBinder)",
    "8": "android.media.midi.MidiDeviceInfo registerDeviceServer(android.media.midi.IMidiDeviceServer, int, int, [Ljava.lang.String;, [Ljava.lang.String;, android.os.Bundle, int, int)",
    "9": "void unregisterDeviceServer(android.media.midi.IMidiDeviceServer)",
    "10": "android.media.midi.MidiDeviceInfo getServiceDeviceInfo(java.lang.String, java.lang.String)",
    "11": "android.media.midi.MidiDeviceStatus getDeviceStatus(android.media.midi.MidiDeviceInfo)",
    "12": "void setDeviceStatus(android.media.midi.IMidiDeviceServer, android.media.midi.MidiDeviceStatus)",
    "13": "void updateTotalBytes(android.media.midi.IMidiDeviceServer, int, int)"
  },
  "android.app.tare.IEconomyManager": {
    "1": "int getEnabledMode()"
  },
  "android.net.IIpConnectivityMetrics": {
    "1": "int logEvent(android.net.ConnectivityMetricsEvent)",
    "2": "void logDefaultNetworkValidity(boolean)",
    "3": "void logDefaultNetworkEvent(android.net.Network, int, boolean, android.net.LinkProperties, android.net.NetworkCapabilities, android.net.Network, int, android.net.LinkProperties, android.net.NetworkCapabilities)",
    "4": "boolean addNetdEventCallback(int, android.net.INetdEventCallback)",
    "5": "boolean removeNetdEventCallback(int)"
  },
  "android.os.IStatsd": {
    "1": "void systemRunning()",
    "2": "void bootCompleted()",
    "3": "void statsCompanionReady()",
    "4": "void informAnomalyAlarmFired()",
    "5": "void informPollAlarmFired()",
    "6": "void informAlarmForSubscriberTriggeringFired()",
    "7": "void informDeviceShutdown()",
    "8": "void informAllUidData(android.os.ParcelFileDescriptor)",
    "9": "void informOnePackage(java.lang.String, int, long, java.lang.String, java.lang.String, [B)",
    "10": "void informOnePackageRemoved(java.lang.String, int)",
    "11": "[B getData(long, int)",
    "12": "[B getMetadata()",
    "13": "void addConfiguration(long, [B, int)",
    "14": "void setDataFetchOperation(long, android.os.IPendingIntentRef, int)",
    "15": "void removeDataFetchOperation(long, int)",
    "16": "[J setActiveConfigsChangedOperation(android.os.IPendingIntentRef, int)",
    "17": "void removeActiveConfigsChangedOperation(int)",
    "18": "void removeConfiguration(long, int)",
    "19": "void setBroadcastSubscriber(long, long, android.os.IPendingIntentRef, int)",
    "20": "void unsetBroadcastSubscriber(long, long, int)",
    "21": "void allPullersFromBootRegistered()",
    "22": "void registerPullAtomCallback(int, int, long, long, [I, android.os.IPullAtomCallback)",
    "23": "void registerNativePullAtomCallback(int, long, long, [I, android.os.IPullAtomCallback)",
    "24": "void unregisterPullAtomCallback(int, int)",
    "25": "void unregisterNativePullAtomCallback(int)",
    "26": "[J getRegisteredExperimentIds()",
    "27": "void updateProperties([Landroid.util.PropertyParcel;)",
    "28": "void querySql(java.lang.String, int, [B, android.os.IStatsQueryCallback, long, java.lang.String, int)",
    "29": "[J setRestrictedMetricsChangedOperation(long, java.lang.String, android.os.IPendingIntentRef, int)",
    "30": "void removeRestrictedMetricsChangedOperation(long, java.lang.String, int)",
    "31": "void addSubscription([B, android.os.IStatsSubscriptionCallback)",
    "32": "void removeSubscription(android.os.IStatsSubscriptionCallback)",
    "33": "void flushSubscription(android.os.IStatsSubscriptionCallback)"
  },
  "android.os.IRecoverySystem": {
    "1": "boolean allocateSpaceForUpdate(java.lang.String)",
    "2": "boolean uncrypt(java.lang.String, android.os.IRecoverySystemProgressListener)",
    "3": "boolean setupBcb(java.lang.String)",
    "4": "boolean clearBcb()",
    "5": "void rebootRecoveryWithCommand(java.lang.String)",
    "6": "boolean requestLskf(java.lang.String, android.content.IntentSender)",
    "7": "boolean clearLskf(java.lang.String)",
    "8": "boolean isLskfCaptured(java.lang.String)",
    "9": "int rebootWithLskfAssumeSlotSwitch(java.lang.String, java.lang.String)",
    "10": "int rebootWithLskf(java.lang.String, java.lang.String, boolean)"
  },
  "android.app.ILocaleManager": {
    "1": "void setApplicationLocales(java.lang.String, int, android.os.LocaleList, boolean)",
    "2": "android.os.LocaleList getApplicationLocales(java.lang.String, int)",
    "3": "android.os.LocaleList getSystemLocales()",
    "4": "void setOverrideLocaleConfig(java.lang.String, int, android.app.LocaleConfig)",
    "5": "android.app.LocaleConfig getOverrideLocaleConfig(java.lang.String, int)"
  },
  "android.os.IUserManager": {
    "1": "int getCredentialOwnerProfile(int)",
    "2": "int getProfileParentId(int)",
    "3": "android.content.pm.UserInfo createUserWithThrow(java.lang.String, java.lang.String, int)",
    "4": "android.content.pm.UserInfo preCreateUserWithThrow(java.lang.String)",
    "5": "android.content.pm.UserInfo createProfileForUserWithThrow(java.lang.String, java.lang.String, int, int, [Ljava.lang.String;)",
    "6": "android.content.pm.UserInfo createRestrictedProfileWithThrow(java.lang.String, int)",
    "7": "[Ljava.lang.String; getPreInstallableSystemPackages(java.lang.String)",
    "8": "void setUserEnabled(int)",
    "9": "void setUserAdmin(int)",
    "10": "void revokeUserAdmin(int)",
    "11": "void evictCredentialEncryptionKey(int)",
    "12": "boolean removeUser(int)",
    "13": "boolean removeUserEvenWhenDisallowed(int)",
    "14": "void setUserName(int, java.lang.String)",
    "15": "void setUserIcon(int, android.graphics.Bitmap)",
    "16": "android.os.ParcelFileDescriptor getUserIcon(int)",
    "17": "android.content.pm.UserInfo getPrimaryUser()",
    "18": "int getMainUserId()",
    "19": "int getPreviousFullUserToEnterForeground()",
    "20": "java.util.List getUsers(boolean, boolean, boolean)",
    "21": "java.util.List getProfiles(int, boolean)",
    "22": "[I getProfileIds(int, boolean)",
    "23": "boolean isUserTypeEnabled(java.lang.String)",
    "24": "boolean canAddMoreUsersOfType(java.lang.String)",
    "25": "int getRemainingCreatableUserCount(java.lang.String)",
    "26": "int getRemainingCreatableProfileCount(java.lang.String, int)",
    "27": "boolean canAddMoreProfilesToUser(java.lang.String, int, boolean)",
    "28": "boolean canAddMoreManagedProfiles(int, boolean)",
    "29": "android.content.pm.UserInfo getProfileParent(int)",
    "30": "boolean isSameProfileGroup(int, int)",
    "31": "boolean isHeadlessSystemUserMode()",
    "32": "boolean isUserOfType(int, java.lang.String)",
    "33": "android.content.pm.UserInfo getUserInfo(int)",
    "34": "android.content.pm.UserProperties getUserPropertiesCopy(int)",
    "35": "java.lang.String getUserAccount(int)",
    "36": "void setUserAccount(int, java.lang.String)",
    "37": "long getUserCreationTime(int)",
    "38": "int getUserSwitchability(int)",
    "39": "boolean isUserSwitcherEnabled(boolean, int)",
    "40": "boolean isRestricted(int)",
    "41": "boolean canHaveRestrictedProfile(int)",
    "42": "int getUserSerialNumber(int)",
    "43": "int getUserHandle(int)",
    "44": "int getUserRestrictionSource(java.lang.String, int)",
    "45": "java.util.List getUserRestrictionSources(java.lang.String, int)",
    "46": "android.os.Bundle getUserRestrictions(int)",
    "47": "boolean hasBaseUserRestriction(java.lang.String, int)",
    "48": "boolean hasUserRestriction(java.lang.String, int)",
    "49": "boolean hasUserRestrictionOnAnyUser(java.lang.String)",
    "50": "boolean isSettingRestrictedForUser(java.lang.String, int, java.lang.String, int)",
    "51": "void addUserRestrictionsListener(android.os.IUserRestrictionsListener)",
    "52": "void setUserRestriction(java.lang.String, boolean, int)",
    "53": "void setApplicationRestrictions(java.lang.String, android.os.Bundle, int)",
    "54": "android.os.Bundle getApplicationRestrictions(java.lang.String)",
    "55": "android.os.Bundle getApplicationRestrictionsForUser(java.lang.String, int)",
    "56": "void setDefaultGuestRestrictions(android.os.Bundle)",
    "57": "android.os.Bundle getDefaultGuestRestrictions()",
    "58": "int removeUserWhenPossible(int, boolean)",
    "59": "boolean markGuestForDeletion(int)",
    "60": "java.util.List getGuestUsers()",
    "61": "boolean isQuietModeEnabled(int)",
    "62": "android.os.UserHandle createUserWithAttributes(java.lang.String, java.lang.String, int, android.graphics.Bitmap, java.lang.String, java.lang.String, android.os.PersistableBundle)",
    "63": "void setSeedAccountData(int, java.lang.String, java.lang.String, android.os.PersistableBundle, boolean)",
    "64": "java.lang.String getSeedAccountName(int)",
    "65": "java.lang.String getSeedAccountType(int)",
    "66": "android.os.PersistableBundle getSeedAccountOptions(int)",
    "67": "void clearSeedAccountData(int)",
    "68": "boolean someUserHasSeedAccount(java.lang.String, java.lang.String)",
    "69": "boolean someUserHasAccount(java.lang.String, java.lang.String)",
    "70": "java.lang.String getProfileType(int)",
    "71": "boolean isDemoUser(int)",
    "72": "boolean isAdminUser(int)",
    "73": "boolean isPreCreated(int)",
    "74": "android.content.pm.UserInfo createProfileForUserEvenWhenDisallowedWithThrow(java.lang.String, java.lang.String, int, int, [Ljava.lang.String;)",
    "75": "boolean isUserUnlockingOrUnlocked(int)",
    "76": "int getUserIconBadgeResId(int)",
    "77": "int getUserBadgeResId(int)",
    "78": "int getUserBadgeNoBackgroundResId(int)",
    "79": "int getUserBadgeLabelResId(int)",
    "80": "int getUserBadgeColorResId(int)",
    "81": "int getUserBadgeDarkColorResId(int)",
    "82": "boolean hasBadge(int)",
    "83": "boolean isUserUnlocked(int)",
    "84": "boolean isUserRunning(int)",
    "85": "boolean isUserForeground(int)",
    "86": "boolean isUserVisible(int)",
    "87": "[I getVisibleUsers()",
    "88": "int getMainDisplayIdAssignedToUser()",
    "89": "boolean isUserNameSet(int)",
    "90": "boolean hasRestrictedProfiles(int)",
    "91": "boolean requestQuietModeEnabled(java.lang.String, boolean, int, android.content.IntentSender, int)",
    "92": "java.lang.String getUserName()",
    "93": "long getUserStartRealtime()",
    "94": "long getUserUnlockRealtime()",
    "95": "boolean setUserEphemeral(int, boolean)",
    "96": "void setBootUser(int)",
    "97": "int getBootUser()"
  },
  "android.os.IStatsCompanionService": {
    "1": "void statsdReady()",
    "2": "void setAnomalyAlarm(long)",
    "3": "void cancelAnomalyAlarm()",
    "4": "void setPullingAlarm(long)",
    "5": "void cancelPullingAlarm()",
    "6": "void setAlarmForSubscriberTriggering(long)",
    "7": "void cancelAlarmForSubscriberTriggering()",
    "8": "boolean checkPermission(java.lang.String, int, int)"
  },
  "android.content.integrity.IAppIntegrityManager": {
    "1": "void updateRuleSet(java.lang.String, android.content.pm.ParceledListSlice, android.content.IntentSender)",
    "2": "java.lang.String getCurrentRuleSetVersion()",
    "3": "java.lang.String getCurrentRuleSetProvider()",
    "4": "android.content.pm.ParceledListSlice getCurrentRules()",
    "5": "java.util.List getWhitelistedRuleProviders()"
  },
  "android.app.ISearchManager": {
    "1": "android.app.SearchableInfo getSearchableInfo(android.content.ComponentName)",
    "2": "java.util.List getSearchablesInGlobalSearch()",
    "3": "java.util.List getGlobalSearchActivities()",
    "4": "android.content.ComponentName getGlobalSearchActivity()",
    "5": "android.content.ComponentName getWebSearchActivity()",
    "6": "void launchAssist(int, android.os.Bundle)"
  },
  "android.app.wallpapereffectsgeneration.IWallpaperEffectsGenerationManager": {
    "1": "void generateCinematicEffect(android.app.wallpapereffectsgeneration.CinematicEffectRequest, android.app.wallpapereffectsgeneration.ICinematicEffectListener)",
    "2": "void returnCinematicEffectResponse(android.app.wallpapereffectsgeneration.CinematicEffectResponse)"
  },
  "android.app.IWallpaperManager": {
    "1": "android.os.ParcelFileDescriptor setWallpaper(java.lang.String, java.lang.String, android.graphics.Rect, boolean, android.os.Bundle, int, android.app.IWallpaperManagerCallback, int)",
    "2": "void setWallpaperComponentChecked(android.content.ComponentName, java.lang.String, int, int)",
    "3": "void setWallpaperComponent(android.content.ComponentName)",
    "4": "android.os.ParcelFileDescriptor getWallpaper(java.lang.String, android.app.IWallpaperManagerCallback, int, android.os.Bundle, int)",
    "5": "android.os.ParcelFileDescriptor getWallpaperWithFeature(java.lang.String, java.lang.String, android.app.IWallpaperManagerCallback, int, android.os.Bundle, int, boolean)",
    "6": "int getWallpaperIdForUser(int, int)",
    "7": "android.app.WallpaperInfo getWallpaperInfo(int)",
    "8": "android.app.WallpaperInfo getWallpaperInfoWithFlags(int, int)",
    "9": "android.os.ParcelFileDescriptor getWallpaperInfoFile(int)",
    "10": "void clearWallpaper(java.lang.String, int, int)",
    "11": "boolean hasNamedWallpaper(java.lang.String)",
    "12": "void setDimensionHints(int, int, java.lang.String, int)",
    "13": "int getWidthHint(int)",
    "14": "int getHeightHint(int)",
    "15": "void setDisplayPadding(android.graphics.Rect, java.lang.String, int)",
    "16": "java.lang.String getName()",
    "17": "void settingsRestored()",
    "18": "boolean isWallpaperSupported(java.lang.String)",
    "19": "boolean isSetWallpaperAllowed(java.lang.String)",
    "20": "boolean isWallpaperBackupEligible(int, int)",
    "21": "boolean setLockWallpaperCallback(android.app.IWallpaperManagerCallback)",
    "22": "android.app.WallpaperColors getWallpaperColors(int, int, int)",
    "23": "void removeOnLocalColorsChangedListener(android.app.ILocalWallpaperColorConsumer, java.util.List, int, int, int)",
    "24": "void addOnLocalColorsChangedListener(android.app.ILocalWallpaperColorConsumer, java.util.List, int, int, int)",
    "25": "void registerWallpaperColorsCallback(android.app.IWallpaperManagerCallback, int, int)",
    "26": "void unregisterWallpaperColorsCallback(android.app.IWallpaperManagerCallback, int, int)",
    "27": "void setInAmbientMode(boolean, long)",
    "28": "void notifyWakingUp(int, int, android.os.Bundle)",
    "29": "void notifyGoingToSleep(int, int, android.os.Bundle)",
    "30": "void setWallpaperDimAmount(float)",
    "31": "float getWallpaperDimAmount()",
    "32": "boolean lockScreenWallpaperExists()",
    "33": "boolean isStaticWallpaper(int)",
    "34": "boolean isLockscreenLiveWallpaperEnabled()",
    "35": "boolean isMultiCropEnabled()"
  },
  "android.location.ILocationManager": {
    "1": "android.location.Location getLastLocation(java.lang.String, android.location.LastLocationRequest, java.lang.String, java.lang.String)",
    "2": "android.os.ICancellationSignal getCurrentLocation(java.lang.String, android.location.LocationRequest, android.location.ILocationCallback, java.lang.String, java.lang.String, java.lang.String)",
    "3": "void registerLocationListener(java.lang.String, android.location.LocationRequest, android.location.ILocationListener, java.lang.String, java.lang.String, java.lang.String)",
    "4": "void unregisterLocationListener(android.location.ILocationListener)",
    "5": "void registerLocationPendingIntent(java.lang.String, android.location.LocationRequest, android.app.PendingIntent, java.lang.String, java.lang.String)",
    "6": "void unregisterLocationPendingIntent(android.app.PendingIntent)",
    "7": "void injectLocation(android.location.Location)",
    "8": "void requestListenerFlush(java.lang.String, android.location.ILocationListener, int)",
    "9": "void requestPendingIntentFlush(java.lang.String, android.app.PendingIntent, int)",
    "10": "void requestGeofence(android.location.Geofence, android.app.PendingIntent, java.lang.String, java.lang.String)",
    "11": "void removeGeofence(android.app.PendingIntent)",
    "12": "boolean geocoderIsPresent()",
    "13": "void getFromLocation(double, double, int, android.location.GeocoderParams, android.location.IGeocodeListener)",
    "14": "void getFromLocationName(java.lang.String, double, double, double, double, int, android.location.GeocoderParams, android.location.IGeocodeListener)",
    "15": "android.location.GnssCapabilities getGnssCapabilities()",
    "16": "int getGnssYearOfHardware()",
    "17": "java.lang.String getGnssHardwareModelName()",
    "18": "java.util.List getGnssAntennaInfos()",
    "19": "void registerGnssStatusCallback(android.location.IGnssStatusListener, java.lang.String, java.lang.String, java.lang.String)",
    "20": "void unregisterGnssStatusCallback(android.location.IGnssStatusListener)",
    "21": "void registerGnssNmeaCallback(android.location.IGnssNmeaListener, java.lang.String, java.lang.String, java.lang.String)",
    "22": "void unregisterGnssNmeaCallback(android.location.IGnssNmeaListener)",
    "23": "void addGnssMeasurementsListener(android.location.GnssMeasurementRequest, android.location.IGnssMeasurementsListener, java.lang.String, java.lang.String, java.lang.String)",
    "24": "void removeGnssMeasurementsListener(android.location.IGnssMeasurementsListener)",
    "25": "void injectGnssMeasurementCorrections(android.location.GnssMeasurementCorrections)",
    "26": "void addGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener, java.lang.String, java.lang.String, java.lang.String)",
    "27": "void removeGnssNavigationMessageListener(android.location.IGnssNavigationMessageListener)",
    "28": "void addGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener, java.lang.String, java.lang.String, java.lang.String)",
    "29": "void removeGnssAntennaInfoListener(android.location.IGnssAntennaInfoListener)",
    "30": "void addProviderRequestListener(android.location.provider.IProviderRequestListener)",
    "31": "void removeProviderRequestListener(android.location.provider.IProviderRequestListener)",
    "32": "int getGnssBatchSize()",
    "33": "void startGnssBatch(long, android.location.ILocationListener, java.lang.String, java.lang.String, java.lang.String)",
    "34": "void flushGnssBatch()",
    "35": "void stopGnssBatch()",
    "36": "boolean hasProvider(java.lang.String)",
    "37": "java.util.List getAllProviders()",
    "38": "java.util.List getProviders(android.location.Criteria, boolean)",
    "39": "java.lang.String getBestProvider(android.location.Criteria, boolean)",
    "40": "android.location.provider.ProviderProperties getProviderProperties(java.lang.String)",
    "41": "boolean isProviderPackage(java.lang.String, java.lang.String, java.lang.String)",
    "42": "java.util.List getProviderPackages(java.lang.String)",
    "43": "void setExtraLocationControllerPackage(java.lang.String)",
    "44": "java.lang.String getExtraLocationControllerPackage()",
    "45": "void setExtraLocationControllerPackageEnabled(boolean)",
    "46": "boolean isExtraLocationControllerPackageEnabled()",
    "47": "boolean isProviderEnabledForUser(java.lang.String, int)",
    "48": "boolean isLocationEnabledForUser(int)",
    "49": "void setLocationEnabledForUser(boolean, int)",
    "50": "boolean isAdasGnssLocationEnabledForUser(int)",
    "51": "void setAdasGnssLocationEnabledForUser(boolean, int)",
    "52": "boolean isAutomotiveGnssSuspended()",
    "53": "void setAutomotiveGnssSuspended(boolean)",
    "54": "void addTestProvider(java.lang.String, android.location.provider.ProviderProperties, java.util.List, java.lang.String, java.lang.String)",
    "55": "void removeTestProvider(java.lang.String, java.lang.String, java.lang.String)",
    "56": "void setTestProviderLocation(java.lang.String, android.location.Location, java.lang.String, java.lang.String)",
    "57": "void setTestProviderEnabled(java.lang.String, boolean, java.lang.String, java.lang.String)",
    "58": "android.location.LocationTime getGnssTimeMillis()",
    "59": "void sendExtraCommand(java.lang.String, java.lang.String, android.os.Bundle)",
    "60": "[Ljava.lang.String; getBackgroundThrottlingWhitelist()",
    "61": "android.os.PackageTagsList getIgnoreSettingsAllowlist()",
    "62": "android.os.PackageTagsList getAdasAllowlist()"
  },
  "android.media.metrics.IMediaMetricsManager": {
    "1": "void reportPlaybackMetrics(java.lang.String, android.media.metrics.PlaybackMetrics, int)",
    "2": "java.lang.String getPlaybackSessionId(int)",
    "3": "java.lang.String getRecordingSessionId(int)",
    "4": "void reportNetworkEvent(java.lang.String, android.media.metrics.NetworkEvent, int)",
    "5": "void reportPlaybackErrorEvent(java.lang.String, android.media.metrics.PlaybackErrorEvent, int)",
    "6": "void reportPlaybackStateEvent(java.lang.String, android.media.metrics.PlaybackStateEvent, int)",
    "7": "void reportTrackChangeEvent(java.lang.String, android.media.metrics.TrackChangeEvent, int)",
    "8": "java.lang.String getTranscodingSessionId(int)",
    "9": "java.lang.String getEditingSessionId(int)",
    "10": "java.lang.String getBundleSessionId(int)",
    "11": "void reportBundleMetrics(java.lang.String, android.os.PersistableBundle, int)",
    "12": "void releaseSessionId(java.lang.String, int)"
  },
  "android.content.IClipboard": {
    "1": "void setPrimaryClip(android.content.ClipData, java.lang.String, java.lang.String, int, int)",
    "2": "void setPrimaryClipAsPackage(android.content.ClipData, java.lang.String, java.lang.String, int, int, java.lang.String)",
    "3": "void clearPrimaryClip(java.lang.String, java.lang.String, int, int)",
    "4": "android.content.ClipData getPrimaryClip(java.lang.String, java.lang.String, int, int)",
    "5": "android.content.ClipDescription getPrimaryClipDescription(java.lang.String, java.lang.String, int, int)",
    "6": "boolean hasPrimaryClip(java.lang.String, java.lang.String, int, int)",
    "7": "void addPrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener, java.lang.String, java.lang.String, int, int)",
    "8": "void removePrimaryClipChangedListener(android.content.IOnPrimaryClipChangedListener, java.lang.String, java.lang.String, int, int)",
    "9": "boolean hasClipboardText(java.lang.String, java.lang.String, int, int)",
    "10": "java.lang.String getPrimaryClipSource(java.lang.String, java.lang.String, int, int)",
    "11": "boolean areClipboardAccessNotificationsEnabledForUser(int)",
    "12": "void setClipboardAccessNotificationsEnabledForUser(boolean, int)"
  },
  "android.app.smartspace.ISmartspaceManager": {
    "1": "void createSmartspaceSession(android.app.smartspace.SmartspaceConfig, android.app.smartspace.SmartspaceSessionId, android.os.IBinder)",
    "2": "void notifySmartspaceEvent(android.app.smartspace.SmartspaceSessionId, android.app.smartspace.SmartspaceTargetEvent)",
    "3": "void requestSmartspaceUpdate(android.app.smartspace.SmartspaceSessionId)",
    "4": "void registerSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId, android.app.smartspace.ISmartspaceCallback)",
    "5": "void unregisterSmartspaceUpdates(android.app.smartspace.SmartspaceSessionId, android.app.smartspace.ISmartspaceCallback)",
    "6": "void destroySmartspaceSession(android.app.smartspace.SmartspaceSessionId)"
  },
  "com.android.internal.net.INetworkWatchlistManager": {
    "1": "boolean startWatchlistLogging()",
    "2": "boolean stopWatchlistLogging()",
    "3": "void reloadWatchlist()",
    "4": "void reportWatchlistIfNecessary()",
    "5": "[B getWatchlistConfigHash()"
  },
  "android.content.pm.ICrossProfileApps": {
    "1": "void startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.ComponentName, int, boolean, android.os.IBinder, android.os.Bundle)",
    "2": "void startActivityAsUserByIntent(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, int, android.os.IBinder, android.os.Bundle)",
    "3": "java.util.List getTargetUserProfiles(java.lang.String)",
    "4": "boolean canInteractAcrossProfiles(java.lang.String)",
    "5": "boolean canRequestInteractAcrossProfiles(java.lang.String)",
    "6": "void setInteractAcrossProfilesAppOp(int, java.lang.String, int)",
    "7": "boolean canConfigureInteractAcrossProfiles(int, java.lang.String)",
    "8": "boolean canUserAttemptToConfigureInteractAcrossProfiles(int, java.lang.String)",
    "9": "void resetInteractAcrossProfilesAppOps(int, java.util.List)",
    "10": "void clearInteractAcrossProfilesAppOps(int)"
  },
  "android.content.IRestrictionsManager": {
    "1": "android.os.Bundle getApplicationRestrictions(java.lang.String)",
    "2": "java.util.List getApplicationRestrictionsPerAdminForUser(int, java.lang.String)",
    "3": "boolean hasRestrictionsProvider()",
    "4": "void requestPermission(java.lang.String, java.lang.String, java.lang.String, android.os.PersistableBundle)",
    "5": "void notifyPermissionResponse(java.lang.String, android.os.PersistableBundle)",
    "6": "android.content.Intent createLocalApprovalIntent()"
  },
  "android.location.ICountryDetector": {
    "1": "android.location.Country detectCountry()",
    "2": "void addCountryListener(android.location.ICountryListener)",
    "3": "void removeCountryListener(android.location.ICountryListener)"
  },
  "android.nearby.INearbyManager": {
    "1": "int registerScanListener(android.nearby.ScanRequest, android.nearby.IScanListener, java.lang.String, java.lang.String)",
    "2": "void unregisterScanListener(android.nearby.IScanListener, java.lang.String, java.lang.String)",
    "3": "void startBroadcast(android.nearby.BroadcastRequestParcelable, android.nearby.IBroadcastListener, java.lang.String, java.lang.String)",
    "4": "void stopBroadcast(android.nearby.IBroadcastListener, java.lang.String, java.lang.String)",
    "5": "void queryOffloadCapability(android.nearby.aidl.IOffloadCallback)"
  },
  "android.os.IUpdateLock": {
    "1": "void acquireUpdateLock(android.os.IBinder, java.lang.String)",
    "2": "void releaseUpdateLock(android.os.IBinder)"
  },
  "android.app.adservices.IAdServicesManager": {
    "1": "android.app.adservices.consent.ConsentParcel getConsent(int)",
    "2": "void setConsent(android.app.adservices.consent.ConsentParcel)",
    "3": "void recordAdServicesDeletionOccurred(int)",
    "4": "boolean needsToHandleRollbackReconciliation(int)",
    "5": "void recordNotificationDisplayed()",
    "6": "boolean wasNotificationDisplayed()",
    "7": "void recordGaUxNotificationDisplayed()",
    "8": "boolean wasGaUxNotificationDisplayed()",
    "9": "void recordUserManualInteractionWithConsent(int)",
    "10": "int getUserManualInteractionWithConsent()",
    "11": "void recordBlockedTopic(java.util.List)",
    "12": "void removeBlockedTopic(android.app.adservices.topics.TopicParcel)",
    "13": "java.util.List retrieveAllBlockedTopics()",
    "14": "void clearAllBlockedTopics()",
    "15": "void recordDefaultConsent(boolean)",
    "16": "void recordTopicsDefaultConsent(boolean)",
    "17": "void recordFledgeDefaultConsent(boolean)",
    "18": "void recordMeasurementDefaultConsent(boolean)",
    "19": "void recordDefaultAdIdState(boolean)",
    "20": "boolean getDefaultConsent()",
    "21": "boolean getTopicsDefaultConsent()",
    "22": "boolean getFledgeDefaultConsent()",
    "23": "boolean getMeasurementDefaultConsent()",
    "24": "boolean getDefaultAdIdState()",
    "25": "java.lang.String getCurrentPrivacySandboxFeature()",
    "26": "void setCurrentPrivacySandboxFeature(java.lang.String)",
    "27": "java.util.List getKnownAppsWithConsent(java.util.List)",
    "28": "java.util.List getAppsWithRevokedConsent(java.util.List)",
    "29": "void setConsentForApp(java.lang.String, int, boolean)",
    "30": "void clearKnownAppsWithConsent()",
    "31": "void clearAllAppConsentData()",
    "32": "boolean isConsentRevokedForApp(java.lang.String, int)",
    "33": "boolean setConsentForAppIfNew(java.lang.String, int, boolean)",
    "34": "void clearConsentForUninstalledApp(java.lang.String, int)",
    "35": "boolean isAdIdEnabled()",
    "36": "void setAdIdEnabled(boolean)",
    "37": "boolean isU18Account()",
    "38": "void setU18Account(boolean)",
    "39": "boolean isEntryPointEnabled()",
    "40": "void setEntryPointEnabled(boolean)",
    "41": "boolean isAdultAccount()",
    "42": "void setAdultAccount(boolean)",
    "43": "boolean wasU18NotificationDisplayed()",
    "44": "void setU18NotificationDisplayed(boolean)"
  },
  "android.app.INotificationManager": {
    "1": "void cancelAllNotifications(java.lang.String, int)",
    "2": "void clearData(java.lang.String, int, boolean)",
    "3": "void enqueueTextToast(java.lang.String, android.os.IBinder, java.lang.CharSequence, int, boolean, int, android.app.ITransientNotificationCallback)",
    "4": "void enqueueToast(java.lang.String, android.os.IBinder, android.app.ITransientNotification, int, boolean, int)",
    "5": "void cancelToast(java.lang.String, android.os.IBinder)",
    "6": "void finishToken(java.lang.String, android.os.IBinder)",
    "7": "void enqueueNotificationWithTag(java.lang.String, java.lang.String, java.lang.String, int, android.app.Notification, int)",
    "8": "void cancelNotificationWithTag(java.lang.String, java.lang.String, java.lang.String, int, int)",
    "9": "boolean isInCall(java.lang.String, int)",
    "10": "void setShowBadge(java.lang.String, int, boolean)",
    "11": "boolean canShowBadge(java.lang.String, int)",
    "12": "boolean hasSentValidMsg(java.lang.String, int)",
    "13": "boolean isInInvalidMsgState(java.lang.String, int)",
    "14": "boolean hasUserDemotedInvalidMsgApp(java.lang.String, int)",
    "15": "void setInvalidMsgAppDemoted(java.lang.String, int, boolean)",
    "16": "boolean hasSentValidBubble(java.lang.String, int)",
    "17": "void setNotificationsEnabledForPackage(java.lang.String, int, boolean)",
    "18": "void setNotificationsEnabledWithImportanceLockForPackage(java.lang.String, int, boolean)",
    "19": "boolean areNotificationsEnabledForPackage(java.lang.String, int)",
    "20": "boolean areNotificationsEnabled(java.lang.String)",
    "21": "int getPackageImportance(java.lang.String)",
    "22": "boolean isImportanceLocked(java.lang.String, int)",
    "23": "java.util.List getAllowedAssistantAdjustments(java.lang.String)",
    "24": "boolean shouldHideSilentStatusIcons(java.lang.String)",
    "25": "void setHideSilentStatusIcons(boolean)",
    "26": "void setBubblesAllowed(java.lang.String, int, int)",
    "27": "boolean areBubblesAllowed(java.lang.String)",
    "28": "boolean areBubblesEnabled(android.os.UserHandle)",
    "29": "int getBubblePreferenceForPackage(java.lang.String, int)",
    "30": "void createNotificationChannelGroups(java.lang.String, android.content.pm.ParceledListSlice)",
    "31": "void createNotificationChannels(java.lang.String, android.content.pm.ParceledListSlice)",
    "32": "void createNotificationChannelsForPackage(java.lang.String, int, android.content.pm.ParceledListSlice)",
    "33": "android.content.pm.ParceledListSlice getConversations(boolean)",
    "34": "android.content.pm.ParceledListSlice getConversationsForPackage(java.lang.String, int)",
    "35": "android.content.pm.ParceledListSlice getNotificationChannelGroupsForPackage(java.lang.String, int, boolean)",
    "36": "android.app.NotificationChannelGroup getNotificationChannelGroupForPackage(java.lang.String, java.lang.String, int)",
    "37": "android.app.NotificationChannelGroup getPopulatedNotificationChannelGroupForPackage(java.lang.String, int, java.lang.String, boolean)",
    "38": "void updateNotificationChannelGroupForPackage(java.lang.String, int, android.app.NotificationChannelGroup)",
    "39": "void updateNotificationChannelForPackage(java.lang.String, int, android.app.NotificationChannel)",
    "40": "void unlockNotificationChannel(java.lang.String, int, java.lang.String)",
    "41": "void unlockAllNotificationChannels()",
    "42": "android.app.NotificationChannel getNotificationChannel(java.lang.String, int, java.lang.String, java.lang.String)",
    "43": "android.app.NotificationChannel getConversationNotificationChannel(java.lang.String, int, java.lang.String, java.lang.String, boolean, java.lang.String)",
    "44": "void createConversationNotificationChannelForPackage(java.lang.String, int, android.app.NotificationChannel, java.lang.String)",
    "45": "android.app.NotificationChannel getNotificationChannelForPackage(java.lang.String, int, java.lang.String, java.lang.String, boolean)",
    "46": "void deleteNotificationChannel(java.lang.String, java.lang.String)",
    "47": "android.content.pm.ParceledListSlice getNotificationChannels(java.lang.String, java.lang.String, int)",
    "48": "android.content.pm.ParceledListSlice getNotificationChannelsForPackage(java.lang.String, int, boolean)",
    "49": "int getNumNotificationChannelsForPackage(java.lang.String, int, boolean)",
    "50": "int getDeletedChannelCount(java.lang.String, int)",
    "51": "int getBlockedChannelCount(java.lang.String, int)",
    "52": "void deleteNotificationChannelGroup(java.lang.String, java.lang.String)",
    "53": "android.app.NotificationChannelGroup getNotificationChannelGroup(java.lang.String, java.lang.String)",
    "54": "android.content.pm.ParceledListSlice getNotificationChannelGroups(java.lang.String)",
    "55": "boolean onlyHasDefaultChannel(java.lang.String, int)",
    "56": "boolean areChannelsBypassingDnd()",
    "57": "android.content.pm.ParceledListSlice getNotificationChannelsBypassingDnd(java.lang.String, int)",
    "58": "boolean isPackagePaused(java.lang.String)",
    "59": "void deleteNotificationHistoryItem(java.lang.String, int, long)",
    "60": "boolean isPermissionFixed(java.lang.String, int)",
    "61": "void silenceNotificationSound()",
    "62": "[Landroid.service.notification.StatusBarNotification; getActiveNotifications(java.lang.String)",
    "63": "[Landroid.service.notification.StatusBarNotification; getActiveNotificationsWithAttribution(java.lang.String, java.lang.String)",
    "64": "[Landroid.service.notification.StatusBarNotification; getHistoricalNotifications(java.lang.String, int, boolean)",
    "65": "[Landroid.service.notification.StatusBarNotification; getHistoricalNotificationsWithAttribution(java.lang.String, java.lang.String, int, boolean)",
    "66": "android.app.NotificationHistory getNotificationHistory(java.lang.String, java.lang.String)",
    "67": "void registerListener(android.service.notification.INotificationListener, android.content.ComponentName, int)",
    "68": "void unregisterListener(android.service.notification.INotificationListener, int)",
    "69": "void cancelNotificationFromListener(android.service.notification.INotificationListener, java.lang.String, java.lang.String, int)",
    "70": "void cancelNotificationsFromListener(android.service.notification.INotificationListener, [Ljava.lang.String;)",
    "71": "void snoozeNotificationUntilContextFromListener(android.service.notification.INotificationListener, java.lang.String, java.lang.String)",
    "72": "void snoozeNotificationUntilFromListener(android.service.notification.INotificationListener, java.lang.String, long)",
    "73": "void requestBindListener(android.content.ComponentName)",
    "74": "void requestUnbindListener(android.service.notification.INotificationListener)",
    "75": "void requestUnbindListenerComponent(android.content.ComponentName)",
    "76": "void requestBindProvider(android.content.ComponentName)",
    "77": "void requestUnbindProvider(android.service.notification.IConditionProvider)",
    "78": "void setNotificationsShownFromListener(android.service.notification.INotificationListener, [Ljava.lang.String;)",
    "79": "android.content.pm.ParceledListSlice getActiveNotificationsFromListener(android.service.notification.INotificationListener, [Ljava.lang.String;, int)",
    "80": "android.content.pm.ParceledListSlice getSnoozedNotificationsFromListener(android.service.notification.INotificationListener, int)",
    "81": "void clearRequestedListenerHints(android.service.notification.INotificationListener)",
    "82": "void requestHintsFromListener(android.service.notification.INotificationListener, int)",
    "83": "int getHintsFromListener(android.service.notification.INotificationListener)",
    "84": "int getHintsFromListenerNoToken()",
    "85": "void requestInterruptionFilterFromListener(android.service.notification.INotificationListener, int)",
    "86": "int getInterruptionFilterFromListener(android.service.notification.INotificationListener)",
    "87": "void setOnNotificationPostedTrimFromListener(android.service.notification.INotificationListener, int)",
    "88": "void setInterruptionFilter(java.lang.String, int)",
    "89": "void updateNotificationChannelGroupFromPrivilegedListener(android.service.notification.INotificationListener, java.lang.String, android.os.UserHandle, android.app.NotificationChannelGroup)",
    "90": "void updateNotificationChannelFromPrivilegedListener(android.service.notification.INotificationListener, java.lang.String, android.os.UserHandle, android.app.NotificationChannel)",
    "91": "android.content.pm.ParceledListSlice getNotificationChannelsFromPrivilegedListener(android.service.notification.INotificationListener, java.lang.String, android.os.UserHandle)",
    "92": "android.content.pm.ParceledListSlice getNotificationChannelGroupsFromPrivilegedListener(android.service.notification.INotificationListener, java.lang.String, android.os.UserHandle)",
    "93": "void applyEnqueuedAdjustmentFromAssistant(android.service.notification.INotificationListener, android.service.notification.Adjustment)",
    "94": "void applyAdjustmentFromAssistant(android.service.notification.INotificationListener, android.service.notification.Adjustment)",
    "95": "void applyAdjustmentsFromAssistant(android.service.notification.INotificationListener, java.util.List)",
    "96": "void unsnoozeNotificationFromAssistant(android.service.notification.INotificationListener, java.lang.String)",
    "97": "void unsnoozeNotificationFromSystemListener(android.service.notification.INotificationListener, java.lang.String)",
    "98": "android.content.ComponentName getEffectsSuppressor()",
    "99": "boolean matchesCallFilter(android.os.Bundle)",
    "100": "void cleanUpCallersAfter(long)",
    "101": "boolean isSystemConditionProviderEnabled(java.lang.String)",
    "102": "boolean isNotificationListenerAccessGranted(android.content.ComponentName)",
    "103": "boolean isNotificationListenerAccessGrantedForUser(android.content.ComponentName, int)",
    "104": "boolean isNotificationAssistantAccessGranted(android.content.ComponentName)",
    "105": "void setNotificationListenerAccessGranted(android.content.ComponentName, boolean, boolean)",
    "106": "void setNotificationAssistantAccessGranted(android.content.ComponentName, boolean)",
    "107": "void setNotificationListenerAccessGrantedForUser(android.content.ComponentName, int, boolean, boolean)",
    "108": "void setNotificationAssistantAccessGrantedForUser(android.content.ComponentName, int, boolean)",
    "109": "java.util.List getEnabledNotificationListenerPackages()",
    "110": "java.util.List getEnabledNotificationListeners(int)",
    "111": "android.content.ComponentName getAllowedNotificationAssistantForUser(int)",
    "112": "android.content.ComponentName getAllowedNotificationAssistant()",
    "113": "android.content.ComponentName getDefaultNotificationAssistant()",
    "114": "void setNASMigrationDoneAndResetDefault(int, boolean)",
    "115": "boolean hasEnabledNotificationListener(java.lang.String, int)",
    "116": "int getZenMode()",
    "117": "android.service.notification.ZenModeConfig getZenModeConfig()",
    "118": "android.app.NotificationManager$Policy getConsolidatedNotificationPolicy()",
    "119": "void setZenMode(int, android.net.Uri, java.lang.String)",
    "120": "void notifyConditions(java.lang.String, android.service.notification.IConditionProvider, [Landroid.service.notification.Condition;)",
    "121": "boolean isNotificationPolicyAccessGranted(java.lang.String)",
    "122": "android.app.NotificationManager$Policy getNotificationPolicy(java.lang.String)",
    "123": "void setNotificationPolicy(java.lang.String, android.app.NotificationManager$Policy)",
    "124": "boolean isNotificationPolicyAccessGrantedForPackage(java.lang.String)",
    "125": "void setNotificationPolicyAccessGranted(java.lang.String, boolean)",
    "126": "void setNotificationPolicyAccessGrantedForUser(java.lang.String, int, boolean)",
    "127": "android.app.AutomaticZenRule getAutomaticZenRule(java.lang.String)",
    "128": "java.util.List getZenRules()",
    "129": "java.lang.String addAutomaticZenRule(android.app.AutomaticZenRule, java.lang.String)",
    "130": "boolean updateAutomaticZenRule(java.lang.String, android.app.AutomaticZenRule)",
    "131": "boolean removeAutomaticZenRule(java.lang.String)",
    "132": "boolean removeAutomaticZenRules(java.lang.String)",
    "133": "int getRuleInstanceCount(android.content.ComponentName)",
    "134": "void setAutomaticZenRuleState(java.lang.String, android.service.notification.Condition)",
    "135": "[B getBackupPayload(int)",
    "136": "void applyRestore([B, int)",
    "137": "android.content.pm.ParceledListSlice getAppActiveNotifications(java.lang.String, int)",
    "138": "void setNotificationDelegate(java.lang.String, java.lang.String)",
    "139": "java.lang.String getNotificationDelegate(java.lang.String)",
    "140": "boolean canNotifyAsPackage(java.lang.String, java.lang.String, int)",
    "141": "boolean canUseFullScreenIntent(android.content.AttributionSource)",
    "142": "void setPrivateNotificationsAllowed(boolean)",
    "143": "boolean getPrivateNotificationsAllowed()",
    "144": "long pullStats(long, int, boolean, java.util.List)",
    "145": "android.service.notification.NotificationListenerFilter getListenerFilter(android.content.ComponentName, int)",
    "146": "void setListenerFilter(android.content.ComponentName, int, android.service.notification.NotificationListenerFilter)",
    "147": "void migrateNotificationFilter(android.service.notification.INotificationListener, int, java.util.List)",
    "148": "void setToastRateLimitingEnabled(boolean)"
  },
  "android.app.sdksandbox.ISdkSandboxManager": {
    "1": "void addSdkSandboxProcessDeathCallback(java.lang.String, long, android.app.sdksandbox.ISdkSandboxProcessDeathCallback)",
    "2": "void removeSdkSandboxProcessDeathCallback(java.lang.String, long, android.app.sdksandbox.ISdkSandboxProcessDeathCallback)",
    "3": "void loadSdk(java.lang.String, android.os.IBinder, java.lang.String, long, android.os.Bundle, android.app.sdksandbox.ILoadSdkCallback)",
    "4": "void unloadSdk(java.lang.String, java.lang.String, long)",
    "5": "void requestSurfacePackage(java.lang.String, java.lang.String, android.os.IBinder, int, int, int, long, android.os.Bundle, android.app.sdksandbox.IRequestSurfacePackageCallback)",
    "6": "java.util.List getSandboxedSdks(java.lang.String, long)",
    "7": "void syncDataFromClient(java.lang.String, long, android.app.sdksandbox.SharedPreferencesUpdate, android.app.sdksandbox.ISharedPreferencesSyncCallback)",
    "8": "void stopSdkSandbox(java.lang.String)",
    "9": "void logLatencyFromSystemServerToApp(java.lang.String, int)",
    "10": "android.os.IBinder getAdServicesManager()"
  },
  "android.os.IIncidentManager": {
    "1": "void reportIncident(android.os.IncidentReportArgs)",
    "2": "void reportIncidentToStream(android.os.IncidentReportArgs, android.os.IIncidentReportStatusListener, java.io.FileDescriptor)",
    "3": "void reportIncidentToDumpstate(java.io.FileDescriptor, android.os.IIncidentReportStatusListener)",
    "4": "void registerSection(int, java.lang.String, android.os.IIncidentDumpCallback)",
    "5": "void unregisterSection(int)",
    "6": "void systemRunning()",
    "7": "java.util.List getIncidentReportList(java.lang.String, java.lang.String)",
    "8": "android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String, java.lang.String, java.lang.String)",
    "9": "void deleteIncidentReports(java.lang.String, java.lang.String, java.lang.String)",
    "10": "void deleteAllIncidentReports(java.lang.String)"
  },
  "android.media.projection.IMediaProjectionManager": {
    "1": "boolean hasProjectionPermission(int, java.lang.String)",
    "2": "android.media.projection.IMediaProjection createProjection(int, java.lang.String, int, boolean)",
    "3": "android.media.projection.IMediaProjection getProjection(int, java.lang.String)",
    "4": "boolean isCurrentProjection(android.media.projection.IMediaProjection)",
    "5": "void requestConsentForInvalidProjection(android.media.projection.IMediaProjection)",
    "6": "android.media.projection.MediaProjectionInfo getActiveProjectionInfo()",
    "7": "void stopActiveProjection()",
    "8": "void notifyActiveProjectionCapturedContentResized(int, int)",
    "9": "void notifyActiveProjectionCapturedContentVisibilityChanged(boolean)",
    "10": "void addCallback(android.media.projection.IMediaProjectionWatcherCallback)",
    "11": "void removeCallback(android.media.projection.IMediaProjectionWatcherCallback)",
    "12": "boolean setContentRecordingSession(android.view.ContentRecordingSession, android.media.projection.IMediaProjection)",
    "13": "void setUserReviewGrantedConsentResult(int, android.media.projection.IMediaProjection)"
  },
  "android.os.ISystemConfig": {
    "1": "java.util.List getDisabledUntilUsedPreinstalledCarrierApps()",
    "2": "java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedApps()",
    "3": "java.util.Map getDisabledUntilUsedPreinstalledCarrierAssociatedAppEntries()",
    "4": "[I getSystemPermissionUids(java.lang.String)",
    "5": "java.util.List getEnabledComponentOverrides(java.lang.String)",
    "6": "java.util.List getDefaultVrComponents()"
  },
  "android.companion.ICompanionDeviceManager": {
    "1": "void associate(android.companion.AssociationRequest, android.companion.IAssociationRequestCallback, java.lang.String, int)",
    "2": "java.util.List getAssociations(java.lang.String, int)",
    "3": "java.util.List getAllAssociationsForUser(int)",
    "4": "void legacyDisassociate(java.lang.String, java.lang.String, int)",
    "5": "void disassociate(int)",
    "6": "boolean hasNotificationAccess(android.content.ComponentName)",
    "7": "android.app.PendingIntent requestNotificationAccess(android.content.ComponentName, int)",
    "8": "boolean isDeviceAssociatedForWifiConnection(java.lang.String, java.lang.String, int)",
    "9": "void registerDevicePresenceListenerService(java.lang.String, java.lang.String, int)",
    "10": "void unregisterDevicePresenceListenerService(java.lang.String, java.lang.String, int)",
    "11": "boolean canPairWithoutPrompt(java.lang.String, java.lang.String, int)",
    "12": "void createAssociation(java.lang.String, java.lang.String, int, [B)",
    "13": "void addOnAssociationsChangedListener(android.companion.IOnAssociationsChangedListener, int)",
    "14": "void removeOnAssociationsChangedListener(android.companion.IOnAssociationsChangedListener, int)",
    "15": "void addOnTransportsChangedListener(android.companion.IOnTransportsChangedListener)",
    "16": "void removeOnTransportsChangedListener(android.companion.IOnTransportsChangedListener)",
    "17": "void sendMessage(int, [B, [I)",
    "18": "void addOnMessageReceivedListener(int, android.companion.IOnMessageReceivedListener)",
    "19": "void removeOnMessageReceivedListener(int, android.companion.IOnMessageReceivedListener)",
    "20": "void notifyDeviceAppeared(int)",
    "21": "void notifyDeviceDisappeared(int)",
    "22": "android.app.PendingIntent buildPermissionTransferUserConsentIntent(java.lang.String, int, int)",
    "23": "void startSystemDataTransfer(java.lang.String, int, int, android.companion.ISystemDataTransferCallback)",
    "24": "void attachSystemDataTransport(java.lang.String, int, int, android.os.ParcelFileDescriptor)",
    "25": "void detachSystemDataTransport(java.lang.String, int, int)",
    "26": "boolean isCompanionApplicationBound(java.lang.String, int)",
    "27": "android.app.PendingIntent buildAssociationCancellationIntent(java.lang.String, int)",
    "28": "void enableSystemDataSync(int, int)",
    "29": "void disableSystemDataSync(int, int)",
    "30": "void enableSecureTransport(boolean)"
  },
  "android.os.storage.IStorageManager": {
    "1": "void registerListener(android.os.storage.IStorageEventListener)",
    "2": "void unregisterListener(android.os.storage.IStorageEventListener)",
    "20": "void shutdown(android.os.storage.IStorageShutdownObserver)",
    "22": "void mountObb(java.lang.String, java.lang.String, android.os.storage.IObbActionListener, int, android.content.res.ObbInfo)",
    "23": "void unmountObb(java.lang.String, boolean, android.os.storage.IObbActionListener, int)",
    "24": "boolean isObbMounted(java.lang.String)",
    "25": "java.lang.String getMountedObbPath(java.lang.String)",
    "30": "[Landroid.os.storage.StorageVolume; getVolumeList(int, java.lang.String, int)",
    "35": "void mkdirs(java.lang.String, java.lang.String)",
    "42": "long lastMaintenance()",
    "43": "void runMaintenance()",
    "45": "[Landroid.os.storage.DiskInfo; getDisks()",
    "46": "[Landroid.os.storage.VolumeInfo; getVolumes(int)",
    "47": "[Landroid.os.storage.VolumeRecord; getVolumeRecords(int)",
    "48": "void mount(java.lang.String)",
    "49": "void unmount(java.lang.String)",
    "50": "void format(java.lang.String)",
    "51": "void partitionPublic(java.lang.String)",
    "52": "void partitionPrivate(java.lang.String)",
    "53": "void partitionMixed(java.lang.String, int)",
    "54": "void setVolumeNickname(java.lang.String, java.lang.String)",
    "55": "void setVolumeUserFlags(java.lang.String, int, int)",
    "56": "void forgetVolume(java.lang.String)",
    "57": "void forgetAllVolumes()",
    "58": "java.lang.String getPrimaryStorageUuid()",
    "59": "void setPrimaryStorageUuid(java.lang.String, android.content.pm.IPackageMoveObserver)",
    "60": "void benchmark(java.lang.String, android.os.IVoldTaskListener)",
    "61": "void setDebugFlags(int, int)"
  },
  "android.webkit.IWebViewUpdateService": {
    "1": "void notifyRelroCreationCompleted()",
    "2": "android.webkit.WebViewProviderResponse waitForAndGetProvider()",
    "3": "java.lang.String changeProviderAndSetting(java.lang.String)",
    "4": "[Landroid.webkit.WebViewProviderInfo; getValidWebViewPackages()",
    "5": "[Landroid.webkit.WebViewProviderInfo; getAllWebViewPackages()",
    "6": "java.lang.String getCurrentWebViewPackageName()",
    "7": "android.content.pm.PackageInfo getCurrentWebViewPackage()",
    "8": "boolean isMultiProcessEnabled()",
    "9": "void enableMultiProcess(boolean)"
  },
  "com.android.internal.view.IInputMethodManager": {
    "1": "void addClient(com.android.internal.inputmethod.IInputMethodClient, com.android.internal.inputmethod.IRemoteInputConnection, int)",
    "2": "android.view.inputmethod.InputMethodInfo getCurrentInputMethodInfoAsUser(int)",
    "3": "java.util.List getInputMethodList(int, int)",
    "4": "java.util.List getEnabledInputMethodList(int)",
    "5": "java.util.List getEnabledInputMethodSubtypeList(java.lang.String, boolean, int)",
    "6": "android.view.inputmethod.InputMethodSubtype getLastInputMethodSubtype(int)",
    "7": "boolean showSoftInput(com.android.internal.inputmethod.IInputMethodClient, android.os.IBinder, android.view.inputmethod.ImeTracker$Token, int, int, android.os.ResultReceiver, int)",
    "8": "boolean hideSoftInput(com.android.internal.inputmethod.IInputMethodClient, android.os.IBinder, android.view.inputmethod.ImeTracker$Token, int, android.os.ResultReceiver, int)",
    "9": "com.android.internal.inputmethod.InputBindResult startInputOrWindowGainedFocus(int, com.android.internal.inputmethod.IInputMethodClient, android.os.IBinder, int, int, int, android.view.inputmethod.EditorInfo, com.android.internal.inputmethod.IRemoteInputConnection, com.android.internal.inputmethod.IRemoteAccessibilityInputConnection, int, int, android.window.ImeOnBackInvokedDispatcher)",
    "10": "void showInputMethodPickerFromClient(com.android.internal.inputmethod.IInputMethodClient, int)",
    "11": "void showInputMethodPickerFromSystem(int, int)",
    "12": "boolean isInputMethodPickerShownForTest()",
    "13": "android.view.inputmethod.InputMethodSubtype getCurrentInputMethodSubtype(int)",
    "14": "void setAdditionalInputMethodSubtypes(java.lang.String, [Landroid.view.inputmethod.InputMethodSubtype;, int)",
    "15": "void setExplicitlyEnabledInputMethodSubtypes(java.lang.String, [I, int)",
    "16": "int getInputMethodWindowVisibleHeight(com.android.internal.inputmethod.IInputMethodClient)",
    "17": "void reportVirtualDisplayGeometryAsync(com.android.internal.inputmethod.IInputMethodClient, int, [F)",
    "18": "void reportPerceptibleAsync(android.os.IBinder, boolean)",
    "19": "void removeImeSurface()",
    "20": "void removeImeSurfaceFromWindowAsync(android.os.IBinder)",
    "21": "void startProtoDump([B, int, java.lang.String)",
    "22": "boolean isImeTraceEnabled()",
    "23": "void startImeTrace()",
    "24": "void stopImeTrace()",
    "25": "void startStylusHandwriting(com.android.internal.inputmethod.IInputMethodClient)",
    "26": "void prepareStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient, int, java.lang.String, java.lang.String)",
    "27": "boolean acceptStylusHandwritingDelegation(com.android.internal.inputmethod.IInputMethodClient, int, java.lang.String, java.lang.String)",
    "28": "boolean isStylusHandwritingAvailableAsUser(int)",
    "29": "void addVirtualStylusIdForTestSession(com.android.internal.inputmethod.IInputMethodClient)",
    "30": "void setStylusWindowIdleTimeoutForTest(com.android.internal.inputmethod.IInputMethodClient, long)",
    "31": "com.android.internal.inputmethod.IImeTracker getImeTrackerService()"
  },
  "android.app.ondevicepersonalization.IOnDevicePersonalizationSystemService": {
    "1": "void onRequest(android.os.Bundle, android.app.ondevicepersonalization.IOnDevicePersonalizationSystemServiceCallback)"
  },
  "android.tracing.ITracingServiceProxy": {
    "1": "void notifyTraceSessionEnded(boolean)",
    "2": "void reportTrace(android.tracing.TraceReportParams)"
  },
  "android.os.INetworkManagementService": {
    "1": "void registerObserver(android.net.INetworkManagementEventObserver)",
    "2": "void unregisterObserver(android.net.INetworkManagementEventObserver)",
    "3": "[Ljava.lang.String; listInterfaces()",
    "4": "android.net.InterfaceConfiguration getInterfaceConfig(java.lang.String)",
    "5": "void setInterfaceConfig(java.lang.String, android.net.InterfaceConfiguration)",
    "6": "void clearInterfaceAddresses(java.lang.String)",
    "7": "void setInterfaceDown(java.lang.String)",
    "8": "void setInterfaceUp(java.lang.String)",
    "9": "void setInterfaceIpv6PrivacyExtensions(java.lang.String, boolean)",
    "10": "void disableIpv6(java.lang.String)",
    "11": "void enableIpv6(java.lang.String)",
    "12": "void setIPv6AddrGenMode(java.lang.String, int)",
    "13": "void addRoute(int, android.net.RouteInfo)",
    "14": "void removeRoute(int, android.net.RouteInfo)",
    "15": "void shutdown()",
    "16": "boolean getIpForwardingEnabled()",
    "17": "void setIpForwardingEnabled(boolean)",
    "18": "void startTethering([Ljava.lang.String;)",
    "19": "void startTetheringWithConfiguration(boolean, [Ljava.lang.String;)",
    "20": "void stopTethering()",
    "21": "boolean isTetheringStarted()",
    "22": "void tetherInterface(java.lang.String)",
    "23": "void untetherInterface(java.lang.String)",
    "24": "[Ljava.lang.String; listTetheredInterfaces()",
    "25": "[Ljava.lang.String; getDnsForwarders()",
    "26": "void startInterfaceForwarding(java.lang.String, java.lang.String)",
    "27": "void stopInterfaceForwarding(java.lang.String, java.lang.String)",
    "28": "void enableNat(java.lang.String, java.lang.String)",
    "29": "void disableNat(java.lang.String, java.lang.String)",
    "30": "void registerTetheringStatsProvider(android.net.ITetheringStatsProvider, java.lang.String)",
    "31": "void unregisterTetheringStatsProvider(android.net.ITetheringStatsProvider)",
    "32": "void tetherLimitReached(android.net.ITetheringStatsProvider)",
    "33": "android.net.NetworkStats getNetworkStatsTethering(int)",
    "34": "void setInterfaceQuota(java.lang.String, long)",
    "35": "void removeInterfaceQuota(java.lang.String)",
    "36": "void setInterfaceAlert(java.lang.String, long)",
    "37": "void removeInterfaceAlert(java.lang.String)",
    "38": "void setGlobalAlert(long)",
    "39": "void setUidOnMeteredNetworkDenylist(int, boolean)",
    "40": "void setUidOnMeteredNetworkAllowlist(int, boolean)",
    "41": "boolean setDataSaverModeEnabled(boolean)",
    "42": "void setUidCleartextNetworkPolicy(int, int)",
    "43": "boolean isBandwidthControlEnabled()",
    "44": "void setFirewallEnabled(boolean)",
    "45": "boolean isFirewallEnabled()",
    "46": "void setFirewallInterfaceRule(java.lang.String, boolean)",
    "47": "void setFirewallUidRule(int, int, int)",
    "48": "void setFirewallUidRules(int, [I, [I)",
    "49": "void setFirewallChainEnabled(int, boolean)",
    "50": "void allowProtect(int)",
    "51": "void denyProtect(int)",
    "52": "void addInterfaceToLocalNetwork(java.lang.String, java.util.List)",
    "53": "void removeInterfaceFromLocalNetwork(java.lang.String)",
    "54": "int removeRoutesFromLocalNetwork(java.util.List)",
    "55": "boolean isNetworkRestricted(int)"
  },
  "android.debug.IAdbManager": {
    "1": "void allowDebugging(boolean, java.lang.String)",
    "2": "void denyDebugging()",
    "3": "void clearDebuggingKeys()",
    "4": "void allowWirelessDebugging(boolean, java.lang.String)",
    "5": "void denyWirelessDebugging()",
    "6": "[Landroid.debug.FingerprintAndPairDevice; getPairedDevices()",
    "7": "void unpairDevice(java.lang.String)",
    "8": "void enablePairingByPairingCode()",
    "9": "void enablePairingByQrCode(java.lang.String, java.lang.String)",
    "10": "int getAdbWirelessPort()",
    "11": "void disablePairing()",
    "12": "boolean isAdbWifiSupported()",
    "13": "boolean isAdbWifiQrSupported()",
    "14": "void registerCallback(android.debug.IAdbCallback)",
    "15": "void unregisterCallback(android.debug.IAdbCallback)"
  },
  "android.devicelock.IDeviceLockService": {
    "1": "void lockDevice(android.devicelock.ILockUnlockDeviceCallback)",
    "2": "void unlockDevice(android.devicelock.ILockUnlockDeviceCallback)",
    "3": "void isDeviceLocked(android.devicelock.IIsDeviceLockedCallback)",
    "4": "void getDeviceId(android.devicelock.IGetDeviceIdCallback)",
    "5": "void getKioskApps(android.devicelock.IGetKioskAppsCallback)",
    "6": "void addFinancedDeviceKioskRole(java.lang.String, android.os.RemoteCallback)",
    "7": "void removeFinancedDeviceKioskRole(java.lang.String, android.os.RemoteCallback)",
    "8": "void setExemptFromActivityBackgroundStartRestriction(boolean, android.os.RemoteCallback)",
    "9": "void setExemptFromHibernation(java.lang.String, boolean, android.os.RemoteCallback)"
  },
  "android.health.connect.aidl.IHealthConnectService": {
    "1": "void grantHealthPermission(java.lang.String, java.lang.String, android.os.UserHandle)",
    "2": "void revokeHealthPermission(java.lang.String, java.lang.String, java.lang.String, android.os.UserHandle)",
    "3": "void revokeAllHealthPermissions(java.lang.String, java.lang.String, android.os.UserHandle)",
    "4": "java.util.List getGrantedHealthPermissions(java.lang.String, android.os.UserHandle)",
    "5": "long getHistoricalAccessStartDateInMilliseconds(java.lang.String, android.os.UserHandle)",
    "6": "void insertRecords(android.content.AttributionSource, android.health.connect.aidl.RecordsParcel, android.health.connect.aidl.IInsertRecordsResponseCallback)",
    "7": "void aggregateRecords(android.content.AttributionSource, android.health.connect.aidl.AggregateDataRequestParcel, android.health.connect.aidl.IAggregateRecordsResponseCallback)",
    "8": "void readRecords(android.content.AttributionSource, android.health.connect.aidl.ReadRecordsRequestParcel, android.health.connect.aidl.IReadRecordsResponseCallback)",
    "9": "void updateRecords(android.content.AttributionSource, android.health.connect.aidl.RecordsParcel, android.health.connect.aidl.IEmptyResponseCallback)",
    "10": "void getChangeLogToken(android.content.AttributionSource, android.health.connect.changelog.ChangeLogTokenRequest, android.health.connect.aidl.IGetChangeLogTokenCallback)",
    "11": "void getChangeLogs(android.content.AttributionSource, android.health.connect.changelog.ChangeLogsRequest, android.health.connect.aidl.IChangeLogsResponseCallback)",
    "12": "void deleteUsingFilters(android.content.AttributionSource, android.health.connect.aidl.DeleteUsingFiltersRequestParcel, android.health.connect.aidl.IEmptyResponseCallback)",
    "13": "void deleteUsingFiltersForSelf(android.content.AttributionSource, android.health.connect.aidl.DeleteUsingFiltersRequestParcel, android.health.connect.aidl.IEmptyResponseCallback)",
    "14": "void getCurrentPriority(java.lang.String, int, android.health.connect.aidl.IGetPriorityResponseCallback)",
    "15": "void updatePriority(java.lang.String, android.health.connect.aidl.UpdatePriorityRequestParcel, android.health.connect.aidl.IEmptyResponseCallback)",
    "16": "void setRecordRetentionPeriodInDays(int, android.os.UserHandle, android.health.connect.aidl.IEmptyResponseCallback)",
    "17": "int getRecordRetentionPeriodInDays(android.os.UserHandle)",
    "18": "void getContributorApplicationsInfo(android.health.connect.aidl.IApplicationInfoResponseCallback)",
    "19": "void queryAllRecordTypesInfo(android.health.connect.aidl.IRecordTypeInfoResponseCallback)",
    "20": "void queryAccessLogs(java.lang.String, android.health.connect.aidl.IAccessLogsResponseCallback)",
    "21": "void getActivityDates(android.health.connect.aidl.ActivityDatesRequestParcel, android.health.connect.aidl.IActivityDatesResponseCallback)",
    "22": "void startMigration(java.lang.String, android.health.connect.aidl.IMigrationCallback)",
    "23": "void finishMigration(java.lang.String, android.health.connect.aidl.IMigrationCallback)",
    "24": "void writeMigrationData(java.lang.String, android.health.connect.migration.MigrationEntityParcel, android.health.connect.aidl.IMigrationCallback)",
    "25": "void insertMinDataMigrationSdkExtensionVersion(java.lang.String, int, android.health.connect.aidl.IMigrationCallback)",
    "26": "void stageAllHealthConnectRemoteData(android.health.connect.restore.StageRemoteDataRequest, android.os.UserHandle, android.health.connect.aidl.IDataStagingFinishedCallback)",
    "27": "void getAllDataForBackup(android.health.connect.restore.StageRemoteDataRequest, android.os.UserHandle)",
    "28": "android.health.connect.restore.BackupFileNamesSet getAllBackupFileNames(boolean)",
    "29": "void deleteAllStagedRemoteData(android.os.UserHandle)",
    "30": "void updateDataDownloadState(int)",
    "31": "void getHealthConnectDataState(android.health.connect.aidl.IGetHealthConnectDataStateCallback)",
    "32": "void getHealthConnectMigrationUiState(android.health.connect.aidl.IGetHealthConnectMigrationUiStateCallback)"
  },
  "android.apphibernation.IAppHibernationService": {
    "1": "boolean isHibernatingForUser(java.lang.String, int)",
    "2": "void setHibernatingForUser(java.lang.String, int, boolean)",
    "3": "boolean isHibernatingGlobally(java.lang.String)",
    "4": "void setHibernatingGlobally(java.lang.String, boolean)",
    "5": "java.util.List getHibernatingPackagesForUser(int)",
    "6": "java.util.Map getHibernationStatsForUser(java.util.List, int)",
    "7": "boolean isOatArtifactDeletionEnabled()"
  },
  "android.security.IFileIntegrityService": {
    "1": "boolean isApkVeritySupported()",
    "2": "boolean isAppSourceCertificateTrusted([B, java.lang.String)"
  },
  "android.view.IGraphicsStats": {
    "1": "android.os.ParcelFileDescriptor requestBufferForProcess(java.lang.String, android.view.IGraphicsStatsCallback)"
  },
  "com.android.internal.app.procstats.IProcessStats": {
    "1": "[B getCurrentStats(java.util.List)",
    "2": "android.os.ParcelFileDescriptor getStatsOverTime(long)",
    "3": "int getCurrentMemoryState()",
    "4": "long getCommittedStats(long, int, boolean, java.util.List)",
    "5": "long getCommittedStatsMerged(long, int, boolean, java.util.List, com.android.internal.app.procstats.ProcessStats)",
    "6": "long getMinAssociationDumpDuration()"
  },
  "android.companion.virtual.IVirtualDeviceManager": {
    "1": "android.companion.virtual.IVirtualDevice createVirtualDevice(android.os.IBinder, java.lang.String, int, android.companion.virtual.VirtualDeviceParams, android.companion.virtual.IVirtualDeviceActivityListener, android.companion.virtual.IVirtualDeviceSoundEffectListener)",
    "2": "java.util.List getVirtualDevices()",
    "3": "int getDeviceIdForDisplayId(int)",
    "4": "boolean isValidVirtualDeviceId(int)",
    "5": "int getDevicePolicy(int, int)",
    "6": "int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig, android.hardware.display.IVirtualDisplayCallback, android.companion.virtual.IVirtualDevice, java.lang.String)",
    "7": "int getAudioPlaybackSessionId(int)",
    "8": "int getAudioRecordingSessionId(int)",
    "9": "void playSoundEffect(int, int)"
  },
  "android.os.IStatsManagerService": {
    "1": "void setDataFetchOperation(long, android.app.PendingIntent, java.lang.String)",
    "2": "void removeDataFetchOperation(long, java.lang.String)",
    "3": "[J setActiveConfigsChangedOperation(android.app.PendingIntent, java.lang.String)",
    "4": "void removeActiveConfigsChangedOperation(java.lang.String)",
    "5": "void setBroadcastSubscriber(long, long, android.app.PendingIntent, java.lang.String)",
    "6": "void unsetBroadcastSubscriber(long, long, java.lang.String)",
    "7": "[J getRegisteredExperimentIds()",
    "8": "[B getMetadata(java.lang.String)",
    "9": "[B getData(long, java.lang.String)",
    "10": "void addConfiguration(long, [B, java.lang.String)",
    "11": "void removeConfiguration(long, java.lang.String)",
    "12": "void registerPullAtomCallback(int, long, long, [I, android.os.IPullAtomCallback)",
    "13": "void unregisterPullAtomCallback(int)",
    "14": "void querySql(java.lang.String, int, [B, android.os.IStatsQueryCallback, long, java.lang.String)",
    "15": "[J setRestrictedMetricsChangedOperation(android.app.PendingIntent, long, java.lang.String)",
    "16": "void removeRestrictedMetricsChangedOperation(long, java.lang.String)"
  },
  "android.service.dreams.IDreamManager": {
    "1": "void dream()",
    "2": "void awaken()",
    "3": "void setDreamComponents([Landroid.content.ComponentName;)",
    "4": "[Landroid.content.ComponentName; getDreamComponents()",
    "5": "android.content.ComponentName getDefaultDreamComponentForUser(int)",
    "6": "void testDream(int, android.content.ComponentName)",
    "7": "boolean isDreaming()",
    "8": "boolean isDreamingOrInPreview()",
    "9": "void finishSelf(android.os.IBinder, boolean)",
    "10": "void startDozing(android.os.IBinder, int, int)",
    "11": "void stopDozing(android.os.IBinder)",
    "12": "void forceAmbientDisplayEnabled(boolean)",
    "13": "[Landroid.content.ComponentName; getDreamComponentsForUser(int)",
    "14": "void setDreamComponentsForUser(int, [Landroid.content.ComponentName;)",
    "15": "void setSystemDreamComponent(android.content.ComponentName)",
    "16": "void registerDreamOverlayService(android.content.ComponentName)"
  },
  "android.os.IBatteryPropertiesRegistrar": {
    "1": "int getProperty(int, android.os.BatteryProperty)",
    "2": "void scheduleUpdate()"
  },
  "android.hardware.display.IDisplayManager": {
    "1": "android.view.DisplayInfo getDisplayInfo(int)",
    "2": "[I getDisplayIds(boolean)",
    "3": "boolean isUidPresentOnDisplay(int, int)",
    "4": "void registerCallback(android.hardware.display.IDisplayManagerCallback)",
    "5": "void registerCallbackWithEventMask(android.hardware.display.IDisplayManagerCallback, long)",
    "6": "void startWifiDisplayScan()",
    "7": "void stopWifiDisplayScan()",
    "8": "void connectWifiDisplay(java.lang.String)",
    "9": "void disconnectWifiDisplay()",
    "10": "void renameWifiDisplay(java.lang.String, java.lang.String)",
    "11": "void forgetWifiDisplay(java.lang.String)",
    "12": "void pauseWifiDisplay()",
    "13": "void resumeWifiDisplay()",
    "14": "android.hardware.display.WifiDisplayStatus getWifiDisplayStatus()",
    "15": "void setUserDisabledHdrTypes([I)",
    "16": "void setAreUserDisabledHdrTypesAllowed(boolean)",
    "17": "boolean areUserDisabledHdrTypesAllowed()",
    "18": "[I getUserDisabledHdrTypes()",
    "19": "void overrideHdrTypes(int, [I)",
    "20": "void requestColorMode(int, int)",
    "21": "int createVirtualDisplay(android.hardware.display.VirtualDisplayConfig, android.hardware.display.IVirtualDisplayCallback, android.media.projection.IMediaProjection, java.lang.String)",
    "22": "void resizeVirtualDisplay(android.hardware.display.IVirtualDisplayCallback, int, int, int)",
    "23": "void setVirtualDisplaySurface(android.hardware.display.IVirtualDisplayCallback, android.view.Surface)",
    "24": "void releaseVirtualDisplay(android.hardware.display.IVirtualDisplayCallback)",
    "25": "void setVirtualDisplayState(android.hardware.display.IVirtualDisplayCallback, boolean)",
    "26": "android.graphics.Point getStableDisplaySize()",
    "27": "android.content.pm.ParceledListSlice getBrightnessEvents(java.lang.String)",
    "28": "android.content.pm.ParceledListSlice getAmbientBrightnessStats()",
    "29": "void setBrightnessConfigurationForUser(android.hardware.display.BrightnessConfiguration, int, java.lang.String)",
    "30": "void setBrightnessConfigurationForDisplay(android.hardware.display.BrightnessConfiguration, java.lang.String, int, java.lang.String)",
    "31": "android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForDisplay(java.lang.String, int)",
    "32": "android.hardware.display.BrightnessConfiguration getBrightnessConfigurationForUser(int)",
    "33": "android.hardware.display.BrightnessConfiguration getDefaultBrightnessConfiguration()",
    "34": "boolean isMinimalPostProcessingRequested(int)",
    "35": "void setTemporaryBrightness(int, float)",
    "36": "void setBrightness(int, float)",
    "37": "float getBrightness(int)",
    "38": "void setTemporaryAutoBrightnessAdjustment(float)",
    "39": "android.hardware.display.Curve getMinimumBrightnessCurve()",
    "40": "android.hardware.display.BrightnessInfo getBrightnessInfo(int)",
    "41": "int getPreferredWideGamutColorSpaceId()",
    "42": "void setUserPreferredDisplayMode(int, android.view.Display$Mode)",
    "43": "android.view.Display$Mode getUserPreferredDisplayMode(int)",
    "44": "android.view.Display$Mode getSystemPreferredDisplayMode(int)",
    "45": "void setHdrConversionMode(android.hardware.display.HdrConversionMode)",
    "46": "android.hardware.display.HdrConversionMode getHdrConversionModeSetting()",
    "47": "android.hardware.display.HdrConversionMode getHdrConversionMode()",
    "48": "[I getSupportedHdrOutputTypes()",
    "49": "void setShouldAlwaysRespectAppRequestedMode(boolean)",
    "50": "boolean shouldAlwaysRespectAppRequestedMode()",
    "51": "void setRefreshRateSwitchingType(int)",
    "52": "int getRefreshRateSwitchingType()",
    "53": "android.hardware.graphics.common.DisplayDecorationSupport getDisplayDecorationSupport(int)",
    "54": "void setDisplayIdToMirror(android.os.IBinder, int)",
    "55": "android.hardware.OverlayProperties getOverlaySupport()"
  },
  "android.view.IWindowManager": {
    "1": "boolean startViewServer(int)",
    "2": "boolean stopViewServer()",
    "3": "boolean isViewServerRunning()",
    "4": "android.view.IWindowSession openSession(android.view.IWindowSessionCallback)",
    "5": "boolean useBLAST()",
    "6": "void getInitialDisplaySize(int, android.graphics.Point)",
    "7": "void getBaseDisplaySize(int, android.graphics.Point)",
    "8": "void setForcedDisplaySize(int, int, int)",
    "9": "void clearForcedDisplaySize(int)",
    "10": "int getInitialDisplayDensity(int)",
    "11": "int getBaseDisplayDensity(int)",
    "12": "int getDisplayIdByUniqueId(java.lang.String)",
    "13": "void setForcedDisplayDensityForUser(int, int, int)",
    "14": "void clearForcedDisplayDensityForUser(int, int)",
    "15": "void setForcedDisplayScalingMode(int, int)",
    "16": "void setEventDispatching(boolean)",
    "17": "boolean isWindowToken(android.os.IBinder)",
    "18": "void addWindowToken(android.os.IBinder, int, int, android.os.Bundle)",
    "19": "void removeWindowToken(android.os.IBinder, int)",
    "20": "void setDisplayChangeWindowController(android.view.IDisplayChangeWindowController)",
    "21": "android.view.SurfaceControl addShellRoot(int, android.view.IWindow, int)",
    "22": "void setShellRootAccessibilityWindow(int, int, android.view.IWindow)",
    "23": "void overridePendingAppTransitionMultiThumbFuture(android.view.IAppTransitionAnimationSpecsFuture, android.os.IRemoteCallback, boolean, int)",
    "24": "void overridePendingAppTransitionRemote(android.view.RemoteAnimationAdapter, int)",
    "25": "void endProlongedAnimations()",
    "26": "void startFreezingScreen(int, int)",
    "27": "void stopFreezingScreen()",
    "28": "void disableKeyguard(android.os.IBinder, java.lang.String, int)",
    "29": "void reenableKeyguard(android.os.IBinder, int)",
    "30": "void exitKeyguardSecurely(android.view.IOnKeyguardExitResult)",
    "31": "boolean isKeyguardLocked()",
    "32": "boolean isKeyguardSecure(int)",
    "33": "void dismissKeyguard(com.android.internal.policy.IKeyguardDismissCallback, java.lang.CharSequence)",
    "34": "void addKeyguardLockedStateListener(com.android.internal.policy.IKeyguardLockedStateListener)",
    "35": "void removeKeyguardLockedStateListener(com.android.internal.policy.IKeyguardLockedStateListener)",
    "36": "void setSwitchingUser(boolean)",
    "37": "void closeSystemDialogs(java.lang.String)",
    "38": "float getAnimationScale(int)",
    "39": "[F getAnimationScales()",
    "40": "void setAnimationScale(int, float)",
    "41": "void setAnimationScales([F)",
    "42": "float getCurrentAnimatorScale()",
    "43": "void setInTouchMode(boolean, int)",
    "44": "void setInTouchModeOnAllDisplays(boolean)",
    "45": "boolean isInTouchMode(int)",
    "46": "void showStrictModeViolation(boolean)",
    "47": "void setStrictModeVisualIndicatorPreference(java.lang.String)",
    "48": "void refreshScreenCaptureDisabled()",
    "49": "int getDefaultDisplayRotation()",
    "50": "int watchRotation(android.view.IRotationWatcher, int)",
    "51": "void removeRotationWatcher(android.view.IRotationWatcher)",
    "52": "int registerProposedRotationListener(android.os.IBinder, android.view.IRotationWatcher)",
    "53": "int getPreferredOptionsPanelGravity(int)",
    "54": "void freezeRotation(int)",
    "55": "void thawRotation()",
    "56": "boolean isRotationFrozen()",
    "57": "void freezeDisplayRotation(int, int)",
    "58": "void thawDisplayRotation(int)",
    "59": "boolean isDisplayRotationFrozen(int)",
    "60": "void setFixedToUserRotation(int, int)",
    "61": "void setIgnoreOrientationRequest(int, boolean)",
    "62": "android.graphics.Bitmap screenshotWallpaper()",
    "63": "android.view.SurfaceControl mirrorWallpaperSurface(int)",
    "64": "boolean registerWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener, int)",
    "65": "void unregisterWallpaperVisibilityListener(android.view.IWallpaperVisibilityListener, int)",
    "66": "void registerSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener, int)",
    "67": "void unregisterSystemGestureExclusionListener(android.view.ISystemGestureExclusionListener, int)",
    "68": "boolean requestAssistScreenshot(android.app.IAssistDataReceiver)",
    "69": "void hideTransientBars(int)",
    "70": "void setRecentsVisibility(boolean)",
    "71": "void updateStaticPrivacyIndicatorBounds(int, [Landroid.graphics.Rect;)",
    "72": "void setNavBarVirtualKeyHapticFeedbackEnabled(boolean)",
    "73": "boolean hasNavigationBar(int)",
    "74": "void lockNow(android.os.Bundle)",
    "75": "boolean isSafeModeEnabled()",
    "76": "boolean clearWindowContentFrameStats(android.os.IBinder)",
    "77": "android.view.WindowContentFrameStats getWindowContentFrameStats(android.os.IBinder)",
    "78": "int getDockedStackSide()",
    "79": "void registerPinnedTaskListener(int, android.view.IPinnedTaskListener)",
    "80": "void requestAppKeyboardShortcuts(com.android.internal.os.IResultReceiver, int)",
    "81": "void getStableInsets(int, android.graphics.Rect)",
    "82": "void registerShortcutKey(long, com.android.internal.policy.IShortcutService)",
    "83": "void createInputConsumer(android.os.IBinder, java.lang.String, int, android.view.InputChannel)",
    "84": "boolean destroyInputConsumer(java.lang.String, int)",
    "85": "android.graphics.Region getCurrentImeTouchRegion()",
    "86": "void registerDisplayFoldListener(android.view.IDisplayFoldListener)",
    "87": "void unregisterDisplayFoldListener(android.view.IDisplayFoldListener)",
    "88": "[I registerDisplayWindowListener(android.view.IDisplayWindowListener)",
    "89": "void unregisterDisplayWindowListener(android.view.IDisplayWindowListener)",
    "90": "void startWindowTrace()",
    "91": "void stopWindowTrace()",
    "92": "void saveWindowTraceToFile()",
    "93": "boolean isWindowTraceEnabled()",
    "94": "void startTransitionTrace()",
    "95": "void stopTransitionTrace()",
    "96": "boolean isTransitionTraceEnabled()",
    "97": "int getWindowingMode(int)",
    "98": "void setWindowingMode(int, int)",
    "99": "int getRemoveContentMode(int)",
    "100": "void setRemoveContentMode(int, int)",
    "101": "boolean shouldShowWithInsecureKeyguard(int)",
    "102": "void setShouldShowWithInsecureKeyguard(int, boolean)",
    "103": "boolean shouldShowSystemDecors(int)",
    "104": "void setShouldShowSystemDecors(int, boolean)",
    "105": "int getDisplayImePolicy(int)",
    "106": "void setDisplayImePolicy(int, int)",
    "107": "void syncInputTransactions(boolean)",
    "108": "boolean isLayerTracing()",
    "109": "void setLayerTracing(boolean)",
    "110": "boolean mirrorDisplay(int, android.view.SurfaceControl)",
    "111": "void setDisplayWindowInsetsController(int, android.view.IDisplayWindowInsetsController)",
    "112": "void updateDisplayWindowRequestedVisibleTypes(int, int)",
    "113": "boolean getWindowInsets(int, android.os.IBinder, android.view.InsetsState)",
    "114": "java.util.List getPossibleDisplayInfo(int)",
    "115": "void showGlobalActions()",
    "116": "void setLayerTracingFlags(int)",
    "117": "void setActiveTransactionTracing(boolean)",
    "118": "void requestScrollCapture(int, android.os.IBinder, int, android.view.IScrollCaptureResponseListener)",
    "119": "void holdLock(android.os.IBinder, int)",
    "120": "[Ljava.lang.String; getSupportedDisplayHashAlgorithms()",
    "121": "android.view.displayhash.VerifiedDisplayHash verifyDisplayHash(android.view.displayhash.DisplayHash)",
    "122": "void setDisplayHashThrottlingEnabled(boolean)",
    "123": "android.content.res.Configuration attachWindowContextToDisplayArea(android.os.IBinder, int, int, android.os.Bundle)",
    "124": "void attachWindowContextToWindowToken(android.os.IBinder, android.os.IBinder)",
    "125": "android.content.res.Configuration attachToDisplayContent(android.os.IBinder, int)",
    "126": "void detachWindowContextFromWindowContainer(android.os.IBinder)",
    "127": "boolean registerCrossWindowBlurEnabledListener(android.view.ICrossWindowBlurEnabledListener)",
    "128": "void unregisterCrossWindowBlurEnabledListener(android.view.ICrossWindowBlurEnabledListener)",
    "129": "boolean isTaskSnapshotSupported()",
    "130": "int getImeDisplayId()",
    "131": "void setTaskSnapshotEnabled(boolean)",
    "132": "void setTaskTransitionSpec(android.view.TaskTransitionSpec)",
    "133": "void clearTaskTransitionSpec()",
    "134": "void registerTaskFpsCallback(int, android.window.ITaskFpsCallback)",
    "135": "void unregisterTaskFpsCallback(android.window.ITaskFpsCallback)",
    "136": "android.graphics.Bitmap snapshotTaskForRecents(int)",
    "137": "void setRecentsAppBehindSystemBars(boolean)",
    "138": "int getLetterboxBackgroundColorInArgb()",
    "139": "boolean isLetterboxBackgroundMultiColored()",
    "140": "void captureDisplay(int, android.window.ScreenCapture$CaptureArgs, android.window.ScreenCapture$ScreenCaptureListener)",
    "141": "boolean isGlobalKey(int)",
    "142": "boolean addToSurfaceSyncGroup(android.os.IBinder, boolean, android.window.ISurfaceSyncGroupCompletedListener, android.window.AddToSurfaceSyncGroupResult)",
    "143": "void markSurfaceSyncGroupReady(android.os.IBinder)",
    "144": "java.util.List notifyScreenshotListeners(int)"
  },
  "android.safetycenter.ISafetyCenterManager": {
    "1": "boolean isSafetyCenterEnabled()",
    "2": "void setSafetySourceData(java.lang.String, android.safetycenter.SafetySourceData, android.safetycenter.SafetyEvent, java.lang.String, int)",
    "3": "android.safetycenter.SafetySourceData getSafetySourceData(java.lang.String, java.lang.String, int)",
    "4": "void reportSafetySourceError(java.lang.String, android.safetycenter.SafetySourceErrorDetails, java.lang.String, int)",
    "5": "void refreshSafetySources(int, int)",
    "6": "void refreshSpecificSafetySources(int, int, java.util.List)",
    "7": "android.safetycenter.config.SafetyCenterConfig getSafetyCenterConfig()",
    "8": "android.safetycenter.SafetyCenterData getSafetyCenterData(java.lang.String, int)",
    "9": "void addOnSafetyCenterDataChangedListener(android.safetycenter.IOnSafetyCenterDataChangedListener, java.lang.String, int)",
    "10": "void removeOnSafetyCenterDataChangedListener(android.safetycenter.IOnSafetyCenterDataChangedListener, int)",
    "11": "void dismissSafetyCenterIssue(java.lang.String, int)",
    "12": "void executeSafetyCenterIssueAction(java.lang.String, java.lang.String, int)",
    "13": "void clearAllSafetySourceDataForTests()",
    "14": "void setSafetyCenterConfigForTests(android.safetycenter.config.SafetyCenterConfig)",
    "15": "void clearSafetyCenterConfigForTests()"
  },
  "android.os.incremental.IIncrementalService": {
    "1": "int openStorage(java.lang.String)",
    "2": "int createStorage(java.lang.String, android.content.pm.DataLoaderParamsParcel, int)",
    "3": "int createLinkedStorage(java.lang.String, int, int)",
    "4": "boolean startLoading(int, android.content.pm.DataLoaderParamsParcel, android.content.pm.IDataLoaderStatusListener, android.os.incremental.StorageHealthCheckParams, android.os.incremental.IStorageHealthListener, [Landroid.os.incremental.PerUidReadTimeouts;)",
    "5": "void onInstallationComplete(int)",
    "6": "int makeBindMount(int, java.lang.String, java.lang.String, int)",
    "7": "int deleteBindMount(int, java.lang.String)",
    "8": "int makeDirectory(int, java.lang.String)",
    "9": "int makeDirectories(int, java.lang.String)",
    "10": "int makeFile(int, java.lang.String, int, android.os.incremental.IncrementalNewFileParams, [B)",
    "11": "int makeFileFromRange(int, java.lang.String, java.lang.String, long, long)",
    "12": "int makeLink(int, java.lang.String, int, java.lang.String)",
    "13": "int unlink(int, java.lang.String)",
    "14": "int isFileFullyLoaded(int, java.lang.String)",
    "15": "int isFullyLoaded(int)",
    "16": "float getLoadingProgress(int)",
    "17": "[B getMetadataByPath(int, java.lang.String)",
    "18": "[B getMetadataById(int, [B)",
    "19": "void deleteStorage(int)",
    "20": "void disallowReadLogs(int)",
    "21": "boolean configureNativeBinaries(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
    "22": "boolean waitForNativeBinariesExtraction(int)",
    "23": "boolean registerLoadingProgressListener(int, android.os.incremental.IStorageLoadingProgressListener)",
    "24": "boolean unregisterLoadingProgressListener(int)",
    "25": "android.os.PersistableBundle getMetrics(int)"
  },
  "android.os.IHintManager": {
    "1": "android.os.IHintSession createHintSession(android.os.IBinder, [I, long)",
    "2": "long getHintSessionPreferredRate()",
    "3": "void setHintSessionThreads(android.os.IHintSession, [I)",
    "4": "[I getHintSessionThreadIds(android.os.IHintSession)"
  },
  "android.view.translation.ITranslationManager": {
    "1": "void onTranslationCapabilitiesRequest(int, int, android.os.ResultReceiver, int)",
    "2": "void registerTranslationCapabilityCallback(android.os.IRemoteCallback, int)",
    "3": "void unregisterTranslationCapabilityCallback(android.os.IRemoteCallback, int)",
    "4": "void onSessionCreated(android.view.translation.TranslationContext, int, com.android.internal.os.IResultReceiver, int)",
    "5": "void updateUiTranslationState(int, android.view.translation.TranslationSpec, android.view.translation.TranslationSpec, java.util.List, android.os.IBinder, int, android.view.translation.UiTranslationSpec, int)",
    "6": "void registerUiTranslationStateCallback(android.os.IRemoteCallback, int)",
    "7": "void unregisterUiTranslationStateCallback(android.os.IRemoteCallback, int)",
    "8": "void getServiceSettingsActivity(com.android.internal.os.IResultReceiver, int)",
    "9": "void onTranslationFinished(boolean, android.os.IBinder, android.content.ComponentName, int)"
  },
  "com.android.internal.telephony.IMms": {
    "1": "void sendMessage(int, java.lang.String, android.net.Uri, java.lang.String, android.os.Bundle, android.app.PendingIntent, long, java.lang.String)",
    "2": "void downloadMessage(int, java.lang.String, java.lang.String, android.net.Uri, android.os.Bundle, android.app.PendingIntent, long, java.lang.String)",
    "3": "android.net.Uri importTextMessage(java.lang.String, java.lang.String, int, java.lang.String, long, boolean, boolean)",
    "4": "android.net.Uri importMultimediaMessage(java.lang.String, android.net.Uri, java.lang.String, long, boolean, boolean)",
    "5": "boolean deleteStoredMessage(java.lang.String, android.net.Uri)",
    "6": "boolean deleteStoredConversation(java.lang.String, long)",
    "7": "boolean updateStoredMessageStatus(java.lang.String, android.net.Uri, android.content.ContentValues)",
    "8": "boolean archiveStoredConversation(java.lang.String, long, boolean)",
    "9": "android.net.Uri addTextMessageDraft(java.lang.String, java.lang.String, java.lang.String)",
    "10": "android.net.Uri addMultimediaMessageDraft(java.lang.String, android.net.Uri)",
    "11": "void sendStoredMessage(int, java.lang.String, android.net.Uri, android.os.Bundle, android.app.PendingIntent)",
    "12": "void setAutoPersisting(java.lang.String, boolean)",
    "13": "boolean getAutoPersisting()"
  },
  "android.app.backup.IBackupManager": {
    "1": "void dataChangedForUser(int, java.lang.String)",
    "2": "void dataChanged(java.lang.String)",
    "3": "void clearBackupDataForUser(int, java.lang.String, java.lang.String)",
    "4": "void clearBackupData(java.lang.String, java.lang.String)",
    "5": "void initializeTransportsForUser(int, [Ljava.lang.String;, android.app.backup.IBackupObserver)",
    "6": "void agentConnectedForUser(int, java.lang.String, android.os.IBinder)",
    "7": "void agentConnected(java.lang.String, android.os.IBinder)",
    "8": "void agentDisconnectedForUser(int, java.lang.String)",
    "9": "void agentDisconnected(java.lang.String)",
    "10": "void restoreAtInstallForUser(int, java.lang.String, int)",
    "11": "void restoreAtInstall(java.lang.String, int)",
    "12": "void setBackupEnabledForUser(int, boolean)",
    "13": "void setFrameworkSchedulingEnabledForUser(int, boolean)",
    "14": "void setBackupEnabled(boolean)",
    "15": "void setAutoRestoreForUser(int, boolean)",
    "16": "void setAutoRestore(boolean)",
    "17": "boolean isBackupEnabledForUser(int)",
    "18": "boolean isBackupEnabled()",
    "19": "boolean setBackupPassword(java.lang.String, java.lang.String)",
    "20": "boolean hasBackupPassword()",
    "21": "void backupNowForUser(int)",
    "22": "void backupNow()",
    "23": "void adbBackup(int, android.os.ParcelFileDescriptor, boolean, boolean, boolean, boolean, boolean, boolean, boolean, boolean, [Ljava.lang.String;)",
    "24": "void fullTransportBackupForUser(int, [Ljava.lang.String;)",
    "25": "void adbRestore(int, android.os.ParcelFileDescriptor)",
    "26": "void acknowledgeFullBackupOrRestoreForUser(int, int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver)",
    "27": "void acknowledgeFullBackupOrRestore(int, boolean, java.lang.String, java.lang.String, android.app.backup.IFullBackupRestoreObserver)",
    "28": "void updateTransportAttributesForUser(int, android.content.ComponentName, java.lang.String, android.content.Intent, java.lang.String, android.content.Intent, java.lang.CharSequence)",
    "29": "java.lang.String getCurrentTransportForUser(int)",
    "30": "java.lang.String getCurrentTransport()",
    "31": "android.content.ComponentName getCurrentTransportComponentForUser(int)",
    "32": "[Ljava.lang.String; listAllTransportsForUser(int)",
    "33": "[Ljava.lang.String; listAllTransports()",
    "34": "[Landroid.content.ComponentName; listAllTransportComponentsForUser(int)",
    "35": "[Ljava.lang.String; getTransportWhitelist()",
    "36": "java.lang.String selectBackupTransportForUser(int, java.lang.String)",
    "37": "java.lang.String selectBackupTransport(java.lang.String)",
    "38": "void selectBackupTransportAsyncForUser(int, android.content.ComponentName, android.app.backup.ISelectBackupTransportCallback)",
    "39": "android.content.Intent getConfigurationIntentForUser(int, java.lang.String)",
    "40": "android.content.Intent getConfigurationIntent(java.lang.String)",
    "41": "java.lang.String getDestinationStringForUser(int, java.lang.String)",
    "42": "java.lang.String getDestinationString(java.lang.String)",
    "43": "android.content.Intent getDataManagementIntentForUser(int, java.lang.String)",
    "44": "android.content.Intent getDataManagementIntent(java.lang.String)",
    "45": "java.lang.CharSequence getDataManagementLabelForUser(int, java.lang.String)",
    "46": "android.app.backup.IRestoreSession beginRestoreSessionForUser(int, java.lang.String, java.lang.String)",
    "47": "void opCompleteForUser(int, int, long)",
    "48": "void opComplete(int, long)",
    "49": "void setBackupServiceActive(int, boolean)",
    "50": "boolean isBackupServiceActive(int)",
    "51": "boolean isUserReadyForBackup(int)",
    "52": "long getAvailableRestoreTokenForUser(int, java.lang.String)",
    "53": "boolean isAppEligibleForBackupForUser(int, java.lang.String)",
    "54": "[Ljava.lang.String; filterAppsEligibleForBackupForUser(int, [Ljava.lang.String;)",
    "55": "int requestBackupForUser(int, [Ljava.lang.String;, android.app.backup.IBackupObserver, android.app.backup.IBackupManagerMonitor, int)",
    "56": "int requestBackup([Ljava.lang.String;, android.app.backup.IBackupObserver, android.app.backup.IBackupManagerMonitor, int)",
    "57": "void cancelBackupsForUser(int)",
    "58": "void cancelBackups()",
    "59": "android.os.UserHandle getUserForAncestralSerialNumber(long)",
    "60": "void setAncestralSerialNumber(long)",
    "61": "void excludeKeysFromRestore(java.lang.String, java.util.List)",
    "62": "void reportDelayedRestoreResult(java.lang.String, java.util.List)"
  },
  "android.os.IDeviceIdleController": {
    "1": "void addPowerSaveWhitelistApp(java.lang.String)",
    "2": "int addPowerSaveWhitelistApps(java.util.List)",
    "3": "void removePowerSaveWhitelistApp(java.lang.String)",
    "4": "void removeSystemPowerWhitelistApp(java.lang.String)",
    "5": "void restoreSystemPowerWhitelistApp(java.lang.String)",
    "6": "[Ljava.lang.String; getRemovedSystemPowerWhitelistApps()",
    "7": "[Ljava.lang.String; getSystemPowerWhitelistExceptIdle()",
    "8": "[Ljava.lang.String; getSystemPowerWhitelist()",
    "9": "[Ljava.lang.String; getUserPowerWhitelist()",
    "10": "[Ljava.lang.String; getFullPowerWhitelistExceptIdle()",
    "11": "[Ljava.lang.String; getFullPowerWhitelist()",
    "12": "[I getAppIdWhitelistExceptIdle()",
    "13": "[I getAppIdWhitelist()",
    "14": "[I getAppIdUserWhitelist()",
    "15": "[I getAppIdTempWhitelist()",
    "16": "boolean isPowerSaveWhitelistExceptIdleApp(java.lang.String)",
    "17": "boolean isPowerSaveWhitelistApp(java.lang.String)",
    "18": "void addPowerSaveTempWhitelistApp(java.lang.String, long, int, int, java.lang.String)",
    "19": "long addPowerSaveTempWhitelistAppForMms(java.lang.String, int, int, java.lang.String)",
    "20": "long addPowerSaveTempWhitelistAppForSms(java.lang.String, int, int, java.lang.String)",
    "21": "long whitelistAppTemporarily(java.lang.String, int, int, java.lang.String)",
    "22": "void exitIdle(java.lang.String)",
    "23": "int setPreIdleTimeoutMode(int)",
    "24": "void resetPreIdleTimeoutMode()"
  },
  "com.android.internal.graphics.fonts.IFontManager": {
    "1": "android.text.FontConfig getFontConfig()",
    "2": "int updateFontFamily(java.util.List, int)"
  },
  "android.os.image.IDynamicSystemService": {
    "1": "boolean startInstallation(java.lang.String)",
    "2": "int createPartition(java.lang.String, long, boolean)",
    "3": "boolean closePartition()",
    "4": "boolean finishInstallation()",
    "5": "android.gsi.GsiProgress getInstallationProgress()",
    "6": "boolean abort()",
    "7": "boolean isInUse()",
    "8": "boolean isInstalled()",
    "9": "boolean isEnabled()",
    "10": "boolean remove()",
    "11": "boolean setEnable(boolean, boolean)",
    "12": "boolean setAshmem(android.os.ParcelFileDescriptor, long)",
    "13": "boolean submitFromAshmem(long)",
    "14": "boolean getAvbPublicKey(android.gsi.AvbPublicKey)",
    "15": "long suggestScratchSize()"
  },
  "android.os.logcat.ILogcatManagerService": {
    "1": "void startThread(int, int, int, int)",
    "2": "void finishThread(int, int, int, int)"
  },
  "android.app.appsearch.aidl.IAppSearchManager": {
    "1": "void initialize(android.content.AttributionSource, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "2": "void setSchema(android.content.AttributionSource, java.lang.String, java.util.List, java.util.List, boolean, int, android.os.UserHandle, long, int, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "3": "void getSchema(android.content.AttributionSource, java.lang.String, java.lang.String, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "4": "void getNamespaces(android.content.AttributionSource, java.lang.String, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "5": "void putDocuments(android.content.AttributionSource, java.lang.String, android.app.appsearch.aidl.DocumentsParcel, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchBatchResultCallback)",
    "6": "void getDocuments(android.content.AttributionSource, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.util.Map, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchBatchResultCallback)",
    "7": "void query(android.content.AttributionSource, java.lang.String, java.lang.String, android.os.Bundle, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "8": "void globalQuery(android.content.AttributionSource, java.lang.String, android.os.Bundle, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "9": "void getNextPage(android.content.AttributionSource, java.lang.String, long, int, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "10": "void invalidateNextPageToken(android.content.AttributionSource, long, android.os.UserHandle, long)",
    "11": "void writeQueryResultsToFile(android.content.AttributionSource, java.lang.String, android.os.ParcelFileDescriptor, java.lang.String, android.os.Bundle, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "12": "void putDocumentsFromFile(android.content.AttributionSource, java.lang.String, android.os.ParcelFileDescriptor, android.os.UserHandle, android.os.Bundle, long, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "13": "void searchSuggestion(android.content.AttributionSource, java.lang.String, java.lang.String, android.os.Bundle, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "14": "void reportUsage(android.content.AttributionSource, java.lang.String, java.lang.String, java.lang.String, java.lang.String, long, boolean, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "15": "void removeByDocumentId(android.content.AttributionSource, java.lang.String, java.lang.String, java.util.List, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchBatchResultCallback)",
    "16": "void removeByQuery(android.content.AttributionSource, java.lang.String, java.lang.String, android.os.Bundle, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "17": "void getStorageInfo(android.content.AttributionSource, java.lang.String, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchResultCallback)",
    "18": "void persistToDisk(android.content.AttributionSource, android.os.UserHandle, long)",
    "19": "android.app.appsearch.aidl.AppSearchResultParcel registerObserverCallback(android.content.AttributionSource, java.lang.String, android.os.Bundle, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchObserverProxy)",
    "20": "android.app.appsearch.aidl.AppSearchResultParcel unregisterObserverCallback(android.content.AttributionSource, java.lang.String, android.os.UserHandle, long, android.app.appsearch.aidl.IAppSearchObserverProxy)"
  },
  "com.android.internal.telephony.ICarrierConfigLoader": {
    "1": "android.os.PersistableBundle getConfigForSubId(int, java.lang.String)",
    "2": "android.os.PersistableBundle getConfigForSubIdWithFeature(int, java.lang.String, java.lang.String)",
    "3": "void overrideConfig(int, android.os.PersistableBundle, boolean)",
    "4": "void notifyConfigChangedForSubId(int)",
    "5": "void updateConfigForPhoneId(int, java.lang.String)",
    "6": "java.lang.String getDefaultCarrierServicePackageName()",
    "7": "android.os.PersistableBundle getConfigSubsetForSubIdWithFeature(int, java.lang.String, java.lang.String, [Ljava.lang.String;)"
  },
  "android.hardware.ISensorPrivacyManager": {
    "1": "boolean supportsSensorToggle(int, int)",
    "2": "void addSensorPrivacyListener(android.hardware.ISensorPrivacyListener)",
    "3": "void addToggleSensorPrivacyListener(android.hardware.ISensorPrivacyListener)",
    "4": "void removeSensorPrivacyListener(android.hardware.ISensorPrivacyListener)",
    "5": "void removeToggleSensorPrivacyListener(android.hardware.ISensorPrivacyListener)",
    "6": "boolean isSensorPrivacyEnabled()",
    "7": "boolean isCombinedToggleSensorPrivacyEnabled(int)",
    "8": "boolean isToggleSensorPrivacyEnabled(int, int)",
    "9": "void setSensorPrivacy(boolean)",
    "10": "void setToggleSensorPrivacy(int, int, int, boolean)",
    "11": "void setToggleSensorPrivacyForProfileGroup(int, int, int, boolean)",
    "12": "void suppressToggleSensorPrivacyReminders(int, int, android.os.IBinder, boolean)",
    "13": "boolean requiresAuthentication()",
    "14": "void showSensorUseDialog(int)"
  },
  "android.speech.tts.ITextToSpeechManager": {
    "1": "void createSession(java.lang.String, android.speech.tts.ITextToSpeechSessionCallback)"
  },
  "android.hardware.display.IColorDisplayManager": {
    "1": "boolean isDeviceColorManaged()",
    "2": "boolean setSaturationLevel(int)",
    "3": "boolean setAppSaturationLevel(java.lang.String, int)",
    "4": "boolean isSaturationActivated()",
    "5": "int getTransformCapabilities()",
    "6": "boolean isNightDisplayActivated()",
    "7": "boolean setNightDisplayActivated(boolean)",
    "8": "int getNightDisplayColorTemperature()",
    "9": "boolean setNightDisplayColorTemperature(int)",
    "10": "int getNightDisplayAutoMode()",
    "11": "int getNightDisplayAutoModeRaw()",
    "12": "boolean setNightDisplayAutoMode(int)",
    "13": "android.hardware.display.Time getNightDisplayCustomStartTime()",
    "14": "boolean setNightDisplayCustomStartTime(android.hardware.display.Time)",
    "15": "android.hardware.display.Time getNightDisplayCustomEndTime()",
    "16": "boolean setNightDisplayCustomEndTime(android.hardware.display.Time)",
    "17": "int getColorMode()",
    "18": "void setColorMode(int)",
    "19": "boolean isDisplayWhiteBalanceEnabled()",
    "20": "boolean setDisplayWhiteBalanceEnabled(boolean)",
    "21": "boolean isReduceBrightColorsActivated()",
    "22": "boolean setReduceBrightColorsActivated(boolean)",
    "23": "int getReduceBrightColorsStrength()",
    "24": "boolean setReduceBrightColorsStrength(int)",
    "25": "float getReduceBrightColorsOffsetFactor()"
  },
  "android.speech.IRecognitionServiceManager": {
    "1": "void createSession(android.content.ComponentName, android.os.IBinder, boolean, android.speech.IRecognitionServiceManagerCallback)",
    "2": "void setTemporaryComponent(android.content.ComponentName)"
  },
  "android.os.IStatsBootstrapAtomService": {
    "1": "void reportBootstrapAtom(android.os.StatsBootstrapAtom)"
  },
  "android.content.om.IOverlayManager": {
    "1": "java.util.Map getAllOverlays(int)",
    "2": "java.util.List getOverlayInfosForTarget(java.lang.String, int)",
    "3": "android.content.om.OverlayInfo getOverlayInfo(java.lang.String, int)",
    "4": "android.content.om.OverlayInfo getOverlayInfoByIdentifier(android.content.om.OverlayIdentifier, int)",
    "5": "boolean setEnabled(java.lang.String, boolean, int)",
    "6": "boolean setEnabledExclusive(java.lang.String, boolean, int)",
    "7": "boolean setEnabledExclusiveInCategory(java.lang.String, int)",
    "8": "boolean setPriority(java.lang.String, java.lang.String, int)",
    "9": "boolean setHighestPriority(java.lang.String, int)",
    "10": "boolean setLowestPriority(java.lang.String, int)",
    "11": "[Ljava.lang.String; getDefaultOverlayPackages()",
    "12": "void invalidateCachesForOverlay(java.lang.String, int)",
    "13": "void commit(android.content.om.OverlayManagerTransaction)"
  },
  "com.android.internal.os.IDropBoxManagerService": {
    "1": "void addData(java.lang.String, [B, int)",
    "2": "void addFile(java.lang.String, android.os.ParcelFileDescriptor, int)",
    "3": "boolean isTagEnabled(java.lang.String)",
    "4": "android.os.DropBoxManager$Entry getNextEntry(java.lang.String, long, java.lang.String)",
    "5": "android.os.DropBoxManager$Entry getNextEntryWithAttribution(java.lang.String, long, java.lang.String, java.lang.String)"
  },
  "android.net.IConnectivityManager": {
    "1": "android.net.Network getActiveNetwork()",
    "2": "android.net.Network getActiveNetworkForUid(int, boolean)",
    "3": "android.net.NetworkInfo getActiveNetworkInfo()",
    "4": "android.net.NetworkInfo getActiveNetworkInfoForUid(int, boolean)",
    "5": "android.net.NetworkInfo getNetworkInfo(int)",
    "6": "android.net.NetworkInfo getNetworkInfoForUid(android.net.Network, int, boolean)",
    "7": "[Landroid.net.NetworkInfo; getAllNetworkInfo()",
    "8": "android.net.Network getNetworkForType(int)",
    "9": "[Landroid.net.Network; getAllNetworks()",
    "10": "[Landroid.net.NetworkCapabilities; getDefaultNetworkCapabilitiesForUser(int, java.lang.String, java.lang.String)",
    "11": "boolean isNetworkSupported(int)",
    "12": "android.net.LinkProperties getActiveLinkProperties()",
    "13": "android.net.LinkProperties getLinkPropertiesForType(int)",
    "14": "android.net.LinkProperties getLinkProperties(android.net.Network)",
    "15": "android.net.LinkProperties getRedactedLinkPropertiesForPackage(android.net.LinkProperties, int, java.lang.String, java.lang.String)",
    "16": "android.net.NetworkCapabilities getNetworkCapabilities(android.net.Network, java.lang.String, java.lang.String)",
    "17": "android.net.NetworkCapabilities getRedactedNetworkCapabilitiesForPackage(android.net.NetworkCapabilities, int, java.lang.String, java.lang.String)",
    "18": "[Landroid.net.NetworkState; getAllNetworkState()",
    "19": "java.util.List getAllNetworkStateSnapshots()",
    "20": "boolean isActiveNetworkMetered()",
    "21": "boolean requestRouteToHostAddress(int, [B, java.lang.String, java.lang.String)",
    "22": "int getLastTetherError(java.lang.String)",
    "23": "[Ljava.lang.String; getTetherableIfaces()",
    "24": "[Ljava.lang.String; getTetheredIfaces()",
    "25": "[Ljava.lang.String; getTetheringErroredIfaces()",
    "26": "[Ljava.lang.String; getTetherableUsbRegexs()",
    "27": "[Ljava.lang.String; getTetherableWifiRegexs()",
    "28": "void reportInetCondition(int, int)",
    "29": "void reportNetworkConnectivity(android.net.Network, boolean)",
    "30": "android.net.ProxyInfo getGlobalProxy()",
    "31": "void setGlobalProxy(android.net.ProxyInfo)",
    "32": "android.net.ProxyInfo getProxyForNetwork(android.net.Network)",
    "33": "void setRequireVpnForUids(boolean, [Landroid.net.UidRange;)",
    "34": "void setLegacyLockdownVpnEnabled(boolean)",
    "35": "void setProvisioningNotificationVisible(boolean, int, java.lang.String)",
    "36": "void setAirplaneMode(boolean)",
    "37": "boolean requestBandwidthUpdate(android.net.Network)",
    "38": "int registerNetworkProvider(android.os.Messenger, java.lang.String)",
    "39": "void unregisterNetworkProvider(android.os.Messenger)",
    "40": "void declareNetworkRequestUnfulfillable(android.net.NetworkRequest)",
    "41": "android.net.Network registerNetworkAgent(android.net.INetworkAgent, android.net.NetworkInfo, android.net.LinkProperties, android.net.NetworkCapabilities, android.net.NetworkScore, android.net.NetworkAgentConfig, int)",
    "42": "android.net.NetworkRequest requestNetwork(int, android.net.NetworkCapabilities, int, android.os.Messenger, int, android.os.IBinder, int, int, java.lang.String, java.lang.String)",
    "43": "android.net.NetworkRequest pendingRequestForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent, java.lang.String, java.lang.String)",
    "44": "void releasePendingNetworkRequest(android.app.PendingIntent)",
    "45": "android.net.NetworkRequest listenForNetwork(android.net.NetworkCapabilities, android.os.Messenger, android.os.IBinder, int, java.lang.String, java.lang.String)",
    "46": "void pendingListenForNetwork(android.net.NetworkCapabilities, android.app.PendingIntent, java.lang.String, java.lang.String)",
    "47": "void releaseNetworkRequest(android.net.NetworkRequest)",
    "48": "void setAcceptUnvalidated(android.net.Network, boolean, boolean)",
    "49": "void setAcceptPartialConnectivity(android.net.Network, boolean, boolean)",
    "50": "void setAvoidUnvalidated(android.net.Network)",
    "51": "void startCaptivePortalApp(android.net.Network)",
    "52": "void startCaptivePortalAppInternal(android.net.Network, android.os.Bundle)",
    "53": "boolean shouldAvoidBadWifi()",
    "54": "int getMultipathPreference(android.net.Network)",
    "55": "android.net.NetworkRequest getDefaultRequest()",
    "56": "int getRestoreDefaultNetworkDelay(int)",
    "57": "void factoryReset()",
    "58": "void startNattKeepalive(android.net.Network, int, android.net.connectivity.android.net.ISocketKeepaliveCallback, java.lang.String, int, java.lang.String)",
    "59": "void startNattKeepaliveWithFd(android.net.Network, android.os.ParcelFileDescriptor, int, int, android.net.connectivity.android.net.ISocketKeepaliveCallback, java.lang.String, java.lang.String, boolean, android.net.Network)",
    "60": "void startTcpKeepalive(android.net.Network, android.os.ParcelFileDescriptor, int, android.net.connectivity.android.net.ISocketKeepaliveCallback)",
    "61": "void stopKeepalive(android.net.connectivity.android.net.ISocketKeepaliveCallback)",
    "62": "[I getSupportedKeepalives()",
    "63": "java.lang.String getCaptivePortalServerUrl()",
    "64": "[B getNetworkWatchlistConfigHash()",
    "65": "int getConnectionOwnerUid(android.net.connectivity.android.net.ConnectionInfo)",
    "66": "void registerConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback, android.net.NetworkRequest, java.lang.String)",
    "67": "void unregisterConnectivityDiagnosticsCallback(android.net.IConnectivityDiagnosticsCallback)",
    "68": "android.os.IBinder startOrGetTestNetworkService()",
    "69": "void simulateDataStall(int, long, android.net.Network, android.os.PersistableBundle)",
    "70": "void systemReady()",
    "71": "void registerNetworkActivityListener(android.net.connectivity.android.net.INetworkActivityListener)",
    "72": "void unregisterNetworkActivityListener(android.net.connectivity.android.net.INetworkActivityListener)",
    "73": "boolean isDefaultNetworkActive()",
    "74": "void registerQosSocketCallback(android.net.QosSocketInfo, android.net.connectivity.android.net.IQosCallback)",
    "75": "void unregisterQosCallback(android.net.connectivity.android.net.IQosCallback)",
    "76": "void setOemNetworkPreference(android.net.OemNetworkPreferences, android.net.connectivity.android.net.IOnCompleteListener)",
    "77": "void setProfileNetworkPreferences(android.os.UserHandle, java.util.List, android.net.connectivity.android.net.IOnCompleteListener)",
    "78": "int getRestrictBackgroundStatusByCaller()",
    "79": "void offerNetwork(int, android.net.NetworkScore, android.net.NetworkCapabilities, android.net.connectivity.android.net.INetworkOfferCallback)",
    "80": "void unofferNetwork(android.net.connectivity.android.net.INetworkOfferCallback)",
    "81": "void setTestAllowBadWifiUntil(long)",
    "82": "void updateMeteredNetworkAllowList(int, boolean)",
    "83": "void updateMeteredNetworkDenyList(int, boolean)",
    "84": "void setUidFirewallRule(int, int, int)",
    "85": "int getUidFirewallRule(int, int)",
    "86": "void setFirewallChainEnabled(int, boolean)",
    "87": "boolean getFirewallChainEnabled(int)",
    "88": "void replaceFirewallChain(int, [I)",
    "89": "android.os.IBinder getCompanionDeviceManagerProxyService()",
    "90": "void setVpnNetworkPreference(java.lang.String, [Landroid.net.UidRange;)",
    "91": "void setTestLowTcpPollingTimerForKeepalive(long)"
  },
  "android.permission.IPermissionChecker": {
    "1": "1",
    "2": "2",
    "3": "3"
  },
  "android.hardware.biometrics.IBiometricService": {
    "1": "android.hardware.biometrics.ITestSession createTestSession(int, android.hardware.biometrics.ITestSessionCallback, java.lang.String)",
    "2": "java.util.List getSensorProperties(java.lang.String)",
    "3": "long authenticate(android.os.IBinder, long, int, android.hardware.biometrics.IBiometricServiceReceiver, java.lang.String, android.hardware.biometrics.PromptInfo)",
    "4": "void cancelAuthentication(android.os.IBinder, java.lang.String, long)",
    "5": "int canAuthenticate(java.lang.String, int, int, int)",
    "6": "boolean hasEnrolledBiometrics(int, java.lang.String)",
    "7": "void registerAuthenticator(int, int, int, android.hardware.biometrics.IBiometricAuthenticator)",
    "8": "void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)",
    "9": "void onReadyForAuthentication(long, int)",
    "10": "void invalidateAuthenticatorIds(int, int, android.hardware.biometrics.IInvalidationCallback)",
    "11": "[J getAuthenticatorIds(int)",
    "12": "void resetLockoutTimeBound(android.os.IBinder, java.lang.String, int, int, [B)",
    "13": "void resetLockout(int, [B)",
    "14": "int getCurrentStrength(int)",
    "15": "int getCurrentModality(java.lang.String, int, int, int)",
    "16": "int getSupportedModalities(int)"
  },
  "android.net.wifi.IWifiScanner": {
    "1": "android.os.Bundle getAvailableChannels(int, java.lang.String, java.lang.String, android.os.Bundle)",
    "2": "boolean isScanning()",
    "3": "boolean setScanningEnabled(boolean, int, java.lang.String)",
    "4": "void registerScanListener(android.net.wifi.IWifiScannerListener, java.lang.String, java.lang.String)",
    "5": "void unregisterScanListener(android.net.wifi.IWifiScannerListener, java.lang.String, java.lang.String)",
    "6": "void startBackgroundScan(android.net.wifi.IWifiScannerListener, android.net.wifi.WifiScanner$ScanSettings, android.os.WorkSource, java.lang.String, java.lang.String)",
    "7": "void stopBackgroundScan(android.net.wifi.IWifiScannerListener, java.lang.String, java.lang.String)",
    "8": "boolean getScanResults(java.lang.String, java.lang.String)",
    "9": "void startScan(android.net.wifi.IWifiScannerListener, android.net.wifi.WifiScanner$ScanSettings, android.os.WorkSource, java.lang.String, java.lang.String)",
    "10": "void stopScan(android.net.wifi.IWifiScannerListener, java.lang.String, java.lang.String)",
    "11": "java.util.List getSingleScanResults(java.lang.String, java.lang.String)",
    "12": "void startPnoScan(android.net.wifi.IWifiScannerListener, android.net.wifi.WifiScanner$ScanSettings, android.net.wifi.WifiScanner$PnoSettings, java.lang.String, java.lang.String)",
    "13": "void stopPnoScan(android.net.wifi.IWifiScannerListener, java.lang.String, java.lang.String)",
    "14": "void enableVerboseLogging(boolean)"
  },
  "android.view.autofill.IAutoFillManager": {
    "1": "void addClient(android.view.autofill.IAutoFillManagerClient, android.content.ComponentName, int, com.android.internal.os.IResultReceiver)",
    "2": "void removeClient(android.view.autofill.IAutoFillManagerClient, int)",
    "3": "void startSession(android.os.IBinder, android.os.IBinder, android.view.autofill.AutofillId, android.graphics.Rect, android.view.autofill.AutofillValue, int, boolean, int, android.content.ComponentName, boolean, com.android.internal.os.IResultReceiver)",
    "4": "void getFillEventHistory(com.android.internal.os.IResultReceiver)",
    "5": "void restoreSession(int, android.os.IBinder, android.os.IBinder, com.android.internal.os.IResultReceiver)",
    "6": "void updateSession(int, android.view.autofill.AutofillId, android.graphics.Rect, android.view.autofill.AutofillValue, int, int, int)",
    "7": "void setAutofillFailure(int, java.util.List, int)",
    "8": "void finishSession(int, int, int)",
    "9": "void cancelSession(int, int)",
    "10": "void setAuthenticationResult(android.os.Bundle, int, int, int)",
    "11": "void setHasCallback(int, int, boolean)",
    "12": "void disableOwnedAutofillServices(int)",
    "13": "void isServiceSupported(int, com.android.internal.os.IResultReceiver)",
    "14": "void isServiceEnabled(int, java.lang.String, com.android.internal.os.IResultReceiver)",
    "15": "void onPendingSaveUi(int, android.os.IBinder)",
    "16": "void getUserData(com.android.internal.os.IResultReceiver)",
    "17": "void getUserDataId(com.android.internal.os.IResultReceiver)",
    "18": "void setUserData(android.service.autofill.UserData)",
    "19": "void isFieldClassificationEnabled(com.android.internal.os.IResultReceiver)",
    "20": "void getAutofillServiceComponentName(com.android.internal.os.IResultReceiver)",
    "21": "void getAvailableFieldClassificationAlgorithms(com.android.internal.os.IResultReceiver)",
    "22": "void getDefaultFieldClassificationAlgorithm(com.android.internal.os.IResultReceiver)",
    "23": "void setAugmentedAutofillWhitelist(java.util.List, java.util.List, com.android.internal.os.IResultReceiver)"
  },
  "android.net.INetworkStatsService": {
    "1": "android.net.INetworkStatsSession openSession()",
    "2": "android.net.INetworkStatsSession openSessionForUsageStats(int, java.lang.String)",
    "3": "android.net.NetworkStats getDataLayerSnapshotForUid(int)",
    "4": "android.net.NetworkStats getUidStatsForTransport(int)",
    "5": "[Ljava.lang.String; getMobileIfaces()",
    "6": "void incrementOperationCount(int, int, int)",
    "7": "void notifyNetworkStatus([Landroid.net.Network;, [Landroid.net.NetworkStateSnapshot;, java.lang.String, [Landroid.net.UnderlyingNetworkInfo;)",
    "8": "void forceUpdate()",
    "9": "android.net.DataUsageRequest registerUsageCallback(java.lang.String, android.net.DataUsageRequest, android.net.connectivity.android.net.netstats.IUsageCallback)",
    "10": "void unregisterUsageRequest(android.net.DataUsageRequest)",
    "11": "long getUidStats(int, int)",
    "12": "long getIfaceStats(java.lang.String, int)",
    "13": "long getTotalStats(int)",
    "14": "android.net.netstats.provider.INetworkStatsProviderCallback registerNetworkStatsProvider(java.lang.String, android.net.netstats.provider.INetworkStatsProvider)",
    "15": "void noteUidForeground(int, boolean)",
    "16": "void advisePersistThreshold(long)",
    "17": "void setStatsProviderWarningAndLimitAsync(java.lang.String, long, long)"
  },
  "android.view.selectiontoolbar.ISelectionToolbarManager": {
    "1": "void showToolbar(android.view.selectiontoolbar.ShowInfo, android.view.selectiontoolbar.ISelectionToolbarCallback, int)",
    "2": "void hideToolbar(long, int)",
    "3": "void dismissToolbar(long, int)"
  },
  "android.app.job.IJobScheduler": {
    "1": "int schedule(java.lang.String, android.app.job.JobInfo)",
    "2": "int enqueue(java.lang.String, android.app.job.JobInfo, android.app.job.JobWorkItem)",
    "3": "int scheduleAsPackage(java.lang.String, android.app.job.JobInfo, java.lang.String, int, java.lang.String)",
    "4": "void cancel(java.lang.String, int)",
    "5": "void cancelAll()",
    "6": "void cancelAllInNamespace(java.lang.String)",
    "7": "java.util.Map getAllPendingJobs()",
    "8": "android.content.pm.ParceledListSlice getAllPendingJobsInNamespace(java.lang.String)",
    "9": "android.app.job.JobInfo getPendingJob(java.lang.String, int)",
    "10": "int getPendingJobReason(java.lang.String, int)",
    "11": "boolean canRunUserInitiatedJobs(java.lang.String)",
    "12": "boolean hasRunUserInitiatedJobsPermission(java.lang.String, int)",
    "13": "java.util.List getStartedJobs()",
    "14": "android.content.pm.ParceledListSlice getAllJobSnapshots()",
    "15": "void registerUserVisibleJobObserver(android.app.job.IUserVisibleJobObserver)",
    "16": "void unregisterUserVisibleJobObserver(android.app.job.IUserVisibleJobObserver)",
    "17": "void notePendingUserRequestedAppStop(java.lang.String, int, java.lang.String)"
  },
  "android.media.IMediaResourceMonitor": {
    "1": "void notifyResourceGranted(int, int)"
  },
  "android.hardware.input.IInputManager": {
    "1": "java.lang.String getVelocityTrackerStrategy()",
    "2": "android.view.InputDevice getInputDevice(int)",
    "3": "[I getInputDeviceIds()",
    "4": "boolean isInputDeviceEnabled(int)",
    "5": "void enableInputDevice(int)",
    "6": "void disableInputDevice(int)",
    "7": "boolean hasKeys(int, int, [I, [Z)",
    "8": "int getKeyCodeForKeyLocation(int, int)",
    "9": "void tryPointerSpeed(int)",
    "10": "boolean injectInputEvent(android.view.InputEvent, int)",
    "11": "boolean injectInputEventToTarget(android.view.InputEvent, int, int)",
    "12": "android.view.VerifiedInputEvent verifyInputEvent(android.view.InputEvent)",
    "13": "android.hardware.input.TouchCalibration getTouchCalibrationForInputDevice(java.lang.String, int)",
    "14": "void setTouchCalibrationForInputDevice(java.lang.String, int, android.hardware.input.TouchCalibration)",
    "15": "[Landroid.hardware.input.KeyboardLayout; getKeyboardLayouts()",
    "16": "[Landroid.hardware.input.KeyboardLayout; getKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)",
    "17": "android.hardware.input.KeyboardLayout getKeyboardLayout(java.lang.String)",
    "18": "java.lang.String getCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier)",
    "19": "void setCurrentKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)",
    "20": "[Ljava.lang.String; getEnabledKeyboardLayoutsForInputDevice(android.hardware.input.InputDeviceIdentifier)",
    "21": "void addKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)",
    "22": "void removeKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, java.lang.String)",
    "23": "java.lang.String getKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, int, android.view.inputmethod.InputMethodInfo, android.view.inputmethod.InputMethodSubtype)",
    "24": "void setKeyboardLayoutForInputDevice(android.hardware.input.InputDeviceIdentifier, int, android.view.inputmethod.InputMethodInfo, android.view.inputmethod.InputMethodSubtype, java.lang.String)",
    "25": "[Landroid.hardware.input.KeyboardLayout; getKeyboardLayoutListForInputDevice(android.hardware.input.InputDeviceIdentifier, int, android.view.inputmethod.InputMethodInfo, android.view.inputmethod.InputMethodSubtype)",
    "26": "void remapModifierKey(int, int)",
    "27": "void clearAllModifierKeyRemappings()",
    "28": "java.util.Map getModifierKeyRemapping()",
    "29": "void registerInputDevicesChangedListener(android.hardware.input.IInputDevicesChangedListener)",
    "30": "int isInTabletMode()",
    "31": "void registerTabletModeChangedListener(android.hardware.input.ITabletModeChangedListener)",
    "32": "int isMicMuted()",
    "33": "void vibrate(int, android.os.VibrationEffect, android.os.IBinder)",
    "34": "void vibrateCombined(int, android.os.CombinedVibration, android.os.IBinder)",
    "35": "void cancelVibrate(int, android.os.IBinder)",
    "36": "[I getVibratorIds(int)",
    "37": "boolean isVibrating(int)",
    "38": "boolean registerVibratorStateListener(int, android.os.IVibratorStateListener)",
    "39": "boolean unregisterVibratorStateListener(int, android.os.IVibratorStateListener)",
    "40": "android.hardware.input.IInputDeviceBatteryState getBatteryState(int)",
    "41": "void setPointerIconType(int)",
    "42": "void setCustomPointerIcon(android.view.PointerIcon)",
    "43": "void requestPointerCapture(android.os.IBinder, boolean)",
    "44": "android.view.InputMonitor monitorGestureInput(android.os.IBinder, java.lang.String, int)",
    "45": "void addPortAssociation(java.lang.String, int)",
    "46": "void removePortAssociation(java.lang.String)",
    "47": "void addUniqueIdAssociation(java.lang.String, java.lang.String)",
    "48": "void removeUniqueIdAssociation(java.lang.String)",
    "49": "[Landroid.hardware.input.InputSensorInfo; getSensorList(int)",
    "50": "boolean registerSensorListener(android.hardware.input.IInputSensorEventListener)",
    "51": "void unregisterSensorListener(android.hardware.input.IInputSensorEventListener)",
    "52": "boolean enableSensor(int, int, int, int)",
    "53": "void disableSensor(int, int)",
    "54": "boolean flushSensor(int, int)",
    "55": "java.util.List getLights(int)",
    "56": "android.hardware.lights.LightState getLightState(int, int)",
    "57": "void setLightStates(int, [I, [Landroid.hardware.lights.LightState;, android.os.IBinder)",
    "58": "void openLightSession(int, java.lang.String, android.os.IBinder)",
    "59": "void closeLightSession(int, android.os.IBinder)",
    "60": "void cancelCurrentTouch()",
    "61": "void registerBatteryListener(int, android.hardware.input.IInputDeviceBatteryListener)",
    "62": "void unregisterBatteryListener(int, android.hardware.input.IInputDeviceBatteryListener)",
    "63": "java.lang.String getInputDeviceBluetoothAddress(int)",
    "64": "void pilferPointers(android.os.IBinder)",
    "65": "void registerKeyboardBacklightListener(android.hardware.input.IKeyboardBacklightListener)",
    "66": "void unregisterKeyboardBacklightListener(android.hardware.input.IKeyboardBacklightListener)",
    "67": "android.hardware.input.HostUsiVersion getHostUsiVersionFromDisplayConfig(int)"
  },
  "android.media.IAudioPolicyService": {
    "1": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5",
    "6": "6",
    "7": "7",
    "8": "8",
    "9": "9",
    "10": "10",
    "11": "11",
    "12": "12",
    "13": "13",
    "14": "14",
    "15": "15",
    "16": "16",
    "17": "17",
    "18": "18",
    "19": "19",
    "20": "20",
    "21": "21",
    "22": "22",
    "23": "23",
    "24": "24",
    "25": "25",
    "26": "26",
    "27": "27",
    "28": "28",
    "29": "29",
    "30": "30",
    "31": "31",
    "32": "32",
    "33": "33",
    "34": "34",
    "35": "35",
    "36": "36",
    "37": "37",
    "38": "38",
    "39": "39",
    "40": "40",
    "41": "41",
    "42": "42",
    "43": "43",
    "44": "44",
    "45": "45",
    "46": "46",
    "47": "47",
    "48": "48",
    "49": "49",
    "50": "50",
    "51": "51",
    "52": "52",
    "53": "53",
    "54": "54",
    "55": "55",
    "56": "56",
    "57": "57",
    "58": "58",
    "59": "59",
    "60": "60",
    "61": "61",
    "62": "62",
    "63": "63",
    "64": "64",
    "65": "65",
    "66": "66",
    "67": "67",
    "68": "68",
    "69": "69",
    "70": "70",
    "71": "71",
    "72": "72",
    "73": "73",
    "74": "74",
    "75": "75",
    "76": "76",
    "77": "77",
    "78": "78",
    "79": "79",
    "80": "80",
    "81": "81",
    "82": "82",
    "83": "83",
    "84": "84",
    "85": "85",
    "86": "86",
    "87": "87",
    "88": "88",
    "89": "89",
    "90": "90",
    "91": "91",
    "92": "92",
    "93": "93",
    "94": "94",
    "95": "95",
    "96": "96",
    "97": "97",
    "98": "98",
    "99": "99",
    "100": "100"
  },
  "android.net.INetworkScoreService": {
    "1": "boolean updateScores([Landroid.net.ScoredNetwork;)",
    "2": "boolean clearScores()",
    "3": "boolean setActiveScorer(java.lang.String)",
    "4": "void disableScoring()",
    "5": "void registerNetworkScoreCache(int, android.net.INetworkScoreCache, int)",
    "6": "void unregisterNetworkScoreCache(int, android.net.INetworkScoreCache)",
    "7": "boolean requestScores([Landroid.net.NetworkKey;)",
    "8": "boolean isCallerActiveScorer(int)",
    "9": "java.lang.String getActiveScorerPackage()",
    "10": "android.net.NetworkScorerAppData getActiveScorer()",
    "11": "java.util.List getAllValidScorers()"
  },
  "com.android.internal.telephony.ITelephonyRegistry": {
    "1": "void addOnSubscriptionsChangedListener(java.lang.String, java.lang.String, com.android.internal.telephony.IOnSubscriptionsChangedListener)",
    "2": "void addOnOpportunisticSubscriptionsChangedListener(java.lang.String, java.lang.String, com.android.internal.telephony.IOnSubscriptionsChangedListener)",
    "3": "void removeOnSubscriptionsChangedListener(java.lang.String, com.android.internal.telephony.IOnSubscriptionsChangedListener)",
    "4": "void listenWithEventList(boolean, boolean, int, java.lang.String, java.lang.String, com.android.internal.telephony.IPhoneStateListener, [I, boolean)",
    "5": "void notifyCallStateForAllSubs(int, java.lang.String)",
    "6": "void notifyCallState(int, int, int, java.lang.String)",
    "7": "void notifyServiceStateForPhoneId(int, int, android.telephony.ServiceState)",
    "8": "void notifySignalStrengthForPhoneId(int, int, android.telephony.SignalStrength)",
    "9": "void notifyMessageWaitingChangedForPhoneId(int, int, boolean)",
    "10": "void notifyCallForwardingChanged(boolean)",
    "11": "void notifyCallForwardingChangedForSubscriber(int, boolean)",
    "12": "void notifyDataActivity(int)",
    "13": "void notifyDataActivityForSubscriber(int, int)",
    "14": "void notifyDataConnectionForSubscriber(int, int, android.telephony.PreciseDataConnectionState)",
    "15": "void notifyCellLocationForSubscriber(int, android.telephony.CellIdentity)",
    "16": "void notifyCellInfo(java.util.List)",
    "17": "void notifyPreciseCallState(int, int, [I, [Ljava.lang.String;, [I, [I)",
    "18": "void notifyDisconnectCause(int, int, int, int)",
    "19": "void notifyCellInfoForSubscriber(int, java.util.List)",
    "20": "void notifySrvccStateChanged(int, int)",
    "21": "void notifySimActivationStateChangedForPhoneId(int, int, int, int)",
    "22": "void notifyOemHookRawEventForSubscriber(int, int, [B)",
    "23": "void notifySubscriptionInfoChanged()",
    "24": "void notifyOpportunisticSubscriptionInfoChanged()",
    "25": "void notifyCarrierNetworkChange(boolean)",
    "26": "void notifyCarrierNetworkChangeWithSubId(int, boolean)",
    "27": "void notifyUserMobileDataStateChangedForPhoneId(int, int, boolean)",
    "28": "void notifyDisplayInfoChanged(int, int, android.telephony.TelephonyDisplayInfo)",
    "29": "void notifyPhoneCapabilityChanged(android.telephony.PhoneCapability)",
    "30": "void notifyActiveDataSubIdChanged(int)",
    "31": "void notifyRadioPowerStateChanged(int, int, int)",
    "32": "void notifyEmergencyNumberList(int, int)",
    "33": "void notifyOutgoingEmergencyCall(int, int, android.telephony.emergency.EmergencyNumber)",
    "34": "void notifyOutgoingEmergencySms(int, int, android.telephony.emergency.EmergencyNumber)",
    "35": "void notifyCallQualityChanged(android.telephony.CallQuality, int, int, int)",
    "36": "void notifyMediaQualityStatusChanged(int, int, android.telephony.ims.MediaQualityStatus)",
    "37": "void notifyImsDisconnectCause(int, android.telephony.ims.ImsReasonInfo)",
    "38": "void notifyRegistrationFailed(int, int, android.telephony.CellIdentity, java.lang.String, int, int, int)",
    "39": "void notifyBarringInfoChanged(int, int, android.telephony.BarringInfo)",
    "40": "void notifyPhysicalChannelConfigForSubscriber(int, int, java.util.List)",
    "41": "void notifyDataEnabled(int, int, boolean, int)",
    "42": "void notifyAllowedNetworkTypesChanged(int, int, int, long)",
    "43": "void notifyLinkCapacityEstimateChanged(int, int, java.util.List)",
    "44": "void addCarrierPrivilegesCallback(int, com.android.internal.telephony.ICarrierPrivilegesCallback, java.lang.String, java.lang.String)",
    "45": "void removeCarrierPrivilegesCallback(com.android.internal.telephony.ICarrierPrivilegesCallback, java.lang.String)",
    "46": "void notifyCarrierPrivilegesChanged(int, java.util.List, [I)",
    "47": "void notifyCarrierServiceChanged(int, java.lang.String, int)",
    "48": "void addCarrierConfigChangeListener(com.android.internal.telephony.ICarrierConfigChangeListener, java.lang.String, java.lang.String)",
    "49": "void removeCarrierConfigChangeListener(com.android.internal.telephony.ICarrierConfigChangeListener, java.lang.String)",
    "50": "void notifyCarrierConfigChanged(int, int, int, int)",
    "51": "void notifyCallbackModeStarted(int, int, int)",
    "52": "void notifyCallbackModeStopped(int, int, int, int)"
  },
  "com.android.internal.app.IVoiceInteractionManagerService": {
    "1": "void showSession(android.os.Bundle, int, java.lang.String)",
    "2": "boolean deliverNewSession(android.os.IBinder, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor)",
    "3": "boolean showSessionFromSession(android.os.IBinder, android.os.Bundle, int, java.lang.String)",
    "4": "boolean hideSessionFromSession(android.os.IBinder)",
    "5": "int startVoiceActivity(android.os.IBinder, android.content.Intent, java.lang.String, java.lang.String)",
    "6": "int startAssistantActivity(android.os.IBinder, android.content.Intent, java.lang.String, java.lang.String, android.os.Bundle)",
    "7": "void setKeepAwake(android.os.IBinder, boolean)",
    "8": "void closeSystemDialogs(android.os.IBinder)",
    "9": "void finish(android.os.IBinder)",
    "10": "void setDisabledShowContext(int)",
    "11": "int getDisabledShowContext()",
    "12": "int getUserDisabledShowContext()",
    "13": "android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel getKeyphraseSoundModel(int, java.lang.String)",
    "14": "int updateKeyphraseSoundModel(android.hardware.soundtrigger.SoundTrigger$KeyphraseSoundModel)",
    "15": "int deleteKeyphraseSoundModel(int, java.lang.String)",
    "16": "void setModelDatabaseForTestEnabled(boolean, android.os.IBinder)",
    "17": "boolean isEnrolledForKeyphrase(int, java.lang.String)",
    "18": "android.hardware.soundtrigger.KeyphraseMetadata getEnrolledKeyphraseMetadata(java.lang.String, java.lang.String)",
    "19": "android.content.ComponentName getActiveServiceComponentName()",
    "20": "boolean showSessionForActiveService(android.os.Bundle, int, java.lang.String, com.android.internal.app.IVoiceInteractionSessionShowCallback, android.os.IBinder)",
    "21": "void hideCurrentSession()",
    "22": "void launchVoiceAssistFromKeyguard()",
    "23": "boolean isSessionRunning()",
    "24": "boolean activeServiceSupportsAssist()",
    "25": "boolean activeServiceSupportsLaunchFromKeyguard()",
    "26": "void onLockscreenShown()",
    "27": "void registerVoiceInteractionSessionListener(com.android.internal.app.IVoiceInteractionSessionListener)",
    "28": "void getActiveServiceSupportedActions(java.util.List, com.android.internal.app.IVoiceActionCheckCallback)",
    "29": "void setUiHints(android.os.Bundle)",
    "30": "void requestDirectActions(android.os.IBinder, int, android.os.IBinder, android.os.RemoteCallback, android.os.RemoteCallback)",
    "31": "void performDirectAction(android.os.IBinder, java.lang.String, android.os.Bundle, int, android.os.IBinder, android.os.RemoteCallback, android.os.RemoteCallback)",
    "32": "void setDisabled(boolean)",
    "33": "com.android.internal.app.IVoiceInteractionSoundTriggerSession createSoundTriggerSessionAsOriginator(android.media.permission.Identity, android.os.IBinder, android.hardware.soundtrigger.SoundTrigger$ModuleProperties)",
    "34": "java.util.List listModuleProperties(android.media.permission.Identity)",
    "35": "void updateState(android.os.PersistableBundle, android.os.SharedMemory, android.os.IBinder)",
    "36": "void initAndVerifyDetector(android.media.permission.Identity, android.os.PersistableBundle, android.os.SharedMemory, android.os.IBinder, com.android.internal.app.IHotwordRecognitionStatusCallback, int)",
    "37": "void destroyDetector(android.os.IBinder)",
    "38": "void shutdownHotwordDetectionService()",
    "39": "void enableVisualQueryDetection(com.android.internal.app.IVisualQueryDetectionAttentionListener)",
    "40": "void disableVisualQueryDetection()",
    "41": "void startPerceiving(android.service.voice.IVisualQueryDetectionVoiceInteractionCallback)",
    "42": "void stopPerceiving()",
    "43": "void startListeningFromMic(android.media.AudioFormat, android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)",
    "44": "void stopListeningFromMic()",
    "45": "void startListeningFromExternalSource(android.os.ParcelFileDescriptor, android.media.AudioFormat, android.os.PersistableBundle, android.os.IBinder, android.service.voice.IMicrophoneHotwordDetectionVoiceInteractionCallback)",
    "46": "void triggerHardwareRecognitionEventForTest(android.hardware.soundtrigger.SoundTrigger$KeyphraseRecognitionEvent, com.android.internal.app.IHotwordRecognitionStatusCallback)",
    "47": "void startListeningVisibleActivityChanged(android.os.IBinder)",
    "48": "void stopListeningVisibleActivityChanged(android.os.IBinder)",
    "49": "void setSessionWindowVisible(android.os.IBinder, boolean)",
    "50": "void notifyActivityEventChanged(android.os.IBinder, int)"
  },
  "android.os.IHardwarePropertiesManager": {
    "1": "[F getDeviceTemperatures(java.lang.String, int, int)",
    "2": "[Landroid.os.CpuUsageInfo; getCpuUsages(java.lang.String)",
    "3": "[F getFanSpeeds(java.lang.String)"
  },
  "android.security.keymaster.IKeyAttestationApplicationIdProvider": {
    "1": "android.security.keymaster.KeyAttestationApplicationId getKeyAttestationApplicationId(int)"
  },
  "android.hardware.ISerialManager": {
    "1": "[Ljava.lang.String; getSerialPorts()",
    "2": "android.os.ParcelFileDescriptor openSerialPort(java.lang.String)"
  },
  "android.media.IMediaCommunicationService": {
    "1": "void notifySession2Created(android.media.Session2Token)",
    "2": "boolean isTrusted(java.lang.String, int, int)",
    "3": "android.media.MediaParceledListSlice getSession2Tokens(int)",
    "4": "void dispatchMediaKeyEvent(java.lang.String, android.view.KeyEvent, boolean)",
    "5": "void registerCallback(android.media.IMediaCommunicationServiceCallback, java.lang.String)",
    "6": "void unregisterCallback(android.media.IMediaCommunicationServiceCallback)"
  },
  "android.os.IServiceManager": {
    "1": "android.os.IBinder getService(java.lang.String)",
    "2": "android.os.IBinder checkService(java.lang.String)",
    "3": "void addService(java.lang.String, android.os.IBinder, boolean, int)",
    "4": "[Ljava.lang.String; listServices(int)",
    "5": "void registerForNotifications(java.lang.String, android.os.IServiceCallback)",
    "6": "void unregisterForNotifications(java.lang.String, android.os.IServiceCallback)",
    "7": "boolean isDeclared(java.lang.String)",
    "8": "[Ljava.lang.String; getDeclaredInstances(java.lang.String)",
    "9": "java.lang.String updatableViaApex(java.lang.String)",
    "10": "[Ljava.lang.String; getUpdatableNames(java.lang.String)",
    "11": "android.os.ConnectionInfo getConnectionInfo(java.lang.String)",
    "12": "void registerClientCallback(java.lang.String, android.os.IBinder, android.os.IClientCallback)",
    "13": "void tryUnregisterService(java.lang.String, android.os.IBinder)",
    "14": "[Landroid.os.ServiceDebugInfo; getServiceDebugInfo()"
  },
  "android.net.wifi.nl80211.IWificond": {
    "1": "android.net.wifi.nl80211.IApInterface createApInterface(java.lang.String)",
    "2": "android.net.wifi.nl80211.IClientInterface createClientInterface(java.lang.String)",
    "3": "boolean tearDownApInterface(java.lang.String)",
    "4": "boolean tearDownClientInterface(java.lang.String)",
    "5": "void tearDownInterfaces()",
    "6": "java.util.List GetClientInterfaces()",
    "7": "java.util.List GetApInterfaces()",
    "8": "[I getAvailable2gChannels()",
    "9": "[I getAvailable5gNonDFSChannels()",
    "10": "[I getAvailableDFSChannels()",
    "11": "[I getAvailable6gChannels()",
    "12": "[I getAvailable60gChannels()",
    "13": "void RegisterCallback(android.net.wifi.nl80211.IInterfaceEventCallback)",
    "14": "void UnregisterCallback(android.net.wifi.nl80211.IInterfaceEventCallback)",
    "15": "void registerWificondEventCallback(android.net.wifi.nl80211.IWificondEventCallback)",
    "16": "void unregisterWificondEventCallback(android.net.wifi.nl80211.IWificondEventCallback)",
    "17": "android.net.wifi.nl80211.DeviceWiphyCapabilities getDeviceWiphyCapabilities(java.lang.String)",
    "18": "void notifyCountryCodeChanged()"
  },
  "android.os.IPermissionController": {
    "1": "boolean checkPermission(java.lang.String, int, int)",
    "2": "int noteOp(java.lang.String, int, java.lang.String)",
    "3": "[Ljava.lang.String; getPackagesForUid(int)",
    "4": "boolean isRuntimePermission(java.lang.String)",
    "5": "int getPackageUid(java.lang.String, int)"
  },
  "com.android.internal.compat.IPlatformCompat": {
    "1": "void reportChange(long, android.content.pm.ApplicationInfo)",
    "2": "void reportChangeByPackageName(long, java.lang.String, int)",
    "3": "void reportChangeByUid(long, int)",
    "4": "boolean isChangeEnabled(long, android.content.pm.ApplicationInfo)",
    "5": "boolean isChangeEnabledByPackageName(long, java.lang.String, int)",
    "6": "boolean isChangeEnabledByUid(long, int)",
    "7": "void setOverrides(com.android.internal.compat.CompatibilityChangeConfig, java.lang.String)",
    "8": "void putAllOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesByPackageConfig)",
    "9": "void putOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverrideConfig, java.lang.String)",
    "10": "void setOverridesForTest(com.android.internal.compat.CompatibilityChangeConfig, java.lang.String)",
    "11": "boolean clearOverride(long, java.lang.String)",
    "12": "boolean clearOverrideForTest(long, java.lang.String)",
    "13": "void removeAllOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesToRemoveByPackageConfig)",
    "14": "void removeOverridesOnReleaseBuilds(com.android.internal.compat.CompatibilityOverridesToRemoveConfig, java.lang.String)",
    "15": "int enableTargetSdkChanges(java.lang.String, int)",
    "16": "int disableTargetSdkChanges(java.lang.String, int)",
    "17": "void clearOverrides(java.lang.String)",
    "18": "void clearOverridesForTest(java.lang.String)",
    "19": "com.android.internal.compat.CompatibilityChangeConfig getAppConfig(android.content.pm.ApplicationInfo)",
    "20": "[Lcom.android.internal.compat.CompatibilityChangeInfo; listAllChanges()",
    "21": "[Lcom.android.internal.compat.CompatibilityChangeInfo; listUIChanges()",
    "22": "com.android.internal.compat.IOverrideValidator getOverrideValidator()"
  },
  "android.credentials.ICredentialManager": {
    "1": "android.os.ICancellationSignal executeGetCredential(android.credentials.GetCredentialRequest, android.credentials.IGetCredentialCallback, java.lang.String)",
    "2": "android.os.ICancellationSignal executePrepareGetCredential(android.credentials.GetCredentialRequest, android.credentials.IPrepareGetCredentialCallback, android.credentials.IGetCredentialCallback, java.lang.String)",
    "3": "android.os.ICancellationSignal executeCreateCredential(android.credentials.CreateCredentialRequest, android.credentials.ICreateCredentialCallback, java.lang.String)",
    "4": "android.os.ICancellationSignal clearCredentialState(android.credentials.ClearCredentialStateRequest, android.credentials.IClearCredentialStateCallback, java.lang.String)",
    "5": "void setEnabledProviders(java.util.List, java.util.List, int, android.credentials.ISetEnabledProvidersCallback)",
    "6": "void registerCredentialDescription(android.credentials.RegisterCredentialDescriptionRequest, java.lang.String)",
    "7": "void unregisterCredentialDescription(android.credentials.UnregisterCredentialDescriptionRequest, java.lang.String)",
    "8": "boolean isEnabledCredentialProviderService(android.content.ComponentName, java.lang.String)",
    "9": "java.util.List getCredentialProviderServices(int, int)",
    "10": "java.util.List getCredentialProviderServicesForTesting(int)",
    "11": "boolean isServiceEnabled()"
  },
  "android.hardware.ICameraService": {
    "1": "int getNumberOfCameras(int)",
    "2": "android.hardware.CameraInfo getCameraInfo(int, boolean)",
    "3": "android.hardware.ICamera connect(android.hardware.ICameraClient, int, java.lang.String, int, int, int, boolean, boolean)",
    "4": "android.hardware.camera2.ICameraDeviceUser connectDevice(android.hardware.camera2.ICameraDeviceCallbacks, java.lang.String, java.lang.String, java.lang.String, int, int, int, boolean)",
    "5": "[Landroid.hardware.CameraStatus; addListener(android.hardware.ICameraServiceListener)",
    "6": "[Landroid.hardware.camera2.utils.ConcurrentCameraIdCombination; getConcurrentCameraIds()",
    "7": "boolean isConcurrentSessionConfigurationSupported([Landroid.hardware.camera2.utils.CameraIdAndSessionConfiguration;, int)",
    "8": "void removeListener(android.hardware.ICameraServiceListener)",
    "9": "android.hardware.camera2.impl.CameraMetadataNative getCameraCharacteristics(java.lang.String, int, boolean)",
    "10": "android.hardware.camera2.params.VendorTagDescriptor getCameraVendorTagDescriptor()",
    "11": "android.hardware.camera2.params.VendorTagDescriptorCache getCameraVendorTagCache()",
    "12": "java.lang.String getLegacyParameters(int)",
    "13": "boolean supportsCameraApi(java.lang.String, int)",
    "14": "boolean isHiddenPhysicalCamera(java.lang.String)",
    "15": "android.hardware.camera2.ICameraInjectionSession injectCamera(java.lang.String, java.lang.String, java.lang.String, android.hardware.camera2.ICameraInjectionCallback)",
    "16": "void setTorchMode(java.lang.String, boolean, android.os.IBinder)",
    "17": "void turnOnTorchWithStrengthLevel(java.lang.String, int, android.os.IBinder)",
    "18": "int getTorchStrengthLevel(java.lang.String)",
    "19": "void notifySystemEvent(int, [I)",
    "20": "void notifyDisplayConfigurationChange()",
    "21": "void notifyDeviceStateChange(long)",
    "22": "java.lang.String reportExtensionSessionStats(android.hardware.CameraExtensionSessionStats)"
  },
  "android.content.pm.IOtaDexopt": {
    "1": "void prepare()",
    "2": "void cleanup()",
    "3": "boolean isDone()",
    "4": "float getProgress()",
    "5": "void dexoptNextPackage()",
    "6": "java.lang.String nextDexoptCommand()"
  },
  "com.android.internal.app.ISoundTriggerService": {
    "1": "com.android.internal.app.ISoundTriggerSession attachAsOriginator(android.media.permission.Identity, android.hardware.soundtrigger.SoundTrigger$ModuleProperties, android.os.IBinder)",
    "2": "com.android.internal.app.ISoundTriggerSession attachAsMiddleman(android.media.permission.Identity, android.media.permission.Identity, android.hardware.soundtrigger.SoundTrigger$ModuleProperties, android.os.IBinder)",
    "3": "java.util.List listModuleProperties(android.media.permission.Identity)",
    "4": "void attachInjection(android.media.soundtrigger_middleware.ISoundTriggerInjection)",
    "5": "void setInPhoneCallState(boolean)"
  },
  "android.app.slice.ISliceManager": {
    "1": "void pinSlice(java.lang.String, android.net.Uri, [Landroid.app.slice.SliceSpec;, android.os.IBinder)",
    "2": "void unpinSlice(java.lang.String, android.net.Uri, android.os.IBinder)",
    "3": "boolean hasSliceAccess(java.lang.String)",
    "4": "[Landroid.app.slice.SliceSpec; getPinnedSpecs(android.net.Uri, java.lang.String)",
    "5": "[Landroid.net.Uri; getPinnedSlices(java.lang.String)",
    "6": "[B getBackupPayload(int)",
    "7": "void applyRestore([B, int)",
    "8": "void grantSlicePermission(java.lang.String, java.lang.String, android.net.Uri)",
    "9": "void revokeSlicePermission(java.lang.String, java.lang.String, android.net.Uri)",
    "10": "int checkSlicePermission(android.net.Uri, java.lang.String, int, int, [Ljava.lang.String;)",
    "11": "void grantPermissionFromUser(android.net.Uri, java.lang.String, java.lang.String, boolean)"
  },
  "android.hardware.biometrics.IAuthService": {
    "1": "android.hardware.biometrics.ITestSession createTestSession(int, android.hardware.biometrics.ITestSessionCallback, java.lang.String)",
    "2": "java.util.List getSensorProperties(java.lang.String)",
    "3": "java.lang.String getUiPackage()",
    "4": "long authenticate(android.os.IBinder, long, int, android.hardware.biometrics.IBiometricServiceReceiver, java.lang.String, android.hardware.biometrics.PromptInfo)",
    "5": "void cancelAuthentication(android.os.IBinder, java.lang.String, long)",
    "6": "int canAuthenticate(java.lang.String, int, int)",
    "7": "boolean hasEnrolledBiometrics(int, java.lang.String)",
    "8": "void registerEnabledOnKeyguardCallback(android.hardware.biometrics.IBiometricEnabledOnKeyguardCallback)",
    "9": "void invalidateAuthenticatorIds(int, int, android.hardware.biometrics.IInvalidationCallback)",
    "10": "[J getAuthenticatorIds(int)",
    "11": "void resetLockoutTimeBound(android.os.IBinder, java.lang.String, int, int, [B)",
    "12": "void resetLockout(int, [B)",
    "13": "java.lang.CharSequence getButtonLabel(int, java.lang.String, int)",
    "14": "java.lang.CharSequence getPromptMessage(int, java.lang.String, int)",
    "15": "java.lang.CharSequence getSettingName(int, java.lang.String, int)"
  },
  "android.os.IIncidentCompanion": {
    "1": "void authorizeReport(int, java.lang.String, java.lang.String, java.lang.String, int, android.os.IIncidentAuthListener)",
    "2": "void cancelAuthorization(android.os.IIncidentAuthListener)",
    "3": "void sendReportReadyBroadcast(java.lang.String, java.lang.String)",
    "4": "java.util.List getPendingReports()",
    "5": "void approveReport(java.lang.String)",
    "6": "void denyReport(java.lang.String)",
    "7": "java.util.List getIncidentReportList(java.lang.String, java.lang.String)",
    "8": "android.os.IncidentManager$IncidentReport getIncidentReport(java.lang.String, java.lang.String, java.lang.String)",
    "9": "void deleteIncidentReports(java.lang.String, java.lang.String, java.lang.String)",
    "10": "void deleteAllIncidentReports(java.lang.String)"
  },
  "android.os.IDumpstate": {
    "1": "void preDumpUiData(java.lang.String)",
    "2": "void startBugreport(int, java.lang.String, java.io.FileDescriptor, java.io.FileDescriptor, int, int, android.os.IDumpstateListener, boolean)",
    "3": "void cancelBugreport(int, java.lang.String)",
    "4": "void retrieveBugreport(int, java.lang.String, java.io.FileDescriptor, java.lang.String, android.os.IDumpstateListener)"
  },
  "android.media.IAudioService": {
    "1": "int trackPlayer(android.media.PlayerBase$PlayerIdCard)",
    "2": "void playerAttributes(int, android.media.AudioAttributes)",
    "3": "void playerEvent(int, int, int)",
    "4": "void releasePlayer(int)",
    "5": "int trackRecorder(android.os.IBinder)",
    "6": "void recorderEvent(int, int)",
    "7": "void releaseRecorder(int)",
    "8": "void playerSessionId(int, int)",
    "9": "void portEvent(int, int, android.os.PersistableBundle)",
    "10": "void adjustStreamVolume(int, int, int, java.lang.String)",
    "11": "void adjustStreamVolumeWithAttribution(int, int, int, java.lang.String, java.lang.String)",
    "12": "void setStreamVolume(int, int, int, java.lang.String)",
    "13": "void setStreamVolumeWithAttribution(int, int, int, java.lang.String, java.lang.String)",
    "14": "void setDeviceVolume(android.media.VolumeInfo, android.media.AudioDeviceAttributes, java.lang.String)",
    "15": "android.media.VolumeInfo getDeviceVolume(android.media.VolumeInfo, android.media.AudioDeviceAttributes, java.lang.String)",
    "16": "void handleVolumeKey(android.view.KeyEvent, boolean, java.lang.String, java.lang.String)",
    "17": "boolean isStreamMute(int)",
    "18": "void forceRemoteSubmixFullVolume(boolean, android.os.IBinder)",
    "19": "boolean isMasterMute()",
    "20": "void setMasterMute(boolean, int, java.lang.String, int, java.lang.String)",
    "21": "int getStreamVolume(int)",
    "22": "int getStreamMinVolume(int)",
    "23": "int getStreamMaxVolume(int)",
    "24": "java.util.List getAudioVolumeGroups()",
    "25": "void setVolumeGroupVolumeIndex(int, int, int, java.lang.String, java.lang.String)",
    "26": "int getVolumeGroupVolumeIndex(int)",
    "27": "int getVolumeGroupMaxVolumeIndex(int)",
    "28": "int getVolumeGroupMinVolumeIndex(int)",
    "29": "int getLastAudibleVolumeForVolumeGroup(int)",
    "30": "boolean isVolumeGroupMuted(int)",
    "31": "void adjustVolumeGroupVolume(int, int, int, java.lang.String)",
    "32": "int getLastAudibleStreamVolume(int)",
    "33": "void setSupportedSystemUsages([I)",
    "34": "[I getSupportedSystemUsages()",
    "35": "java.util.List getAudioProductStrategies()",
    "36": "boolean isMicrophoneMuted()",
    "37": "boolean isUltrasoundSupported()",
    "38": "boolean isHotwordStreamSupported(boolean)",
    "39": "void setMicrophoneMute(boolean, java.lang.String, int, java.lang.String)",
    "40": "void setMicrophoneMuteFromSwitch(boolean)",
    "41": "void setRingerModeExternal(int, java.lang.String)",
    "42": "void setRingerModeInternal(int, java.lang.String)",
    "43": "int getRingerModeExternal()",
    "44": "int getRingerModeInternal()",
    "45": "boolean isValidRingerMode(int)",
    "46": "void setVibrateSetting(int, int)",
    "47": "int getVibrateSetting(int)",
    "48": "boolean shouldVibrate(int)",
    "49": "void setMode(int, android.os.IBinder, java.lang.String)",
    "50": "int getMode()",
    "51": "void playSoundEffect(int, int)",
    "52": "void playSoundEffectVolume(int, float)",
    "53": "boolean loadSoundEffects()",
    "54": "void unloadSoundEffects()",
    "55": "void reloadAudioSettings()",
    "56": "java.util.Map getSurroundFormats()",
    "57": "java.util.List getReportedSurroundFormats()",
    "58": "boolean setSurroundFormatEnabled(int, boolean)",
    "59": "boolean isSurroundFormatEnabled(int)",
    "60": "boolean setEncodedSurroundMode(int)",
    "61": "int getEncodedSurroundMode(int)",
    "62": "void setSpeakerphoneOn(android.os.IBinder, boolean)",
    "63": "boolean isSpeakerphoneOn()",
    "64": "void setBluetoothScoOn(boolean)",
    "65": "void setA2dpSuspended(boolean)",
    "66": "void setLeAudioSuspended(boolean)",
    "67": "boolean isBluetoothScoOn()",
    "68": "void setBluetoothA2dpOn(boolean)",
    "69": "boolean isBluetoothA2dpOn()",
    "70": "int requestAudioFocus(android.media.AudioAttributes, int, android.os.IBinder, android.media.IAudioFocusDispatcher, java.lang.String, java.lang.String, java.lang.String, int, android.media.audiopolicy.IAudioPolicyCallback, int)",
    "71": "int abandonAudioFocus(android.media.IAudioFocusDispatcher, java.lang.String, android.media.AudioAttributes, java.lang.String)",
    "72": "void unregisterAudioFocusClient(java.lang.String)",
    "73": "int getCurrentAudioFocus()",
    "74": "void startBluetoothSco(android.os.IBinder, int)",
    "75": "void startBluetoothScoVirtualCall(android.os.IBinder)",
    "76": "void stopBluetoothSco(android.os.IBinder)",
    "77": "void forceVolumeControlStream(int, android.os.IBinder)",
    "78": "void setRingtonePlayer(android.media.IRingtonePlayer)",
    "79": "android.media.IRingtonePlayer getRingtonePlayer()",
    "80": "int getUiSoundsStreamType()",
    "81": "java.util.List getIndependentStreamTypes()",
    "82": "int getStreamTypeAlias(int)",
    "83": "boolean isVolumeControlUsingVolumeGroups()",
    "84": "void registerStreamAliasingDispatcher(android.media.IStreamAliasingDispatcher, boolean)",
    "85": "void setNotifAliasRingForTest(boolean)",
    "86": "void setWiredDeviceConnectionState(android.media.AudioDeviceAttributes, int, java.lang.String)",
    "87": "android.media.AudioRoutesInfo startWatchingRoutes(android.media.IAudioRoutesObserver)",
    "88": "boolean isCameraSoundForced()",
    "89": "void setVolumeController(android.media.IVolumeController)",
    "90": "android.media.IVolumeController getVolumeController()",
    "91": "void notifyVolumeControllerVisible(android.media.IVolumeController, boolean)",
    "92": "boolean isStreamAffectedByRingerMode(int)",
    "93": "boolean isStreamAffectedByMute(int)",
    "94": "void disableSafeMediaVolume(java.lang.String)",
    "95": "void lowerVolumeToRs1(java.lang.String)",
    "96": "float getOutputRs2UpperBound()",
    "97": "void setOutputRs2UpperBound(float)",
    "98": "float getCsd()",
    "99": "void setCsd(float)",
    "100": "void forceUseFrameworkMel(boolean)",
    "101": "void forceComputeCsdOnAllDevices(boolean)",
    "102": "boolean isCsdEnabled()",
    "103": "int setHdmiSystemAudioSupported(boolean)",
    "104": "boolean isHdmiSystemAudioSupported()",
    "105": "java.lang.String registerAudioPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback, boolean, boolean, boolean, boolean, android.media.projection.IMediaProjection)",
    "106": "void unregisterAudioPolicyAsync(android.media.audiopolicy.IAudioPolicyCallback)",
    "107": "void unregisterAudioPolicy(android.media.audiopolicy.IAudioPolicyCallback)",
    "108": "int addMixForPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback)",
    "109": "int removeMixForPolicy(android.media.audiopolicy.AudioPolicyConfig, android.media.audiopolicy.IAudioPolicyCallback)",
    "110": "int setFocusPropertiesForPolicy(int, android.media.audiopolicy.IAudioPolicyCallback)",
    "111": "void setVolumePolicy(android.media.VolumePolicy)",
    "112": "boolean hasRegisteredDynamicPolicy()",
    "113": "void registerRecordingCallback(android.media.IRecordingConfigDispatcher)",
    "114": "void unregisterRecordingCallback(android.media.IRecordingConfigDispatcher)",
    "115": "java.util.List getActiveRecordingConfigurations()",
    "116": "void registerPlaybackCallback(android.media.IPlaybackConfigDispatcher)",
    "117": "void unregisterPlaybackCallback(android.media.IPlaybackConfigDispatcher)",
    "118": "java.util.List getActivePlaybackConfigurations()",
    "119": "int getFocusRampTimeMs(int, android.media.AudioAttributes)",
    "120": "int dispatchFocusChange(android.media.AudioFocusInfo, int, android.media.audiopolicy.IAudioPolicyCallback)",
    "121": "void playerHasOpPlayAudio(int, boolean)",
    "122": "void handleBluetoothActiveDeviceChanged(android.bluetooth.BluetoothDevice, android.bluetooth.BluetoothDevice, android.media.BluetoothProfileConnectionInfo)",
    "123": "void setFocusRequestResultFromExtPolicy(android.media.AudioFocusInfo, int, android.media.audiopolicy.IAudioPolicyCallback)",
    "124": "void registerAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)",
    "125": "void unregisterAudioServerStateDispatcher(android.media.IAudioServerStateDispatcher)",
    "126": "boolean isAudioServerRunning()",
    "127": "int setUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int, [I, [Ljava.lang.String;)",
    "128": "int removeUidDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int)",
    "129": "int setUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int, [I, [Ljava.lang.String;)",
    "130": "int removeUserIdDeviceAffinity(android.media.audiopolicy.IAudioPolicyCallback, int)",
    "131": "boolean hasHapticChannels(android.net.Uri)",
    "132": "boolean isCallScreeningModeSupported()",
    "133": "int setPreferredDevicesForStrategy(int, java.util.List)",
    "134": "int removePreferredDevicesForStrategy(int)",
    "135": "java.util.List getPreferredDevicesForStrategy(int)",
    "136": "int setDeviceAsNonDefaultForStrategy(int, android.media.AudioDeviceAttributes)",
    "137": "int removeDeviceAsNonDefaultForStrategy(int, android.media.AudioDeviceAttributes)",
    "138": "java.util.List getNonDefaultDevicesForStrategy(int)",
    "139": "java.util.List getDevicesForAttributes(android.media.AudioAttributes)",
    "140": "java.util.List getDevicesForAttributesUnprotected(android.media.AudioAttributes)",
    "141": "void addOnDevicesForAttributesChangedListener(android.media.AudioAttributes, android.media.IDevicesForAttributesCallback)",
    "142": "void removeOnDevicesForAttributesChangedListener(android.media.IDevicesForAttributesCallback)",
    "143": "int setAllowedCapturePolicy(int)",
    "144": "int getAllowedCapturePolicy()",
    "145": "void registerStrategyPreferredDevicesDispatcher(android.media.IStrategyPreferredDevicesDispatcher)",
    "146": "void unregisterStrategyPreferredDevicesDispatcher(android.media.IStrategyPreferredDevicesDispatcher)",
    "147": "void registerStrategyNonDefaultDevicesDispatcher(android.media.IStrategyNonDefaultDevicesDispatcher)",
    "148": "void unregisterStrategyNonDefaultDevicesDispatcher(android.media.IStrategyNonDefaultDevicesDispatcher)",
    "149": "void setRttEnabled(boolean)",
    "150": "void setDeviceVolumeBehavior(android.media.AudioDeviceAttributes, int, java.lang.String)",
    "151": "int getDeviceVolumeBehavior(android.media.AudioDeviceAttributes)",
    "152": "void setMultiAudioFocusEnabled(boolean)",
    "153": "int setPreferredDevicesForCapturePreset(int, java.util.List)",
    "154": "int clearPreferredDevicesForCapturePreset(int)",
    "155": "java.util.List getPreferredDevicesForCapturePreset(int)",
    "156": "void registerCapturePresetDevicesRoleDispatcher(android.media.ICapturePresetDevicesRoleDispatcher)",
    "157": "void unregisterCapturePresetDevicesRoleDispatcher(android.media.ICapturePresetDevicesRoleDispatcher)",
    "158": "void adjustStreamVolumeForUid(int, int, int, java.lang.String, int, int, android.os.UserHandle, int)",
    "159": "void adjustSuggestedStreamVolumeForUid(int, int, int, java.lang.String, int, int, android.os.UserHandle, int)",
    "160": "void setStreamVolumeForUid(int, int, int, java.lang.String, int, int, android.os.UserHandle, int)",
    "161": "boolean isMusicActive(boolean)",
    "162": "int getDeviceMaskForStream(int)",
    "163": "[I getAvailableCommunicationDeviceIds()",
    "164": "boolean setCommunicationDevice(android.os.IBinder, int)",
    "165": "int getCommunicationDevice()",
    "166": "void registerCommunicationDeviceDispatcher(android.media.ICommunicationDeviceDispatcher)",
    "167": "void unregisterCommunicationDeviceDispatcher(android.media.ICommunicationDeviceDispatcher)",
    "168": "boolean areNavigationRepeatSoundEffectsEnabled()",
    "169": "void setNavigationRepeatSoundEffectsEnabled(boolean)",
    "170": "boolean isHomeSoundEffectEnabled()",
    "171": "void setHomeSoundEffectEnabled(boolean)",
    "172": "boolean setAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes, long)",
    "173": "long getAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes)",
    "174": "long getMaxAdditionalOutputDeviceDelay(android.media.AudioDeviceAttributes)",
    "175": "int requestAudioFocusForTest(android.media.AudioAttributes, int, android.os.IBinder, android.media.IAudioFocusDispatcher, java.lang.String, java.lang.String, int, int, int)",
    "176": "int abandonAudioFocusForTest(android.media.IAudioFocusDispatcher, java.lang.String, android.media.AudioAttributes, java.lang.String)",
    "177": "long getFadeOutDurationOnFocusLossMillis(android.media.AudioAttributes)",
    "178": "void registerModeDispatcher(android.media.IAudioModeDispatcher)",
    "179": "void unregisterModeDispatcher(android.media.IAudioModeDispatcher)",
    "180": "int getSpatializerImmersiveAudioLevel()",
    "181": "boolean isSpatializerEnabled()",
    "182": "boolean isSpatializerAvailable()",
    "183": "boolean isSpatializerAvailableForDevice(android.media.AudioDeviceAttributes)",
    "184": "boolean hasHeadTracker(android.media.AudioDeviceAttributes)",
    "185": "void setHeadTrackerEnabled(boolean, android.media.AudioDeviceAttributes)",
    "186": "boolean isHeadTrackerEnabled(android.media.AudioDeviceAttributes)",
    "187": "boolean isHeadTrackerAvailable()",
    "188": "void registerSpatializerHeadTrackerAvailableCallback(android.media.ISpatializerHeadTrackerAvailableCallback, boolean)",
    "189": "void setSpatializerEnabled(boolean)",
    "190": "boolean canBeSpatialized(android.media.AudioAttributes, android.media.AudioFormat)",
    "191": "void registerSpatializerCallback(android.media.ISpatializerCallback)",
    "192": "void unregisterSpatializerCallback(android.media.ISpatializerCallback)",
    "193": "void registerSpatializerHeadTrackingCallback(android.media.ISpatializerHeadTrackingModeCallback)",
    "194": "void unregisterSpatializerHeadTrackingCallback(android.media.ISpatializerHeadTrackingModeCallback)",
    "195": "void registerHeadToSoundstagePoseCallback(android.media.ISpatializerHeadToSoundStagePoseCallback)",
    "196": "void unregisterHeadToSoundstagePoseCallback(android.media.ISpatializerHeadToSoundStagePoseCallback)",
    "197": "java.util.List getSpatializerCompatibleAudioDevices()",
    "198": "void addSpatializerCompatibleAudioDevice(android.media.AudioDeviceAttributes)",
    "199": "void removeSpatializerCompatibleAudioDevice(android.media.AudioDeviceAttributes)",
    "200": "void setDesiredHeadTrackingMode(int)",
    "201": "int getDesiredHeadTrackingMode()",
    "202": "[I getSupportedHeadTrackingModes()",
    "203": "int getActualHeadTrackingMode()",
    "204": "void setSpatializerGlobalTransform([F)",
    "205": "void recenterHeadTracker()",
    "206": "void setSpatializerParameter(int, [B)",
    "207": "void getSpatializerParameter(int, [B)",
    "208": "int getSpatializerOutput()",
    "209": "void registerSpatializerOutputCallback(android.media.ISpatializerOutputCallback)",
    "210": "void unregisterSpatializerOutputCallback(android.media.ISpatializerOutputCallback)",
    "211": "boolean isVolumeFixed()",
    "212": "android.media.VolumeInfo getDefaultVolumeInfo()",
    "213": "boolean isPstnCallAudioInterceptable()",
    "214": "void muteAwaitConnection([I, android.media.AudioDeviceAttributes, long)",
    "215": "void cancelMuteAwaitConnection(android.media.AudioDeviceAttributes)",
    "216": "android.media.AudioDeviceAttributes getMutingExpectedDevice()",
    "217": "void registerMuteAwaitConnectionDispatcher(android.media.IMuteAwaitConnectionCallback, boolean)",
    "218": "void setTestDeviceConnectionState(android.media.AudioDeviceAttributes, boolean)",
    "219": "void registerDeviceVolumeBehaviorDispatcher(boolean, android.media.IDeviceVolumeBehaviorDispatcher)",
    "220": "java.util.List getFocusStack()",
    "221": "boolean sendFocusLoss(android.media.AudioFocusInfo, android.media.audiopolicy.IAudioPolicyCallback)",
    "222": "void addAssistantServicesUids([I)",
    "223": "void removeAssistantServicesUids([I)",
    "224": "void setActiveAssistantServiceUids([I)",
    "225": "[I getAssistantServicesUids()",
    "226": "[I getActiveAssistantServiceUids()",
    "227": "void registerDeviceVolumeDispatcherForAbsoluteVolume(boolean, android.media.IAudioDeviceVolumeDispatcher, java.lang.String, android.media.AudioDeviceAttributes, java.util.List, boolean, int)",
    "228": "android.media.AudioHalVersionInfo getHalVersion()",
    "229": "int setPreferredMixerAttributes(android.media.AudioAttributes, int, android.media.AudioMixerAttributes)",
    "230": "int clearPreferredMixerAttributes(android.media.AudioAttributes, int)",
    "231": "void registerPreferredMixerAttributesDispatcher(android.media.IPreferredMixerAttributesDispatcher)",
    "232": "void unregisterPreferredMixerAttributesDispatcher(android.media.IPreferredMixerAttributesDispatcher)",
    "233": "boolean supportsBluetoothVariableLatency()",
    "234": "void setBluetoothVariableLatencyEnabled(boolean)",
    "235": "boolean isBluetoothVariableLatencyEnabled()"
  },
  "com.android.internal.app.IBatteryStats": {
    "1": "void noteStartSensor(int, int)",
    "2": "void noteStopSensor(int, int)",
    "3": "void noteStartVideo(int)",
    "4": "void noteStopVideo(int)",
    "5": "void noteStartAudio(int)",
    "6": "void noteStopAudio(int)",
    "7": "void noteResetVideo()",
    "8": "void noteResetAudio()",
    "9": "void noteFlashlightOn(int)",
    "10": "void noteFlashlightOff(int)",
    "11": "void noteStartCamera(int)",
    "12": "void noteStopCamera(int)",
    "13": "void noteResetCamera()",
    "14": "void noteResetFlashlight()",
    "15": "void noteWakeupSensorEvent(long, int, int)",
    "16": "java.util.List getBatteryUsageStats(java.util.List)",
    "17": "boolean isCharging()",
    "18": "long computeBatteryTimeRemaining()",
    "19": "long computeChargeTimeRemaining()",
    "20": "long computeBatteryScreenOffRealtimeMs()",
    "21": "long getScreenOffDischargeMah()",
    "22": "void noteEvent(int, java.lang.String, int)",
    "23": "void noteSyncStart(java.lang.String, int)",
    "24": "void noteSyncFinish(java.lang.String, int)",
    "25": "void noteJobStart(java.lang.String, int)",
    "26": "void noteJobFinish(java.lang.String, int, int)",
    "27": "void noteStartWakelock(int, int, java.lang.String, java.lang.String, int, boolean)",
    "28": "void noteStopWakelock(int, int, java.lang.String, java.lang.String, int)",
    "29": "void noteStartWakelockFromSource(android.os.WorkSource, int, java.lang.String, java.lang.String, int, boolean)",
    "30": "void noteChangeWakelockFromSource(android.os.WorkSource, int, java.lang.String, java.lang.String, int, android.os.WorkSource, int, java.lang.String, java.lang.String, int, boolean)",
    "31": "void noteStopWakelockFromSource(android.os.WorkSource, int, java.lang.String, java.lang.String, int)",
    "32": "void noteLongPartialWakelockStart(java.lang.String, java.lang.String, int)",
    "33": "void noteLongPartialWakelockStartFromSource(java.lang.String, java.lang.String, android.os.WorkSource)",
    "34": "void noteLongPartialWakelockFinish(java.lang.String, java.lang.String, int)",
    "35": "void noteLongPartialWakelockFinishFromSource(java.lang.String, java.lang.String, android.os.WorkSource)",
    "36": "void noteVibratorOn(int, long)",
    "37": "void noteVibratorOff(int)",
    "38": "void noteGpsChanged(android.os.WorkSource, android.os.WorkSource)",
    "39": "void noteGpsSignalQuality(int)",
    "40": "void noteScreenState(int)",
    "41": "void noteScreenBrightness(int)",
    "42": "void noteUserActivity(int, int)",
    "43": "void noteWakeUp(java.lang.String, int)",
    "44": "void noteInteractive(boolean)",
    "45": "void noteConnectivityChanged(int, java.lang.String)",
    "46": "void noteMobileRadioPowerState(int, long, int)",
    "47": "void notePhoneOn()",
    "48": "void notePhoneOff()",
    "49": "void notePhoneSignalStrength(android.telephony.SignalStrength)",
    "50": "void notePhoneDataConnectionState(int, boolean, int, int)",
    "51": "void notePhoneState(int)",
    "52": "void noteWifiOn()",
    "53": "void noteWifiOff()",
    "54": "void noteWifiRunning(android.os.WorkSource)",
    "55": "void noteWifiRunningChanged(android.os.WorkSource, android.os.WorkSource)",
    "56": "void noteWifiStopped(android.os.WorkSource)",
    "57": "void noteWifiState(int, java.lang.String)",
    "58": "void noteWifiSupplicantStateChanged(int, boolean)",
    "59": "void noteWifiRssiChanged(int)",
    "60": "void noteFullWifiLockAcquired(int)",
    "61": "void noteFullWifiLockReleased(int)",
    "62": "void noteWifiScanStarted(int)",
    "63": "void noteWifiScanStopped(int)",
    "64": "void noteWifiMulticastEnabled(int)",
    "65": "void noteWifiMulticastDisabled(int)",
    "66": "void noteFullWifiLockAcquiredFromSource(android.os.WorkSource)",
    "67": "void noteFullWifiLockReleasedFromSource(android.os.WorkSource)",
    "68": "void noteWifiScanStartedFromSource(android.os.WorkSource)",
    "69": "void noteWifiScanStoppedFromSource(android.os.WorkSource)",
    "70": "void noteWifiBatchedScanStartedFromSource(android.os.WorkSource, int)",
    "71": "void noteWifiBatchedScanStoppedFromSource(android.os.WorkSource)",
    "72": "void noteWifiRadioPowerState(int, long, int)",
    "73": "void noteNetworkInterfaceForTransports(java.lang.String, [I)",
    "74": "void noteNetworkStatsEnabled()",
    "75": "void noteDeviceIdleMode(int, java.lang.String, int)",
    "76": "void setBatteryState(int, int, int, int, int, int, int, int, long)",
    "77": "long getAwakeTimeBattery()",
    "78": "long getAwakeTimePlugged()",
    "79": "void noteBleScanStarted(android.os.WorkSource, boolean)",
    "80": "void noteBleScanStopped(android.os.WorkSource, boolean)",
    "81": "void noteBleScanReset()",
    "82": "void noteBleScanResults(android.os.WorkSource, int)",
    "83": "android.os.connectivity.CellularBatteryStats getCellularBatteryStats()",
    "84": "android.os.connectivity.WifiBatteryStats getWifiBatteryStats()",
    "85": "android.os.connectivity.GpsBatteryStats getGpsBatteryStats()",
    "86": "android.os.WakeLockStats getWakeLockStats()",
    "87": "android.os.BluetoothBatteryStats getBluetoothBatteryStats()",
    "88": "android.os.health.HealthStatsParceler takeUidSnapshot(int)",
    "89": "[Landroid.os.health.HealthStatsParceler; takeUidSnapshots([I)",
    "90": "void noteBluetoothControllerActivity(android.bluetooth.BluetoothActivityEnergyInfo)",
    "91": "void noteModemControllerActivity(android.telephony.ModemActivityInfo)",
    "92": "void noteWifiControllerActivity(android.os.connectivity.WifiActivityEnergyInfo)",
    "93": "boolean setChargingStateUpdateDelayMillis(int)",
    "94": "void setChargerAcOnline(boolean, boolean)",
    "95": "void setBatteryLevel(int, boolean)",
    "96": "void unplugBattery(boolean)",
    "97": "void resetBattery(boolean)",
    "98": "void suspendBatteryInput()"
  },
  "android.os.IProcessInfoService": {
    "1": "void getProcessStatesFromPids([I, [I)",
    "2": "void getProcessStatesAndOomScoresFromPids([I, [I, [I)"
  },
  "android.content.pm.IShortcutService": {
    "1": "boolean setDynamicShortcuts(java.lang.String, android.content.pm.ParceledListSlice, int)",
    "2": "boolean addDynamicShortcuts(java.lang.String, android.content.pm.ParceledListSlice, int)",
    "3": "void removeDynamicShortcuts(java.lang.String, java.util.List, int)",
    "4": "void removeAllDynamicShortcuts(java.lang.String, int)",
    "5": "boolean updateShortcuts(java.lang.String, android.content.pm.ParceledListSlice, int)",
    "6": "void requestPinShortcut(java.lang.String, android.content.pm.ShortcutInfo, android.content.IntentSender, int, com.android.internal.infra.AndroidFuture)",
    "7": "void createShortcutResultIntent(java.lang.String, android.content.pm.ShortcutInfo, int, com.android.internal.infra.AndroidFuture)",
    "8": "void disableShortcuts(java.lang.String, java.util.List, java.lang.CharSequence, int, int)",
    "9": "void enableShortcuts(java.lang.String, java.util.List, int)",
    "10": "int getMaxShortcutCountPerActivity(java.lang.String, int)",
    "11": "int getRemainingCallCount(java.lang.String, int)",
    "12": "long getRateLimitResetTime(java.lang.String, int)",
    "13": "int getIconMaxDimensions(java.lang.String, int)",
    "14": "void reportShortcutUsed(java.lang.String, java.lang.String, int)",
    "15": "void resetThrottling()",
    "16": "void onApplicationActive(java.lang.String, int)",
    "17": "[B getBackupPayload(int)",
    "18": "void applyRestore([B, int)",
    "19": "boolean isRequestPinItemSupported(int, int)",
    "20": "android.content.pm.ParceledListSlice getShareTargets(java.lang.String, android.content.IntentFilter, int)",
    "21": "boolean hasShareTargets(java.lang.String, java.lang.String, int)",
    "22": "void removeLongLivedShortcuts(java.lang.String, java.util.List, int)",
    "23": "android.content.pm.ParceledListSlice getShortcuts(java.lang.String, int, int)",
    "24": "void pushDynamicShortcut(java.lang.String, android.content.pm.ShortcutInfo, int)"
  },
  "android.service.gatekeeper.IGateKeeperService": {
    "1": "android.service.gatekeeper.GateKeeperResponse enroll(int, [B, [B, [B)",
    "2": "android.service.gatekeeper.GateKeeperResponse verify(int, [B, [B)",
    "3": "android.service.gatekeeper.GateKeeperResponse verifyChallenge(int, long, [B, [B)",
    "4": "long getSecureUserId(int)",
    "5": "void clearSecureUserId(int)",
    "6": "void reportDeviceSetupComplete()"
  },
  "android.se.omapi.ISecureElementService": {
    "1": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5",
    "6": "6"
  },
  "com.android.internal.telephony.ITelephony": {
    "1": "void dial(java.lang.String)",
    "2": "void call(java.lang.String, java.lang.String)",
    "3": "boolean isRadioOn(java.lang.String)",
    "4": "boolean isRadioOnWithFeature(java.lang.String, java.lang.String)",
    "5": "boolean isRadioOnForSubscriber(int, java.lang.String)",
    "6": "boolean isRadioOnForSubscriberWithFeature(int, java.lang.String, java.lang.String)",
    "7": "void setCallComposerStatus(int, int)",
    "8": "int getCallComposerStatus(int)",
    "9": "boolean supplyPinForSubscriber(int, java.lang.String)",
    "10": "boolean supplyPukForSubscriber(int, java.lang.String, java.lang.String)",
    "11": "[I supplyPinReportResultForSubscriber(int, java.lang.String)",
    "12": "[I supplyPukReportResultForSubscriber(int, java.lang.String, java.lang.String)",
    "13": "boolean handlePinMmi(java.lang.String)",
    "14": "void handleUssdRequest(int, java.lang.String, android.os.ResultReceiver)",
    "15": "boolean handlePinMmiForSubscriber(int, java.lang.String)",
    "16": "void toggleRadioOnOff()",
    "17": "void toggleRadioOnOffForSubscriber(int)",
    "18": "boolean setRadio(boolean)",
    "19": "boolean setRadioForSubscriber(int, boolean)",
    "20": "boolean setRadioPower(boolean)",
    "21": "boolean requestRadioPowerOffForReason(int, int)",
    "22": "boolean clearRadioPowerOffForReason(int, int)",
    "23": "java.util.List getRadioPowerOffReasons(int, java.lang.String, java.lang.String)",
    "24": "void updateServiceLocation()",
    "25": "void updateServiceLocationWithPackageName(java.lang.String)",
    "26": "void enableLocationUpdates()",
    "27": "void disableLocationUpdates()",
    "28": "boolean enableDataConnectivity(java.lang.String)",
    "29": "boolean disableDataConnectivity(java.lang.String)",
    "30": "boolean isDataConnectivityPossible(int)",
    "31": "android.telephony.CellIdentity getCellLocation(java.lang.String, java.lang.String)",
    "32": "java.lang.String getNetworkCountryIsoForPhone(int)",
    "33": "java.util.List getNeighboringCellInfo(java.lang.String, java.lang.String)",
    "34": "int getCallState()",
    "35": "int getCallStateForSubscription(int, java.lang.String, java.lang.String)",
    "36": "int getDataActivity()",
    "37": "int getDataActivityForSubId(int)",
    "38": "int getDataState()",
    "39": "int getDataStateForSubId(int)",
    "40": "int getActivePhoneType()",
    "41": "int getActivePhoneTypeForSlot(int)",
    "42": "int getCdmaEriIconIndex(java.lang.String, java.lang.String)",
    "43": "int getCdmaEriIconIndexForSubscriber(int, java.lang.String, java.lang.String)",
    "44": "int getCdmaEriIconMode(java.lang.String, java.lang.String)",
    "45": "int getCdmaEriIconModeForSubscriber(int, java.lang.String, java.lang.String)",
    "46": "java.lang.String getCdmaEriText(java.lang.String, java.lang.String)",
    "47": "java.lang.String getCdmaEriTextForSubscriber(int, java.lang.String, java.lang.String)",
    "48": "boolean needsOtaServiceProvisioning()",
    "49": "boolean setVoiceMailNumber(int, java.lang.String, java.lang.String)",
    "50": "void setVoiceActivationState(int, int)",
    "51": "void setDataActivationState(int, int)",
    "52": "int getVoiceActivationState(int, java.lang.String)",
    "53": "int getDataActivationState(int, java.lang.String)",
    "54": "int getVoiceMessageCountForSubscriber(int, java.lang.String, java.lang.String)",
    "55": "boolean isConcurrentVoiceAndDataAllowed(int)",
    "56": "android.os.Bundle getVisualVoicemailSettings(java.lang.String, int)",
    "57": "java.lang.String getVisualVoicemailPackageName(java.lang.String, java.lang.String, int)",
    "58": "void enableVisualVoicemailSmsFilter(java.lang.String, int, android.telephony.VisualVoicemailSmsFilterSettings)",
    "59": "void disableVisualVoicemailSmsFilter(java.lang.String, int)",
    "60": "android.telephony.VisualVoicemailSmsFilterSettings getVisualVoicemailSmsFilterSettings(java.lang.String, int)",
    "61": "android.telephony.VisualVoicemailSmsFilterSettings getActiveVisualVoicemailSmsFilterSettings(int)",
    "62": "void sendVisualVoicemailSmsForSubscriber(java.lang.String, java.lang.String, int, java.lang.String, int, java.lang.String, android.app.PendingIntent)",
    "63": "void sendDialerSpecialCode(java.lang.String, java.lang.String)",
    "64": "int getNetworkTypeForSubscriber(int, java.lang.String, java.lang.String)",
    "65": "int getDataNetworkType(java.lang.String, java.lang.String)",
    "66": "int getDataNetworkTypeForSubscriber(int, java.lang.String, java.lang.String)",
    "67": "int getVoiceNetworkTypeForSubscriber(int, java.lang.String, java.lang.String)",
    "68": "boolean hasIccCard()",
    "69": "boolean hasIccCardUsingSlotIndex(int)",
    "70": "int getLteOnCdmaMode(java.lang.String, java.lang.String)",
    "71": "int getLteOnCdmaModeForSubscriber(int, java.lang.String, java.lang.String)",
    "72": "java.util.List getAllCellInfo(java.lang.String, java.lang.String)",
    "73": "void requestCellInfoUpdate(int, android.telephony.ICellInfoCallback, java.lang.String, java.lang.String)",
    "74": "void requestCellInfoUpdateWithWorkSource(int, android.telephony.ICellInfoCallback, java.lang.String, java.lang.String, android.os.WorkSource)",
    "75": "void setCellInfoListRate(int, int)",
    "76": "android.telephony.IccOpenLogicalChannelResponse iccOpenLogicalChannel(com.android.internal.telephony.IccLogicalChannelRequest)",
    "77": "boolean iccCloseLogicalChannel(com.android.internal.telephony.IccLogicalChannelRequest)",
    "78": "java.lang.String iccTransmitApduLogicalChannelByPort(int, int, int, int, int, int, int, int, java.lang.String)",
    "79": "java.lang.String iccTransmitApduLogicalChannel(int, int, int, int, int, int, int, java.lang.String)",
    "80": "java.lang.String iccTransmitApduBasicChannelByPort(int, int, java.lang.String, int, int, int, int, int, java.lang.String)",
    "81": "java.lang.String iccTransmitApduBasicChannel(int, java.lang.String, int, int, int, int, int, java.lang.String)",
    "82": "[B iccExchangeSimIO(int, int, int, int, int, int, java.lang.String)",
    "83": "java.lang.String sendEnvelopeWithStatus(int, java.lang.String)",
    "84": "java.lang.String nvReadItem(int)",
    "85": "boolean nvWriteItem(int, java.lang.String)",
    "86": "boolean nvWriteCdmaPrl([B)",
    "87": "boolean resetModemConfig(int)",
    "88": "boolean rebootModem(int)",
    "89": "int getAllowedNetworkTypesBitmask(int)",
    "90": "boolean isTetheringApnRequiredForSubscriber(int)",
    "91": "void enableIms(int)",
    "92": "void disableIms(int)",
    "93": "void resetIms(int)",
    "94": "void registerMmTelFeatureCallback(int, com.android.ims.internal.IImsServiceFeatureCallback)",
    "95": "void unregisterImsFeatureCallback(com.android.ims.internal.IImsServiceFeatureCallback)",
    "96": "android.telephony.ims.aidl.IImsRegistration getImsRegistration(int, int)",
    "97": "android.telephony.ims.aidl.IImsConfig getImsConfig(int, int)",
    "98": "boolean setBoundImsServiceOverride(int, boolean, [I, java.lang.String)",
    "99": "boolean clearCarrierImsServiceOverride(int)",
    "100": "java.lang.String getBoundImsServicePackage(int, boolean, int)",
    "101": "void getImsMmTelFeatureState(int, com.android.internal.telephony.IIntegerConsumer)",
    "102": "void setNetworkSelectionModeAutomatic(int)",
    "103": "com.android.internal.telephony.CellNetworkScanResult getCellNetworkScanResults(int, java.lang.String, java.lang.String)",
    "104": "int requestNetworkScan(int, boolean, android.telephony.NetworkScanRequest, android.os.Messenger, android.os.IBinder, java.lang.String, java.lang.String)",
    "105": "void stopNetworkScan(int, int)",
    "106": "boolean setNetworkSelectionModeManual(int, com.android.internal.telephony.OperatorInfo, boolean)",
    "107": "long getAllowedNetworkTypesForReason(int, int)",
    "108": "boolean setAllowedNetworkTypesForReason(int, int, long)",
    "109": "boolean getDataEnabled(int)",
    "110": "boolean isUserDataEnabled(int)",
    "111": "boolean isDataEnabled(int)",
    "112": "void setDataEnabledForReason(int, int, boolean, java.lang.String)",
    "113": "boolean isDataEnabledForReason(int, int)",
    "114": "boolean isManualNetworkSelectionAllowed(int)",
    "115": "void setImsRegistrationState(boolean)",
    "116": "java.lang.String getCdmaMdn(int)",
    "117": "java.lang.String getCdmaMin(int)",
    "118": "void requestNumberVerification(android.telephony.PhoneNumberRange, long, com.android.internal.telephony.INumberVerificationCallback, java.lang.String)",
    "119": "int getCarrierPrivilegeStatus(int)",
    "120": "int getCarrierPrivilegeStatusForUid(int, int)",
    "121": "int checkCarrierPrivilegesForPackage(int, java.lang.String)",
    "122": "int checkCarrierPrivilegesForPackageAnyPhone(java.lang.String)",
    "123": "java.util.List getCarrierPackageNamesForIntentAndPhone(android.content.Intent, int)",
    "124": "boolean setLine1NumberForDisplayForSubscriber(int, java.lang.String, java.lang.String)",
    "125": "java.lang.String getLine1NumberForDisplay(int, java.lang.String, java.lang.String)",
    "126": "java.lang.String getLine1AlphaTagForDisplay(int, java.lang.String, java.lang.String)",
    "127": "[Ljava.lang.String; getMergedSubscriberIds(int, java.lang.String, java.lang.String)",
    "128": "[Ljava.lang.String; getMergedImsisFromGroup(int, java.lang.String)",
    "129": "boolean setOperatorBrandOverride(int, java.lang.String)",
    "130": "boolean setRoamingOverride(int, java.util.List, java.util.List, java.util.List, java.util.List)",
    "131": "int invokeOemRilRequestRaw([B, [B)",
    "132": "boolean needMobileRadioShutdown()",
    "133": "void shutdownMobileRadios()",
    "134": "int getRadioAccessFamily(int, java.lang.String)",
    "135": "void uploadCallComposerPicture(int, java.lang.String, java.lang.String, android.os.ParcelFileDescriptor, android.os.ResultReceiver)",
    "136": "void enableVideoCalling(boolean)",
    "137": "boolean isVideoCallingEnabled(java.lang.String, java.lang.String)",
    "138": "boolean canChangeDtmfToneLength(int, java.lang.String, java.lang.String)",
    "139": "boolean isWorldPhone(int, java.lang.String, java.lang.String)",
    "140": "boolean isTtyModeSupported()",
    "141": "boolean isRttSupported(int)",
    "142": "boolean isHearingAidCompatibilitySupported()",
    "143": "boolean isImsRegistered(int)",
    "144": "boolean isWifiCallingAvailable(int)",
    "145": "boolean isVideoTelephonyAvailable(int)",
    "146": "int getImsRegTechnologyForMmTel(int)",
    "147": "java.lang.String getDeviceId(java.lang.String)",
    "148": "java.lang.String getDeviceIdWithFeature(java.lang.String, java.lang.String)",
    "149": "java.lang.String getImeiForSlot(int, java.lang.String, java.lang.String)",
    "150": "java.lang.String getPrimaryImei(java.lang.String, java.lang.String)",
    "151": "java.lang.String getTypeAllocationCodeForSlot(int)",
    "152": "java.lang.String getMeidForSlot(int, java.lang.String, java.lang.String)",
    "153": "java.lang.String getManufacturerCodeForSlot(int)",
    "154": "java.lang.String getDeviceSoftwareVersionForSlot(int, java.lang.String, java.lang.String)",
    "155": "int getSubIdForPhoneAccountHandle(android.telecom.PhoneAccountHandle, java.lang.String, java.lang.String)",
    "156": "android.telecom.PhoneAccountHandle getPhoneAccountHandleForSubscriptionId(int)",
    "157": "void factoryReset(int, java.lang.String)",
    "158": "java.lang.String getSimLocaleForSubscriber(int)",
    "159": "void requestModemActivityInfo(android.os.ResultReceiver)",
    "160": "android.telephony.ServiceState getServiceStateForSubscriber(int, boolean, boolean, java.lang.String, java.lang.String)",
    "161": "android.net.Uri getVoicemailRingtoneUri(android.telecom.PhoneAccountHandle)",
    "162": "void setVoicemailRingtoneUri(java.lang.String, android.telecom.PhoneAccountHandle, android.net.Uri)",
    "163": "boolean isVoicemailVibrationEnabled(android.telecom.PhoneAccountHandle)",
    "164": "void setVoicemailVibrationEnabled(java.lang.String, android.telecom.PhoneAccountHandle, boolean)",
    "165": "java.util.List getPackagesWithCarrierPrivileges(int)",
    "166": "java.util.List getPackagesWithCarrierPrivilegesForAllPhones()",
    "167": "java.lang.String getAidForAppType(int, int)",
    "168": "java.lang.String getEsn(int)",
    "169": "java.lang.String getCdmaPrlVersion(int)",
    "170": "java.util.List getTelephonyHistograms()",
    "171": "int setAllowedCarriers(android.telephony.CarrierRestrictionRules)",
    "172": "android.telephony.CarrierRestrictionRules getAllowedCarriers()",
    "173": "int getSubscriptionCarrierId(int)",
    "174": "java.lang.String getSubscriptionCarrierName(int)",
    "175": "int getSubscriptionSpecificCarrierId(int)",
    "176": "java.lang.String getSubscriptionSpecificCarrierName(int)",
    "177": "int getCarrierIdFromMccMnc(int, java.lang.String, boolean)",
    "178": "void carrierActionSetRadioEnabled(int, boolean)",
    "179": "void carrierActionReportDefaultNetworkStatus(int, boolean)",
    "180": "void carrierActionResetAll(int)",
    "181": "void getCallForwarding(int, int, com.android.internal.telephony.ICallForwardingInfoCallback)",
    "182": "void setCallForwarding(int, android.telephony.CallForwardingInfo, com.android.internal.telephony.IIntegerConsumer)",
    "183": "void getCallWaitingStatus(int, com.android.internal.telephony.IIntegerConsumer)",
    "184": "void setCallWaitingStatus(int, boolean, com.android.internal.telephony.IIntegerConsumer)",
    "185": "java.util.List getClientRequestStats(java.lang.String, java.lang.String, int)",
    "186": "void setSimPowerStateForSlot(int, int)",
    "187": "void setSimPowerStateForSlotWithCallback(int, int, com.android.internal.telephony.IIntegerConsumer)",
    "188": "[Ljava.lang.String; getForbiddenPlmns(int, int, java.lang.String, java.lang.String)",
    "189": "int setForbiddenPlmns(int, int, java.util.List, java.lang.String, java.lang.String)",
    "190": "boolean getEmergencyCallbackMode(int)",
    "191": "android.telephony.SignalStrength getSignalStrength(int)",
    "192": "int getCardIdForDefaultEuicc(int, java.lang.String)",
    "193": "java.util.List getUiccCardsInfo(java.lang.String)",
    "194": "[Landroid.telephony.UiccSlotInfo; getUiccSlotsInfo(java.lang.String)",
    "195": "boolean switchSlots([I)",
    "196": "boolean setSimSlotMapping(java.util.List)",
    "197": "boolean isDataRoamingEnabled(int)",
    "198": "void setDataRoamingEnabled(int, boolean)",
    "199": "int getCdmaRoamingMode(int)",
    "200": "boolean setCdmaRoamingMode(int, int)",
    "201": "int getCdmaSubscriptionMode(int)",
    "202": "boolean setCdmaSubscriptionMode(int, int)",
    "203": "void setCarrierTestOverride(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "204": "void setCarrierServicePackageOverride(int, java.lang.String, java.lang.String)",
    "205": "int getCarrierIdListVersion(int)",
    "206": "void refreshUiccProfile(int)",
    "207": "int getNumberOfModemsWithSimultaneousDataConnections(int, java.lang.String, java.lang.String)",
    "208": "int getNetworkSelectionMode(int)",
    "209": "boolean isInEmergencySmsMode()",
    "210": "int getRadioPowerState(int, java.lang.String, java.lang.String)",
    "211": "void registerImsRegistrationCallback(int, android.telephony.ims.aidl.IImsRegistrationCallback)",
    "212": "void unregisterImsRegistrationCallback(int, android.telephony.ims.aidl.IImsRegistrationCallback)",
    "213": "void getImsMmTelRegistrationState(int, com.android.internal.telephony.IIntegerConsumer)",
    "214": "void getImsMmTelRegistrationTransportType(int, com.android.internal.telephony.IIntegerConsumer)",
    "215": "void registerMmTelCapabilityCallback(int, android.telephony.ims.aidl.IImsCapabilityCallback)",
    "216": "void unregisterMmTelCapabilityCallback(int, android.telephony.ims.aidl.IImsCapabilityCallback)",
    "217": "boolean isCapable(int, int, int)",
    "218": "boolean isAvailable(int, int, int)",
    "219": "void isMmTelCapabilitySupported(int, com.android.internal.telephony.IIntegerConsumer, int, int)",
    "220": "boolean isAdvancedCallingSettingEnabled(int)",
    "221": "void setAdvancedCallingSettingEnabled(int, boolean)",
    "222": "boolean isVtSettingEnabled(int)",
    "223": "void setVtSettingEnabled(int, boolean)",
    "224": "boolean isVoWiFiSettingEnabled(int)",
    "225": "void setVoWiFiSettingEnabled(int, boolean)",
    "226": "boolean isCrossSimCallingEnabledByUser(int)",
    "227": "void setCrossSimCallingEnabled(int, boolean)",
    "228": "boolean isVoWiFiRoamingSettingEnabled(int)",
    "229": "void setVoWiFiRoamingSettingEnabled(int, boolean)",
    "230": "void setVoWiFiNonPersistent(int, boolean, int)",
    "231": "int getVoWiFiModeSetting(int)",
    "232": "void setVoWiFiModeSetting(int, int)",
    "233": "int getVoWiFiRoamingModeSetting(int)",
    "234": "void setVoWiFiRoamingModeSetting(int, int)",
    "235": "void setRttCapabilitySetting(int, boolean)",
    "236": "boolean isTtyOverVolteEnabled(int)",
    "237": "java.util.Map getEmergencyNumberList(java.lang.String, java.lang.String)",
    "238": "boolean isEmergencyNumber(java.lang.String, boolean)",
    "239": "java.util.List getCertsFromCarrierPrivilegeAccessRules(int)",
    "240": "void registerImsProvisioningChangedCallback(int, android.telephony.ims.aidl.IImsConfigCallback)",
    "241": "void unregisterImsProvisioningChangedCallback(int, android.telephony.ims.aidl.IImsConfigCallback)",
    "242": "void registerFeatureProvisioningChangedCallback(int, android.telephony.ims.aidl.IFeatureProvisioningCallback)",
    "243": "void unregisterFeatureProvisioningChangedCallback(int, android.telephony.ims.aidl.IFeatureProvisioningCallback)",
    "244": "void setImsProvisioningStatusForCapability(int, int, int, boolean)",
    "245": "boolean getImsProvisioningStatusForCapability(int, int, int)",
    "246": "boolean getRcsProvisioningStatusForCapability(int, int, int)",
    "247": "void setRcsProvisioningStatusForCapability(int, int, int, boolean)",
    "248": "int getImsProvisioningInt(int, int)",
    "249": "java.lang.String getImsProvisioningString(int, int)",
    "250": "int setImsProvisioningInt(int, int, int)",
    "251": "int setImsProvisioningString(int, int, java.lang.String)",
    "252": "void startEmergencyCallbackMode()",
    "253": "void updateEmergencyNumberListTestMode(int, android.telephony.emergency.EmergencyNumber)",
    "254": "java.util.List getEmergencyNumberListTestMode()",
    "255": "int getEmergencyNumberDbVersion(int)",
    "256": "void notifyOtaEmergencyNumberDbInstalled()",
    "257": "void updateOtaEmergencyNumberDbFilePath(android.os.ParcelFileDescriptor)",
    "258": "void resetOtaEmergencyNumberDbFilePath()",
    "259": "boolean enableModemForSlot(int, boolean)",
    "260": "void setMultiSimCarrierRestriction(boolean)",
    "261": "int isMultiSimSupported(java.lang.String, java.lang.String)",
    "262": "void switchMultiSimConfig(int)",
    "263": "boolean doesSwitchMultiSimConfigTriggerReboot(int, java.lang.String, java.lang.String)",
    "264": "java.util.List getSlotsMapping(java.lang.String)",
    "265": "int getRadioHalVersion()",
    "266": "int getHalVersion(int)",
    "267": "java.lang.String getCurrentPackageName()",
    "268": "boolean isApplicationOnUicc(int, int)",
    "269": "boolean isModemEnabledForSlot(int, java.lang.String, java.lang.String)",
    "270": "boolean isDataEnabledForApn(int, int, java.lang.String)",
    "271": "boolean isApnMetered(int, int)",
    "272": "void setSystemSelectionChannels(java.util.List, int, com.android.internal.telephony.IBooleanConsumer)",
    "273": "java.util.List getSystemSelectionChannels(int)",
    "274": "boolean isMvnoMatched(int, int, java.lang.String)",
    "275": "void enqueueSmsPickResult(java.lang.String, java.lang.String, com.android.internal.telephony.IIntegerConsumer)",
    "276": "void showSwitchToManagedProfileDialog()",
    "277": "java.lang.String getMmsUserAgent(int)",
    "278": "java.lang.String getMmsUAProfUrl(int)",
    "279": "void setMobileDataPolicyEnabled(int, int, boolean)",
    "280": "boolean isMobileDataPolicyEnabled(int, int)",
    "281": "void setCepEnabled(boolean)",
    "282": "void notifyRcsAutoConfigurationReceived(int, [B, boolean)",
    "283": "boolean isIccLockEnabled(int)",
    "284": "int setIccLockEnabled(int, boolean, java.lang.String)",
    "285": "int changeIccLockPassword(int, java.lang.String, java.lang.String)",
    "286": "void requestUserActivityNotification()",
    "287": "void userActivity()",
    "288": "java.lang.String getManualNetworkSelectionPlmn(int)",
    "289": "boolean canConnectTo5GInDsdsMode()",
    "290": "java.util.List getEquivalentHomePlmns(int, java.lang.String, java.lang.String)",
    "291": "int setVoNrEnabled(int, boolean)",
    "292": "boolean isVoNrEnabled(int)",
    "293": "int setNrDualConnectivityState(int, int)",
    "294": "boolean isNrDualConnectivityEnabled(int)",
    "295": "boolean isRadioInterfaceCapabilitySupported(java.lang.String)",
    "296": "int sendThermalMitigationRequest(int, android.telephony.ThermalMitigationRequest, java.lang.String)",
    "297": "void bootstrapAuthenticationRequest(int, int, android.net.Uri, android.telephony.gba.UaSecurityProtocolIdentifier, boolean, android.telephony.IBootstrapAuthenticationCallback)",
    "298": "boolean setBoundGbaServiceOverride(int, java.lang.String)",
    "299": "java.lang.String getBoundGbaService(int)",
    "300": "boolean setGbaReleaseTimeOverride(int, int)",
    "301": "int getGbaReleaseTime(int)",
    "302": "void setRcsClientConfiguration(int, android.telephony.ims.RcsClientConfiguration)",
    "303": "boolean isRcsVolteSingleRegistrationCapable(int)",
    "304": "void registerRcsProvisioningCallback(int, android.telephony.ims.aidl.IRcsConfigCallback)",
    "305": "void unregisterRcsProvisioningCallback(int, android.telephony.ims.aidl.IRcsConfigCallback)",
    "306": "void triggerRcsReconfiguration(int)",
    "307": "void setRcsSingleRegistrationTestModeEnabled(boolean)",
    "308": "boolean getRcsSingleRegistrationTestModeEnabled()",
    "309": "void setDeviceSingleRegistrationEnabledOverride(java.lang.String)",
    "310": "boolean getDeviceSingleRegistrationEnabled()",
    "311": "boolean setCarrierSingleRegistrationEnabledOverride(int, java.lang.String)",
    "312": "void sendDeviceToDeviceMessage(int, int)",
    "313": "void setActiveDeviceToDeviceTransport(java.lang.String)",
    "314": "void setDeviceToDeviceForceEnabled(boolean)",
    "315": "boolean getCarrierSingleRegistrationEnabled(int)",
    "316": "boolean setImsFeatureValidationOverride(int, java.lang.String)",
    "317": "boolean getImsFeatureValidationOverride(int)",
    "318": "java.lang.String getMobileProvisioningUrl()",
    "319": "int removeContactFromEab(int, java.lang.String)",
    "320": "java.lang.String getContactFromEab(java.lang.String)",
    "321": "java.lang.String getCapabilityFromEab(java.lang.String)",
    "322": "boolean getDeviceUceEnabled()",
    "323": "void setDeviceUceEnabled(boolean)",
    "324": "android.telephony.ims.RcsContactUceCapability addUceRegistrationOverrideShell(int, java.util.List)",
    "325": "android.telephony.ims.RcsContactUceCapability removeUceRegistrationOverrideShell(int, java.util.List)",
    "326": "android.telephony.ims.RcsContactUceCapability clearUceRegistrationOverrideShell(int)",
    "327": "android.telephony.ims.RcsContactUceCapability getLatestRcsContactUceCapabilityShell(int)",
    "328": "java.lang.String getLastUcePidfXmlShell(int)",
    "329": "boolean removeUceRequestDisallowedStatus(int)",
    "330": "boolean setCapabilitiesRequestTimeout(int, long)",
    "331": "void setSignalStrengthUpdateRequest(int, android.telephony.SignalStrengthUpdateRequest, java.lang.String)",
    "332": "void clearSignalStrengthUpdateRequest(int, android.telephony.SignalStrengthUpdateRequest, java.lang.String)",
    "333": "android.telephony.PhoneCapability getPhoneCapability()",
    "334": "int prepareForUnattendedReboot()",
    "335": "void getSlicingConfig(android.os.ResultReceiver)",
    "336": "boolean isPremiumCapabilityAvailableForPurchase(int, int)",
    "337": "void purchasePremiumCapability(int, com.android.internal.telephony.IIntegerConsumer, int)",
    "338": "void registerImsStateCallback(int, int, com.android.internal.telephony.IImsStateCallback, java.lang.String)",
    "339": "void unregisterImsStateCallback(com.android.internal.telephony.IImsStateCallback)",
    "340": "android.telephony.CellIdentity getLastKnownCellIdentity(int, java.lang.String, java.lang.String)",
    "341": "boolean setModemService(java.lang.String)",
    "342": "java.lang.String getModemService()",
    "343": "boolean isProvisioningRequiredForCapability(int, int, int)",
    "344": "boolean isRcsProvisioningRequiredForCapability(int, int, int)",
    "345": "void setVoiceServiceStateOverride(int, boolean, java.lang.String)",
    "346": "java.lang.String getCarrierServicePackageNameForLogicalSlot(int)",
    "347": "void setRemovableEsimAsDefaultEuicc(boolean, java.lang.String)",
    "348": "boolean isRemovableEsimDefaultEuicc(java.lang.String)",
    "349": "android.content.ComponentName getDefaultRespondViaMessageApplication(int, boolean)",
    "350": "int getSimStateForSlotIndex(int)",
    "351": "void persistEmergencyCallDiagnosticData(java.lang.String, boolean, long, boolean, boolean)",
    "352": "void setNullCipherAndIntegrityEnabled(boolean)",
    "353": "boolean isNullCipherAndIntegrityPreferenceEnabled()",
    "354": "java.util.List getCellBroadcastIdRanges(int)",
    "355": "void setCellBroadcastIdRanges(int, java.util.List, com.android.internal.telephony.IIntegerConsumer)",
    "356": "boolean isDomainSelectionSupported()",
    "357": "void getCarrierRestrictionStatus(com.android.internal.telephony.IIntegerConsumer, java.lang.String)",
    "358": "void requestSatelliteEnabled(int, boolean, boolean, com.android.internal.telephony.IIntegerConsumer)",
    "359": "void requestIsSatelliteEnabled(int, android.os.ResultReceiver)",
    "360": "void requestIsDemoModeEnabled(int, android.os.ResultReceiver)",
    "361": "void requestIsSatelliteSupported(int, android.os.ResultReceiver)",
    "362": "void requestSatelliteCapabilities(int, android.os.ResultReceiver)",
    "363": "void startSatelliteTransmissionUpdates(int, com.android.internal.telephony.IIntegerConsumer, android.telephony.satellite.ISatelliteTransmissionUpdateCallback)",
    "364": "void stopSatelliteTransmissionUpdates(int, com.android.internal.telephony.IIntegerConsumer, android.telephony.satellite.ISatelliteTransmissionUpdateCallback)",
    "365": "android.os.ICancellationSignal provisionSatelliteService(int, java.lang.String, [B, com.android.internal.telephony.IIntegerConsumer)",
    "366": "void deprovisionSatelliteService(int, java.lang.String, com.android.internal.telephony.IIntegerConsumer)",
    "367": "int registerForSatelliteProvisionStateChanged(int, android.telephony.satellite.ISatelliteProvisionStateCallback)",
    "368": "void unregisterForSatelliteProvisionStateChanged(int, android.telephony.satellite.ISatelliteProvisionStateCallback)",
    "369": "void requestIsSatelliteProvisioned(int, android.os.ResultReceiver)",
    "370": "int registerForSatelliteModemStateChanged(int, android.telephony.satellite.ISatelliteStateCallback)",
    "371": "void unregisterForSatelliteModemStateChanged(int, android.telephony.satellite.ISatelliteStateCallback)",
    "372": "int registerForSatelliteDatagram(int, android.telephony.satellite.ISatelliteDatagramCallback)",
    "373": "void unregisterForSatelliteDatagram(int, android.telephony.satellite.ISatelliteDatagramCallback)",
    "374": "void pollPendingSatelliteDatagrams(int, com.android.internal.telephony.IIntegerConsumer)",
    "375": "void sendSatelliteDatagram(int, int, android.telephony.satellite.SatelliteDatagram, boolean, com.android.internal.telephony.IIntegerConsumer)",
    "376": "void requestIsSatelliteCommunicationAllowedForCurrentLocation(int, android.os.ResultReceiver)",
    "377": "void requestTimeForNextSatelliteVisibility(int, android.os.ResultReceiver)",
    "378": "void onDeviceAlignedWithSatellite(int, boolean)",
    "379": "boolean setSatelliteServicePackageName(java.lang.String)",
    "380": "boolean setSatelliteGatewayServicePackageName(java.lang.String)",
    "381": "boolean setSatelliteListeningTimeoutDuration(long)",
    "382": "boolean setSatellitePointingUiClassName(java.lang.String, java.lang.String)",
    "383": "boolean setSatelliteDeviceAlignedTimeoutDuration(long)",
    "384": "java.util.List getShaIdFromAllowList(java.lang.String, int)"
  },
  "com.android.internal.telephony.ISub": {
    "1": "java.util.List getAllSubInfoList(java.lang.String, java.lang.String)",
    "2": "android.telephony.SubscriptionInfo getActiveSubscriptionInfo(int, java.lang.String, java.lang.String)",
    "3": "android.telephony.SubscriptionInfo getActiveSubscriptionInfoForIccId(java.lang.String, java.lang.String, java.lang.String)",
    "4": "android.telephony.SubscriptionInfo getActiveSubscriptionInfoForSimSlotIndex(int, java.lang.String, java.lang.String)",
    "5": "java.util.List getActiveSubscriptionInfoList(java.lang.String, java.lang.String)",
    "6": "int getActiveSubInfoCount(java.lang.String, java.lang.String)",
    "7": "int getActiveSubInfoCountMax()",
    "8": "java.util.List getAvailableSubscriptionInfoList(java.lang.String, java.lang.String)",
    "9": "java.util.List getAccessibleSubscriptionInfoList(java.lang.String)",
    "10": "void requestEmbeddedSubscriptionInfoListRefresh(int)",
    "11": "int addSubInfo(java.lang.String, java.lang.String, int, int)",
    "12": "boolean removeSubInfo(java.lang.String, int)",
    "13": "int setIconTint(int, int)",
    "14": "int setDisplayNameUsingSrc(java.lang.String, int, int)",
    "15": "int setDisplayNumber(java.lang.String, int)",
    "16": "int setDataRoaming(int, int)",
    "17": "int setOpportunistic(boolean, int, java.lang.String)",
    "18": "android.os.ParcelUuid createSubscriptionGroup([I, java.lang.String)",
    "19": "void setPreferredDataSubscriptionId(int, boolean, com.android.internal.telephony.ISetOpportunisticDataCallback)",
    "20": "int getPreferredDataSubscriptionId()",
    "21": "java.util.List getOpportunisticSubscriptions(java.lang.String, java.lang.String)",
    "22": "void removeSubscriptionsFromGroup([I, android.os.ParcelUuid, java.lang.String)",
    "23": "void addSubscriptionsIntoGroup([I, android.os.ParcelUuid, java.lang.String)",
    "24": "java.util.List getSubscriptionsInGroup(android.os.ParcelUuid, java.lang.String, java.lang.String)",
    "25": "int getSlotIndex(int)",
    "26": "int getSubId(int)",
    "27": "int getDefaultSubId()",
    "28": "int getPhoneId(int)",
    "29": "int getDefaultDataSubId()",
    "30": "void setDefaultDataSubId(int)",
    "31": "int getDefaultVoiceSubId()",
    "32": "void setDefaultVoiceSubId(int)",
    "33": "int getDefaultSmsSubId()",
    "34": "void setDefaultSmsSubId(int)",
    "35": "[I getActiveSubIdList(boolean)",
    "36": "void setSubscriptionProperty(int, java.lang.String, java.lang.String)",
    "37": "java.lang.String getSubscriptionProperty(int, java.lang.String, java.lang.String, java.lang.String)",
    "38": "boolean isSubscriptionEnabled(int)",
    "39": "int getEnabledSubscriptionId(int)",
    "40": "boolean isActiveSubId(int, java.lang.String, java.lang.String)",
    "41": "int getActiveDataSubscriptionId()",
    "42": "boolean canDisablePhysicalSubscription()",
    "43": "void setUiccApplicationsEnabled(boolean, int)",
    "44": "int setDeviceToDeviceStatusSharing(int, int)",
    "45": "int setDeviceToDeviceStatusSharingContacts(java.lang.String, int)",
    "46": "java.lang.String getPhoneNumber(int, int, java.lang.String, java.lang.String)",
    "47": "java.lang.String getPhoneNumberFromFirstAvailableSource(int, java.lang.String, java.lang.String)",
    "48": "void setPhoneNumber(int, int, java.lang.String, java.lang.String, java.lang.String)",
    "49": "int setUsageSetting(int, int, java.lang.String)",
    "50": "int setSubscriptionUserHandle(android.os.UserHandle, int)",
    "51": "android.os.UserHandle getSubscriptionUserHandle(int)",
    "52": "boolean isSubscriptionAssociatedWithUser(int, android.os.UserHandle)",
    "53": "java.util.List getSubscriptionInfoListAssociatedWithUser(android.os.UserHandle)",
    "54": "void restoreAllSimSpecificSettingsFromBackup([B)"
  },
  "android.net.vcn.IVcnManagementService": {
    "1": "void setVcnConfig(android.os.ParcelUuid, android.net.vcn.VcnConfig, java.lang.String)",
    "2": "void clearVcnConfig(android.os.ParcelUuid, java.lang.String)",
    "3": "java.util.List getConfiguredSubscriptionGroups(java.lang.String)",
    "4": "void addVcnUnderlyingNetworkPolicyListener(android.net.vcn.IVcnUnderlyingNetworkPolicyListener)",
    "5": "void removeVcnUnderlyingNetworkPolicyListener(android.net.vcn.IVcnUnderlyingNetworkPolicyListener)",
    "6": "android.net.vcn.VcnUnderlyingNetworkPolicy getUnderlyingNetworkPolicy(android.net.NetworkCapabilities, android.net.LinkProperties)",
    "7": "void registerVcnStatusCallback(android.os.ParcelUuid, android.net.vcn.IVcnStatusCallback, java.lang.String)",
    "8": "void unregisterVcnStatusCallback(android.net.vcn.IVcnStatusCallback)"
  },
  "android.app.usage.IStorageStatsManager": {
    "1": "boolean isQuotaSupported(java.lang.String, java.lang.String)",
    "2": "boolean isReservedSupported(java.lang.String, java.lang.String)",
    "3": "long getTotalBytes(java.lang.String, java.lang.String)",
    "4": "long getFreeBytes(java.lang.String, java.lang.String)",
    "5": "long getCacheBytes(java.lang.String, java.lang.String)",
    "6": "long getCacheQuotaBytes(java.lang.String, int, java.lang.String)",
    "7": "android.app.usage.StorageStats queryStatsForPackage(java.lang.String, java.lang.String, int, java.lang.String)",
    "8": "android.app.usage.StorageStats queryStatsForUid(java.lang.String, int, java.lang.String)",
    "9": "android.app.usage.StorageStats queryStatsForUser(java.lang.String, int, java.lang.String)",
    "10": "android.app.usage.ExternalStorageStats queryExternalStatsForUser(java.lang.String, int, java.lang.String)",
    "11": "android.content.pm.ParceledListSlice queryCratesForPackage(java.lang.String, java.lang.String, int, java.lang.String)",
    "12": "android.content.pm.ParceledListSlice queryCratesForUid(java.lang.String, int, java.lang.String)",
    "13": "android.content.pm.ParceledListSlice queryCratesForUser(java.lang.String, int, java.lang.String)"
  },
  "android.content.pm.IPackageManagerNative": {
    "1": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5",
    "6": "6",
    "7": "7",
    "8": "8",
    "9": "9",
    "10": "10",
    "11": "11",
    "12": "12",
    "13": "13",
    "14": "14",
    "15": "15"
  },
  "android.app.timezonedetector.ITimeZoneDetectorService": {
    "1": "android.app.time.TimeZoneCapabilitiesAndConfig getCapabilitiesAndConfig()",
    "2": "void addListener(android.app.time.ITimeZoneDetectorListener)",
    "3": "void removeListener(android.app.time.ITimeZoneDetectorListener)",
    "4": "boolean updateConfiguration(android.app.time.TimeZoneConfiguration)",
    "5": "android.app.time.TimeZoneState getTimeZoneState()",
    "6": "boolean confirmTimeZone(java.lang.String)",
    "7": "boolean setManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)",
    "8": "boolean suggestManualTimeZone(android.app.timezonedetector.ManualTimeZoneSuggestion)",
    "9": "void suggestTelephonyTimeZone(android.app.timezonedetector.TelephonyTimeZoneSuggestion)"
  },
  "android.permission.ILegacyPermissionManager": {
    "1": "int checkDeviceIdentifierAccess(java.lang.String, java.lang.String, java.lang.String, int, int)",
    "2": "int checkPhoneNumberAccess(java.lang.String, java.lang.String, java.lang.String, int, int)",
    "3": "void grantDefaultPermissionsToEnabledCarrierApps([Ljava.lang.String;, int)",
    "4": "void grantDefaultPermissionsToEnabledImsServices([Ljava.lang.String;, int)",
    "5": "void grantDefaultPermissionsToEnabledTelephonyDataServices([Ljava.lang.String;, int)",
    "6": "void revokeDefaultPermissionsFromDisabledTelephonyDataServices([Ljava.lang.String;, int)",
    "7": "void grantDefaultPermissionsToActiveLuiApp(java.lang.String, int)",
    "8": "void revokeDefaultPermissionsFromLuiApps([Ljava.lang.String;, int)",
    "9": "void grantDefaultPermissionsToCarrierServiceApp(java.lang.String, int)"
  },
  "android.app.people.IPeopleManager": {
    "1": "android.app.people.ConversationChannel getConversation(java.lang.String, int, java.lang.String)",
    "2": "android.content.pm.ParceledListSlice getRecentConversations()",
    "3": "void removeRecentConversation(java.lang.String, int, java.lang.String)",
    "4": "void removeAllRecentConversations()",
    "5": "boolean isConversation(java.lang.String, int, java.lang.String)",
    "6": "long getLastInteraction(java.lang.String, int, java.lang.String)",
    "7": "void addOrUpdateStatus(java.lang.String, int, java.lang.String, android.app.people.ConversationStatus)",
    "8": "void clearStatus(java.lang.String, int, java.lang.String, java.lang.String)",
    "9": "void clearStatuses(java.lang.String, int, java.lang.String)",
    "10": "android.content.pm.ParceledListSlice getStatuses(java.lang.String, int, java.lang.String)",
    "11": "void registerConversationListener(java.lang.String, int, java.lang.String, android.app.people.IConversationListener)",
    "12": "void unregisterConversationListener(android.app.people.IConversationListener)"
  },
  "android.content.pm.IDataLoaderManager": {
    "1": "boolean bindToDataLoader(int, android.content.pm.DataLoaderParamsParcel, long, android.content.pm.IDataLoaderStatusListener)",
    "2": "android.content.pm.IDataLoader getDataLoader(int)",
    "3": "void unbindFromDataLoader(int)"
  },
  "android.content.pm.IPackageManager": {
    "1": "void checkPackageStartable(java.lang.String, int)",
    "2": "boolean isPackageAvailable(java.lang.String, int)",
    "3": "android.content.pm.PackageInfo getPackageInfo(java.lang.String, long, int)",
    "4": "android.content.pm.PackageInfo getPackageInfoVersioned(android.content.pm.VersionedPackage, long, int)",
    "5": "int getPackageUid(java.lang.String, long, int)",
    "6": "[I getPackageGids(java.lang.String, long, int)",
    "7": "[Ljava.lang.String; currentToCanonicalPackageNames([Ljava.lang.String;)",
    "8": "[Ljava.lang.String; canonicalToCurrentPackageNames([Ljava.lang.String;)",
    "9": "android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, long, int)",
    "10": "int getTargetSdkVersion(java.lang.String)",
    "11": "android.content.pm.ActivityInfo getActivityInfo(android.content.ComponentName, long, int)",
    "12": "boolean activitySupportsIntentAsUser(android.content.ComponentName, android.content.Intent, java.lang.String, int)",
    "13": "android.content.pm.ActivityInfo getReceiverInfo(android.content.ComponentName, long, int)",
    "14": "android.content.pm.ServiceInfo getServiceInfo(android.content.ComponentName, long, int)",
    "15": "android.content.pm.ProviderInfo getProviderInfo(android.content.ComponentName, long, int)",
    "16": "boolean isProtectedBroadcast(java.lang.String)",
    "17": "int checkSignatures(java.lang.String, java.lang.String, int)",
    "18": "int checkUidSignatures(int, int)",
    "19": "java.util.List getAllPackages()",
    "20": "[Ljava.lang.String; getPackagesForUid(int)",
    "21": "java.lang.String getNameForUid(int)",
    "22": "[Ljava.lang.String; getNamesForUids([I)",
    "23": "int getUidForSharedUser(java.lang.String)",
    "24": "int getFlagsForUid(int)",
    "25": "int getPrivateFlagsForUid(int)",
    "26": "boolean isUidPrivileged(int)",
    "27": "android.content.pm.ResolveInfo resolveIntent(android.content.Intent, java.lang.String, long, int)",
    "28": "android.content.pm.ResolveInfo findPersistentPreferredActivity(android.content.Intent, int)",
    "29": "boolean canForwardTo(android.content.Intent, java.lang.String, int, int)",
    "30": "android.content.pm.ParceledListSlice queryIntentActivities(android.content.Intent, java.lang.String, long, int)",
    "31": "android.content.pm.ParceledListSlice queryIntentActivityOptions(android.content.ComponentName, [Landroid.content.Intent;, [Ljava.lang.String;, android.content.Intent, java.lang.String, long, int)",
    "32": "android.content.pm.ParceledListSlice queryIntentReceivers(android.content.Intent, java.lang.String, long, int)",
    "33": "android.content.pm.ResolveInfo resolveService(android.content.Intent, java.lang.String, long, int)",
    "34": "android.content.pm.ParceledListSlice queryIntentServices(android.content.Intent, java.lang.String, long, int)",
    "35": "android.content.pm.ParceledListSlice queryIntentContentProviders(android.content.Intent, java.lang.String, long, int)",
    "36": "android.content.pm.ParceledListSlice getInstalledPackages(long, int)",
    "37": "android.os.ParcelFileDescriptor getAppMetadataFd(java.lang.String, int)",
    "38": "android.content.pm.ParceledListSlice getPackagesHoldingPermissions([Ljava.lang.String;, long, int)",
    "39": "android.content.pm.ParceledListSlice getInstalledApplications(long, int)",
    "40": "android.content.pm.ParceledListSlice getPersistentApplications(int)",
    "41": "android.content.pm.ProviderInfo resolveContentProvider(java.lang.String, long, int)",
    "42": "void querySyncProviders(java.util.List, java.util.List)",
    "43": "android.content.pm.ParceledListSlice queryContentProviders(java.lang.String, int, long, java.lang.String)",
    "44": "android.content.pm.InstrumentationInfo getInstrumentationInfoAsUser(android.content.ComponentName, int, int)",
    "45": "android.content.pm.ParceledListSlice queryInstrumentationAsUser(java.lang.String, int, int)",
    "46": "void finishPackageInstall(int, boolean)",
    "47": "void setInstallerPackageName(java.lang.String, java.lang.String)",
    "48": "void relinquishUpdateOwnership(java.lang.String)",
    "49": "void setApplicationCategoryHint(java.lang.String, int, java.lang.String)",
    "50": "void deletePackageAsUser(java.lang.String, int, android.content.pm.IPackageDeleteObserver, int, int)",
    "51": "void deletePackageVersioned(android.content.pm.VersionedPackage, android.content.pm.IPackageDeleteObserver2, int, int)",
    "52": "void deleteExistingPackageAsUser(android.content.pm.VersionedPackage, android.content.pm.IPackageDeleteObserver2, int)",
    "53": "java.lang.String getInstallerPackageName(java.lang.String)",
    "54": "android.content.pm.InstallSourceInfo getInstallSourceInfo(java.lang.String, int)",
    "55": "void resetApplicationPreferences(int)",
    "56": "android.content.pm.ResolveInfo getLastChosenActivity(android.content.Intent, java.lang.String, int)",
    "57": "void setLastChosenActivity(android.content.Intent, java.lang.String, int, android.content.IntentFilter, int, android.content.ComponentName)",
    "58": "void addPreferredActivity(android.content.IntentFilter, int, [Landroid.content.ComponentName;, android.content.ComponentName, int, boolean)",
    "59": "void replacePreferredActivity(android.content.IntentFilter, int, [Landroid.content.ComponentName;, android.content.ComponentName, int)",
    "60": "void clearPackagePreferredActivities(java.lang.String)",
    "61": "int getPreferredActivities(java.util.List, java.util.List, java.lang.String)",
    "62": "void addPersistentPreferredActivity(android.content.IntentFilter, android.content.ComponentName, int)",
    "63": "void clearPackagePersistentPreferredActivities(java.lang.String, int)",
    "64": "void clearPersistentPreferredActivity(android.content.IntentFilter, int)",
    "65": "void addCrossProfileIntentFilter(android.content.IntentFilter, java.lang.String, int, int, int)",
    "66": "boolean removeCrossProfileIntentFilter(android.content.IntentFilter, java.lang.String, int, int, int)",
    "67": "void clearCrossProfileIntentFilters(int, java.lang.String)",
    "68": "[Ljava.lang.String; setDistractingPackageRestrictionsAsUser([Ljava.lang.String;, int, int)",
    "69": "[Ljava.lang.String; setPackagesSuspendedAsUser([Ljava.lang.String;, boolean, android.os.PersistableBundle, android.os.PersistableBundle, android.content.pm.SuspendDialogInfo, java.lang.String, int)",
    "70": "[Ljava.lang.String; getUnsuspendablePackagesForUser([Ljava.lang.String;, int)",
    "71": "boolean isPackageSuspendedForUser(java.lang.String, int)",
    "72": "android.os.Bundle getSuspendedPackageAppExtras(java.lang.String, int)",
    "73": "[B getPreferredActivityBackup(int)",
    "74": "void restorePreferredActivities([B, int)",
    "75": "[B getDefaultAppsBackup(int)",
    "76": "void restoreDefaultApps([B, int)",
    "77": "[B getDomainVerificationBackup(int)",
    "78": "void restoreDomainVerification([B, int)",
    "79": "android.content.ComponentName getHomeActivities(java.util.List)",
    "80": "void setHomeActivity(android.content.ComponentName, int)",
    "81": "void overrideLabelAndIcon(android.content.ComponentName, java.lang.String, int, int)",
    "82": "void restoreLabelAndIcon(android.content.ComponentName, int)",
    "83": "void setComponentEnabledSetting(android.content.ComponentName, int, int, int, java.lang.String)",
    "84": "void setComponentEnabledSettings(java.util.List, int, java.lang.String)",
    "85": "int getComponentEnabledSetting(android.content.ComponentName, int)",
    "86": "void setApplicationEnabledSetting(java.lang.String, int, int, int, java.lang.String)",
    "87": "int getApplicationEnabledSetting(java.lang.String, int)",
    "88": "void logAppProcessStartIfNeeded(java.lang.String, java.lang.String, int, java.lang.String, java.lang.String, int)",
    "89": "void flushPackageRestrictionsAsUser(int)",
    "90": "void setPackageStoppedState(java.lang.String, boolean, int)",
    "91": "void freeStorageAndNotify(java.lang.String, long, int, android.content.pm.IPackageDataObserver)",
    "92": "void freeStorage(java.lang.String, long, int, android.content.IntentSender)",
    "93": "void deleteApplicationCacheFiles(java.lang.String, android.content.pm.IPackageDataObserver)",
    "94": "void deleteApplicationCacheFilesAsUser(java.lang.String, int, android.content.pm.IPackageDataObserver)",
    "95": "void clearApplicationUserData(java.lang.String, android.content.pm.IPackageDataObserver, int)",
    "96": "void clearApplicationProfileData(java.lang.String)",
    "97": "void getPackageSizeInfo(java.lang.String, int, android.content.pm.IPackageStatsObserver)",
    "98": "[Ljava.lang.String; getSystemSharedLibraryNames()",
    "99": "android.content.pm.ParceledListSlice getSystemAvailableFeatures()",
    "100": "boolean hasSystemFeature(java.lang.String, int)",
    "101": "java.util.List getInitialNonStoppedSystemPackages()",
    "102": "void enterSafeMode()",
    "103": "boolean isSafeMode()",
    "104": "boolean hasSystemUidErrors()",
    "105": "void notifyPackageUse(java.lang.String, int)",
    "106": "void notifyDexLoad(java.lang.String, java.util.Map, java.lang.String)",
    "107": "void registerDexModule(java.lang.String, java.lang.String, boolean, android.content.pm.IDexModuleRegisterCallback)",
    "108": "boolean performDexOptMode(java.lang.String, boolean, java.lang.String, boolean, boolean, java.lang.String)",
    "109": "boolean performDexOptSecondary(java.lang.String, java.lang.String, boolean)",
    "110": "int getMoveStatus(int)",
    "111": "void registerMoveCallback(android.content.pm.IPackageMoveObserver)",
    "112": "void unregisterMoveCallback(android.content.pm.IPackageMoveObserver)",
    "113": "int movePackage(java.lang.String, java.lang.String)",
    "114": "int movePrimaryStorage(java.lang.String)",
    "115": "boolean setInstallLocation(int)",
    "116": "int getInstallLocation()",
    "117": "int installExistingPackageAsUser(java.lang.String, int, int, int, java.util.List)",
    "118": "void verifyPendingInstall(int, int)",
    "119": "void extendVerificationTimeout(int, int, long)",
    "120": "void verifyIntentFilter(int, int, java.util.List)",
    "121": "int getIntentVerificationStatus(java.lang.String, int)",
    "122": "boolean updateIntentVerificationStatus(java.lang.String, int, int)",
    "123": "android.content.pm.ParceledListSlice getIntentFilterVerifications(java.lang.String)",
    "124": "android.content.pm.ParceledListSlice getAllIntentFilters(java.lang.String)",
    "125": "android.content.pm.VerifierDeviceIdentity getVerifierDeviceIdentity()",
    "126": "boolean isFirstBoot()",
    "127": "boolean isDeviceUpgrading()",
    "128": "boolean isStorageLow()",
    "129": "boolean setApplicationHiddenSettingAsUser(java.lang.String, boolean, int)",
    "130": "boolean getApplicationHiddenSettingAsUser(java.lang.String, int)",
    "131": "void setSystemAppHiddenUntilInstalled(java.lang.String, boolean)",
    "132": "boolean setSystemAppInstallState(java.lang.String, boolean, int)",
    "133": "android.content.pm.IPackageInstaller getPackageInstaller()",
    "134": "boolean setBlockUninstallForUser(java.lang.String, boolean, int)",
    "135": "boolean getBlockUninstallForUser(java.lang.String, int)",
    "136": "android.content.pm.KeySet getKeySetByAlias(java.lang.String, java.lang.String)",
    "137": "android.content.pm.KeySet getSigningKeySet(java.lang.String)",
    "138": "boolean isPackageSignedByKeySet(java.lang.String, android.content.pm.KeySet)",
    "139": "boolean isPackageSignedByKeySetExactly(java.lang.String, android.content.pm.KeySet)",
    "140": "java.lang.String getPermissionControllerPackageName()",
    "141": "java.lang.String getSdkSandboxPackageName()",
    "142": "android.content.pm.ParceledListSlice getInstantApps(int)",
    "143": "[B getInstantAppCookie(java.lang.String, int)",
    "144": "boolean setInstantAppCookie(java.lang.String, [B, int)",
    "145": "android.graphics.Bitmap getInstantAppIcon(java.lang.String, int)",
    "146": "boolean isInstantApp(java.lang.String, int)",
    "147": "boolean setRequiredForSystemUser(java.lang.String, boolean)",
    "148": "void setUpdateAvailable(java.lang.String, boolean)",
    "149": "java.lang.String getServicesSystemSharedLibraryPackageName()",
    "150": "java.lang.String getSharedSystemSharedLibraryPackageName()",
    "151": "android.content.pm.ChangedPackages getChangedPackages(int, int)",
    "152": "boolean isPackageDeviceAdminOnAnyUser(java.lang.String)",
    "153": "int getInstallReason(java.lang.String, int)",
    "154": "android.content.pm.ParceledListSlice getSharedLibraries(java.lang.String, long, int)",
    "155": "android.content.pm.ParceledListSlice getDeclaredSharedLibraries(java.lang.String, long, int)",
    "156": "boolean canRequestPackageInstalls(java.lang.String, int)",
    "157": "void deletePreloadsFileCache()",
    "158": "android.content.ComponentName getInstantAppResolverComponent()",
    "159": "android.content.ComponentName getInstantAppResolverSettingsComponent()",
    "160": "android.content.ComponentName getInstantAppInstallerComponent()",
    "161": "java.lang.String getInstantAppAndroidId(java.lang.String, int)",
    "162": "android.content.pm.dex.IArtManager getArtManager()",
    "163": "void setHarmfulAppWarning(java.lang.String, java.lang.CharSequence, int)",
    "164": "java.lang.CharSequence getHarmfulAppWarning(java.lang.String, int)",
    "165": "boolean hasSigningCertificate(java.lang.String, [B, int)",
    "166": "boolean hasUidSigningCertificate(int, [B, int)",
    "167": "java.lang.String getDefaultTextClassifierPackageName()",
    "168": "java.lang.String getSystemTextClassifierPackageName()",
    "169": "java.lang.String getAttentionServicePackageName()",
    "170": "java.lang.String getRotationResolverPackageName()",
    "171": "java.lang.String getWellbeingPackageName()",
    "172": "java.lang.String getAppPredictionServicePackageName()",
    "173": "java.lang.String getSystemCaptionsServicePackageName()",
    "174": "java.lang.String getSetupWizardPackageName()",
    "175": "java.lang.String getIncidentReportApproverPackageName()",
    "176": "boolean isPackageStateProtected(java.lang.String, int)",
    "177": "void sendDeviceCustomizationReadyBroadcast()",
    "178": "java.util.List getInstalledModules(int)",
    "179": "android.content.pm.ModuleInfo getModuleInfo(java.lang.String, int)",
    "180": "int getRuntimePermissionsVersion(int)",
    "181": "void setRuntimePermissionsVersion(int, int)",
    "182": "void notifyPackagesReplacedReceived([Ljava.lang.String;)",
    "183": "void requestPackageChecksums(java.lang.String, boolean, int, int, java.util.List, android.content.pm.IOnChecksumsReadyListener, int)",
    "184": "android.content.IntentSender getLaunchIntentSenderForPackage(java.lang.String, java.lang.String, java.lang.String, int)",
    "185": "[Ljava.lang.String; getAppOpPermissionPackages(java.lang.String, int)",
    "186": "android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)",
    "187": "boolean addPermission(android.content.pm.PermissionInfo)",
    "188": "boolean addPermissionAsync(android.content.pm.PermissionInfo)",
    "189": "void removePermission(java.lang.String)",
    "190": "int checkPermission(java.lang.String, java.lang.String, int)",
    "191": "void grantRuntimePermission(java.lang.String, java.lang.String, int)",
    "192": "int checkUidPermission(java.lang.String, int)",
    "193": "void setMimeGroup(java.lang.String, java.lang.String, java.util.List)",
    "194": "java.lang.String getSplashScreenTheme(java.lang.String, int)",
    "195": "void setSplashScreenTheme(java.lang.String, java.lang.String, int)",
    "196": "java.util.List getMimeGroup(java.lang.String, java.lang.String)",
    "197": "boolean isAutoRevokeWhitelisted(java.lang.String)",
    "198": "void makeProviderVisible(int, java.lang.String)",
    "199": "void makeUidVisible(int, int)",
    "200": "android.os.IBinder getHoldLockToken()",
    "201": "void holdLock(android.os.IBinder, int)",
    "202": "android.content.pm.PackageManager$Property getPropertyAsUser(java.lang.String, java.lang.String, java.lang.String, int)",
    "203": "android.content.pm.ParceledListSlice queryProperty(java.lang.String, int)",
    "204": "void setKeepUninstalledPackages(java.util.List)",
    "205": "[Z canPackageQuery(java.lang.String, [Ljava.lang.String;, int)",
    "206": "boolean waitForHandler(long, boolean)"
  },
  "android.net.INetworkPolicyManager": {
    "1": "void setUidPolicy(int, int)",
    "2": "void addUidPolicy(int, int)",
    "3": "void removeUidPolicy(int, int)",
    "4": "int getUidPolicy(int)",
    "5": "[I getUidsWithPolicy(int)",
    "6": "void registerListener(android.net.INetworkPolicyListener)",
    "7": "void unregisterListener(android.net.INetworkPolicyListener)",
    "8": "void setNetworkPolicies([Landroid.net.NetworkPolicy;)",
    "9": "[Landroid.net.NetworkPolicy; getNetworkPolicies(java.lang.String)",
    "10": "void snoozeLimit(android.net.NetworkTemplate)",
    "11": "void setRestrictBackground(boolean)",
    "12": "boolean getRestrictBackground()",
    "13": "int getRestrictBackgroundByCaller()",
    "14": "int getRestrictBackgroundStatus(int)",
    "15": "void setDeviceIdleMode(boolean)",
    "16": "void setWifiMeteredOverride(java.lang.String, int)",
    "17": "int getMultipathPreference(android.net.Network)",
    "18": "android.telephony.SubscriptionPlan getSubscriptionPlan(android.net.NetworkTemplate)",
    "19": "void notifyStatsProviderWarningOrLimitReached()",
    "20": "[Landroid.telephony.SubscriptionPlan; getSubscriptionPlans(int, java.lang.String)",
    "21": "void setSubscriptionPlans(int, [Landroid.telephony.SubscriptionPlan;, long, java.lang.String)",
    "22": "java.lang.String getSubscriptionPlansOwner(int)",
    "23": "void setSubscriptionOverride(int, int, int, [I, long, java.lang.String)",
    "24": "void factoryReset(java.lang.String)",
    "25": "boolean isUidNetworkingBlocked(int, boolean)",
    "26": "boolean isUidRestrictedOnMeteredNetworks(int)"
  },
  "android.os.IExternalVibratorService": {
    "1": "int onExternalVibrationStart(android.os.ExternalVibration)",
    "2": "void onExternalVibrationStop(android.os.ExternalVibration)"
  },
  "android.app.blob.IBlobStoreManager": {
    "1": "long createSession(android.app.blob.BlobHandle, java.lang.String)",
    "2": "android.app.blob.IBlobStoreSession openSession(long, java.lang.String)",
    "3": "android.os.ParcelFileDescriptor openBlob(android.app.blob.BlobHandle, java.lang.String)",
    "4": "void abandonSession(long, java.lang.String)",
    "5": "void acquireLease(android.app.blob.BlobHandle, int, java.lang.CharSequence, long, java.lang.String)",
    "6": "void releaseLease(android.app.blob.BlobHandle, java.lang.String)",
    "7": "void releaseAllLeases(java.lang.String)",
    "8": "long getRemainingLeaseQuotaBytes(java.lang.String)",
    "9": "void waitForIdle(android.os.RemoteCallback)",
    "10": "java.util.List queryBlobsForUser(int)",
    "11": "void deleteBlob(long)",
    "12": "java.util.List getLeasedBlobs(java.lang.String)",
    "13": "android.app.blob.LeaseInfo getLeaseInfo(android.app.blob.BlobHandle, java.lang.String)"
  },
  "android.app.search.ISearchUiManager": {
    "1": "void createSearchSession(android.app.search.SearchContext, android.app.search.SearchSessionId, android.os.IBinder)",
    "2": "void query(android.app.search.SearchSessionId, android.app.search.Query, android.app.search.ISearchCallback)",
    "3": "void notifyEvent(android.app.search.SearchSessionId, android.app.search.Query, android.app.search.SearchTargetEvent)",
    "4": "void registerEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId, android.app.search.ISearchCallback)",
    "5": "void unregisterEmptyQueryResultUpdateCallback(android.app.search.SearchSessionId, android.app.search.ISearchCallback)",
    "6": "void destroySearchSession(android.app.search.SearchSessionId)"
  },
  "android.app.IAlarmManager": {
    "1": "void set(java.lang.String, int, long, long, long, int, android.app.PendingIntent, android.app.IAlarmListener, java.lang.String, android.os.WorkSource, android.app.AlarmManager$AlarmClockInfo)",
    "2": "boolean setTime(long)",
    "3": "void setTimeZone(java.lang.String)",
    "4": "void remove(android.app.PendingIntent, android.app.IAlarmListener)",
    "5": "void removeAll(java.lang.String)",
    "6": "long getNextWakeFromIdleTime()",
    "7": "android.app.AlarmManager$AlarmClockInfo getNextAlarmClock(int)",
    "8": "boolean canScheduleExactAlarms(java.lang.String)",
    "9": "boolean hasScheduleExactAlarm(java.lang.String, int)",
    "10": "int getConfigVersion()"
  },
  "android.app.IActivityTaskManager": {
    "1": "int startActivity(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle)",
    "2": "int startActivities(android.app.IApplicationThread, java.lang.String, java.lang.String, [Landroid.content.Intent;, [Ljava.lang.String;, android.os.IBinder, android.os.Bundle, int)",
    "3": "int startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int)",
    "4": "boolean startNextMatchingActivity(android.os.IBinder, android.content.Intent, android.os.Bundle)",
    "5": "boolean startDreamActivity(android.content.Intent)",
    "6": "int startActivityIntentSender(android.app.IApplicationThread, android.content.IIntentSender, android.os.IBinder, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, int, android.os.Bundle)",
    "7": "android.app.WaitResult startActivityAndWait(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int)",
    "8": "int startActivityWithConfig(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.content.res.Configuration, android.os.Bundle, int)",
    "9": "int startVoiceActivity(java.lang.String, java.lang.String, int, int, android.content.Intent, java.lang.String, android.service.voice.IVoiceInteractionSession, com.android.internal.app.IVoiceInteractor, int, android.app.ProfilerInfo, android.os.Bundle, int)",
    "10": "java.lang.String getVoiceInteractorPackageName(android.os.IBinder)",
    "11": "int startAssistantActivity(java.lang.String, java.lang.String, int, int, android.content.Intent, java.lang.String, android.os.Bundle, int)",
    "12": "int startActivityFromGameSession(android.app.IApplicationThread, java.lang.String, java.lang.String, int, int, android.content.Intent, int, int)",
    "13": "void startRecentsActivity(android.content.Intent, long, android.view.IRecentsAnimationRunner)",
    "14": "int startActivityFromRecents(int, android.os.Bundle)",
    "15": "int startActivityAsCaller(android.app.IApplicationThread, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, boolean, int)",
    "16": "boolean isActivityStartAllowedOnDisplay(int, android.content.Intent, java.lang.String, int)",
    "17": "void unhandledBack()",
    "18": "android.app.IActivityClientController getActivityClientController()",
    "19": "int getFrontActivityScreenCompatMode()",
    "20": "void setFrontActivityScreenCompatMode(int)",
    "21": "void setFocusedTask(int)",
    "22": "boolean removeTask(int)",
    "23": "void removeAllVisibleRecentTasks()",
    "24": "java.util.List getTasks(int, boolean, boolean, int)",
    "25": "void moveTaskToFront(android.app.IApplicationThread, java.lang.String, int, int, android.os.Bundle)",
    "26": "android.content.pm.ParceledListSlice getRecentTasks(int, int, int)",
    "27": "boolean isTopActivityImmersive()",
    "28": "android.app.ActivityManager$TaskDescription getTaskDescription(int)",
    "29": "void reportAssistContextExtras(android.os.IBinder, android.os.Bundle, android.app.assist.AssistStructure, android.app.assist.AssistContent, android.net.Uri)",
    "30": "void setFocusedRootTask(int)",
    "31": "android.app.ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo()",
    "32": "android.graphics.Rect getTaskBounds(int)",
    "33": "void focusTopTask(int)",
    "34": "void cancelRecentsAnimation(boolean)",
    "35": "void updateLockTaskPackages(int, [Ljava.lang.String;)",
    "36": "boolean isInLockTaskMode()",
    "37": "int getLockTaskModeState()",
    "38": "java.util.List getAppTasks(java.lang.String)",
    "39": "void startSystemLockTaskMode(int)",
    "40": "void stopSystemLockTaskMode()",
    "41": "void finishVoiceTask(android.service.voice.IVoiceInteractionSession)",
    "42": "int addAppTask(android.os.IBinder, android.content.Intent, android.app.ActivityManager$TaskDescription, android.graphics.Bitmap)",
    "43": "android.graphics.Point getAppTaskThumbnailSize()",
    "44": "void releaseSomeActivities(android.app.IApplicationThread)",
    "45": "android.graphics.Bitmap getTaskDescriptionIcon(java.lang.String, int)",
    "46": "void registerTaskStackListener(android.app.ITaskStackListener)",
    "47": "void unregisterTaskStackListener(android.app.ITaskStackListener)",
    "48": "void setTaskResizeable(int, int)",
    "49": "void resizeTask(int, android.graphics.Rect, int)",
    "50": "void moveRootTaskToDisplay(int, int)",
    "51": "void moveTaskToRootTask(int, int, boolean)",
    "52": "void removeRootTasksInWindowingModes([I)",
    "53": "void removeRootTasksWithActivityTypes([I)",
    "54": "java.util.List getAllRootTaskInfos()",
    "55": "android.app.ActivityTaskManager$RootTaskInfo getRootTaskInfo(int, int)",
    "56": "java.util.List getAllRootTaskInfosOnDisplay(int)",
    "57": "android.app.ActivityTaskManager$RootTaskInfo getRootTaskInfoOnDisplay(int, int, int)",
    "58": "void setLockScreenShown(boolean, boolean)",
    "59": "android.os.Bundle getAssistContextExtras(int)",
    "60": "boolean requestAssistContextExtras(int, android.app.IAssistDataReceiver, android.os.Bundle, android.os.IBinder, boolean, boolean)",
    "61": "boolean requestAutofillData(android.app.IAssistDataReceiver, android.os.Bundle, android.os.IBinder, int)",
    "62": "boolean isAssistDataAllowedOnCurrentActivity()",
    "63": "boolean requestAssistDataForTask(android.app.IAssistDataReceiver, int, java.lang.String, java.lang.String)",
    "64": "void keyguardGoingAway(int)",
    "65": "void suppressResizeConfigChanges(boolean)",
    "66": "android.window.IWindowOrganizerController getWindowOrganizerController()",
    "67": "boolean supportsLocalVoiceInteraction()",
    "68": "android.content.pm.ConfigurationInfo getDeviceConfigurationInfo()",
    "69": "void cancelTaskWindowTransition(int)",
    "70": "android.window.TaskSnapshot getTaskSnapshot(int, boolean, boolean)",
    "71": "android.window.TaskSnapshot takeTaskSnapshot(int, boolean)",
    "72": "int getLastResumedActivityUserId()",
    "73": "boolean updateConfiguration(android.content.res.Configuration)",
    "74": "void updateLockTaskFeatures(int, int)",
    "75": "void registerRemoteAnimationForNextActivityStart(java.lang.String, android.view.RemoteAnimationAdapter, android.os.IBinder)",
    "76": "void registerRemoteAnimationsForDisplay(int, android.view.RemoteAnimationDefinition)",
    "77": "void alwaysShowUnsupportedCompileSdkWarning(android.content.ComponentName)",
    "78": "void setVrThread(int)",
    "79": "void setPersistentVrThread(int)",
    "80": "void stopAppSwitches()",
    "81": "void resumeAppSwitches()",
    "82": "void setActivityController(android.app.IActivityController, boolean)",
    "83": "void setVoiceKeepAwake(android.service.voice.IVoiceInteractionSession, boolean)",
    "84": "int getPackageScreenCompatMode(java.lang.String)",
    "85": "void setPackageScreenCompatMode(java.lang.String, int)",
    "86": "boolean getPackageAskScreenCompat(java.lang.String)",
    "87": "void setPackageAskScreenCompat(java.lang.String, boolean)",
    "88": "void clearLaunchParamsForPackages(java.util.List)",
    "89": "void onSplashScreenViewCopyFinished(int, android.window.SplashScreenView$SplashScreenViewParcelable)",
    "90": "void onPictureInPictureStateChanged(android.app.PictureInPictureUiState)",
    "91": "void detachNavigationBarFromApp(android.os.IBinder)",
    "92": "void setRunningRemoteTransitionDelegate(android.app.IApplicationThread)",
    "93": "android.window.BackNavigationInfo startBackNavigation(android.os.RemoteCallback, android.window.BackAnimationAdapter)",
    "94": "void registerScreenCaptureObserver(android.os.IBinder, android.app.IScreenCaptureObserver)",
    "95": "void unregisterScreenCaptureObserver(android.os.IBinder, android.app.IScreenCaptureObserver)"
  },
  "android.media.IResourceManagerService": {
    "1": "void config([Landroid.media.MediaResourcePolicyParcel;)",
    "2": "void addResource(android.media.ClientInfoParcel, android.media.IResourceManagerClient, [Landroid.media.MediaResourceParcel;)",
    "3": "void removeResource(android.media.ClientInfoParcel, [Landroid.media.MediaResourceParcel;)",
    "4": "void removeClient(android.media.ClientInfoParcel)",
    "5": "boolean reclaimResource(android.media.ClientInfoParcel, [Landroid.media.MediaResourceParcel;)",
    "6": "void overridePid(int, int)",
    "7": "void overrideProcessInfo(android.media.IResourceManagerClient, int, int, int)",
    "8": "void markClientForPendingRemoval(android.media.ClientInfoParcel)",
    "9": "void reclaimResourcesFromClientsPendingRemoval(int)",
    "10": "void notifyClientCreated(android.media.ClientInfoParcel)",
    "11": "void notifyClientStarted(android.media.ClientConfigParcel)",
    "12": "void notifyClientStopped(android.media.ClientConfigParcel)",
    "13": "void notifyClientConfigChanged(android.media.ClientConfigParcel)"
  },
  "android.scheduling.IRebootReadinessManager": {
    "1": "void markRebootPending(java.lang.String)",
    "2": "void cancelPendingReboot(java.lang.String)",
    "3": "boolean isReadyToReboot()",
    "4": "void addRequestRebootReadinessStatusListener(android.scheduling.IRequestRebootReadinessStatusListener)",
    "5": "void removeRequestRebootReadinessStatusListener(android.scheduling.IRequestRebootReadinessStatusListener)"
  },
  "android.app.timedetector.ITimeDetectorService": {
    "1": "android.app.time.TimeCapabilitiesAndConfig getCapabilitiesAndConfig()",
    "2": "void addListener(android.app.time.ITimeDetectorListener)",
    "3": "void removeListener(android.app.time.ITimeDetectorListener)",
    "4": "boolean updateConfiguration(android.app.time.TimeConfiguration)",
    "5": "android.app.time.TimeState getTimeState()",
    "6": "boolean confirmTime(android.app.time.UnixEpochTime)",
    "7": "boolean setManualTime(android.app.timedetector.ManualTimeSuggestion)",
    "8": "void suggestExternalTime(android.app.time.ExternalTimeSuggestion)",
    "9": "boolean suggestManualTime(android.app.timedetector.ManualTimeSuggestion)",
    "10": "void suggestTelephonyTime(android.app.timedetector.TelephonyTimeSuggestion)",
    "11": "android.app.time.UnixEpochTime latestNetworkTime()"
  },
  "android.hardware.devicestate.IDeviceStateManager": {
    "1": "android.hardware.devicestate.DeviceStateInfo getDeviceStateInfo()",
    "2": "void registerCallback(android.hardware.devicestate.IDeviceStateManagerCallback)",
    "3": "void requestState(android.os.IBinder, int, int)",
    "4": "void cancelStateRequest()",
    "5": "void requestBaseStateOverride(android.os.IBinder, int, int)",
    "6": "void cancelBaseStateOverride()",
    "7": "void onStateRequestOverlayDismissed(boolean)"
  },
  "android.net.ITetheringConnector": {
    "1": "void tether(java.lang.String, java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "2": "void untether(java.lang.String, java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "3": "void setUsbTethering(boolean, java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "4": "void startTethering(android.net.TetheringRequestParcel, java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "5": "void stopTethering(int, java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "6": "void requestLatestTetheringEntitlementResult(int, android.os.ResultReceiver, boolean, java.lang.String, java.lang.String)",
    "7": "void registerTetheringEventCallback(android.net.ITetheringEventCallback, java.lang.String)",
    "8": "void unregisterTetheringEventCallback(android.net.ITetheringEventCallback, java.lang.String)",
    "9": "void isTetheringSupported(java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "10": "void stopAllTethering(java.lang.String, java.lang.String, android.net.IIntResultListener)",
    "11": "void setPreferTestNetworks(boolean, android.net.IIntResultListener)"
  },
  "android.app.IActivityManager": {
    "1": "android.os.ParcelFileDescriptor openContentUri(java.lang.String)",
    "2": "void registerUidObserver(android.app.IUidObserver, int, int, java.lang.String)",
    "3": "void unregisterUidObserver(android.app.IUidObserver)",
    "4": "android.os.IBinder registerUidObserverForUids(android.app.IUidObserver, int, int, java.lang.String, [I)",
    "5": "void addUidToObserver(android.os.IBinder, java.lang.String, int)",
    "6": "void removeUidFromObserver(android.os.IBinder, java.lang.String, int)",
    "7": "boolean isUidActive(int, java.lang.String)",
    "8": "int getUidProcessState(int, java.lang.String)",
    "9": "int checkPermission(java.lang.String, int, int)",
    "10": "void logFgsApiBegin(int, int, int)",
    "11": "void logFgsApiEnd(int, int, int)",
    "12": "void logFgsApiStateChanged(int, int, int, int)",
    "13": "void handleApplicationCrash(android.os.IBinder, android.app.ApplicationErrorReport$ParcelableCrashInfo)",
    "14": "int startActivity(android.app.IApplicationThread, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle)",
    "15": "int startActivityWithFeature(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle)",
    "16": "void unhandledBack()",
    "17": "boolean finishActivity(android.os.IBinder, int, android.content.Intent, int)",
    "18": "android.content.Intent registerReceiver(android.app.IApplicationThread, java.lang.String, android.content.IIntentReceiver, android.content.IntentFilter, java.lang.String, int, int)",
    "19": "android.content.Intent registerReceiverWithFeature(android.app.IApplicationThread, java.lang.String, java.lang.String, java.lang.String, android.content.IIntentReceiver, android.content.IntentFilter, java.lang.String, int, int)",
    "20": "void unregisterReceiver(android.content.IIntentReceiver)",
    "21": "int broadcastIntent(android.app.IApplicationThread, android.content.Intent, java.lang.String, android.content.IIntentReceiver, int, java.lang.String, android.os.Bundle, [Ljava.lang.String;, int, android.os.Bundle, boolean, boolean, int)",
    "22": "int broadcastIntentWithFeature(android.app.IApplicationThread, java.lang.String, android.content.Intent, java.lang.String, android.content.IIntentReceiver, int, java.lang.String, android.os.Bundle, [Ljava.lang.String;, [Ljava.lang.String;, [Ljava.lang.String;, int, android.os.Bundle, boolean, boolean, int)",
    "23": "void unbroadcastIntent(android.app.IApplicationThread, android.content.Intent, int)",
    "24": "void finishReceiver(android.os.IBinder, int, java.lang.String, android.os.Bundle, boolean, int)",
    "25": "void attachApplication(android.app.IApplicationThread, long)",
    "26": "void finishAttachApplication(long)",
    "27": "java.util.List getTasks(int)",
    "28": "void moveTaskToFront(android.app.IApplicationThread, java.lang.String, int, int, android.os.Bundle)",
    "29": "int getTaskForActivity(android.os.IBinder, boolean)",
    "30": "android.app.ContentProviderHolder getContentProvider(android.app.IApplicationThread, java.lang.String, java.lang.String, int, boolean)",
    "31": "void publishContentProviders(android.app.IApplicationThread, java.util.List)",
    "32": "boolean refContentProvider(android.os.IBinder, int, int)",
    "33": "android.app.PendingIntent getRunningServiceControlPanel(android.content.ComponentName)",
    "34": "android.content.ComponentName startService(android.app.IApplicationThread, android.content.Intent, java.lang.String, boolean, java.lang.String, java.lang.String, int)",
    "35": "int stopService(android.app.IApplicationThread, android.content.Intent, java.lang.String, int)",
    "36": "int bindService(android.app.IApplicationThread, android.os.IBinder, android.content.Intent, java.lang.String, android.app.IServiceConnection, long, java.lang.String, int)",
    "37": "int bindServiceInstance(android.app.IApplicationThread, android.os.IBinder, android.content.Intent, java.lang.String, android.app.IServiceConnection, long, java.lang.String, java.lang.String, int)",
    "38": "void updateServiceGroup(android.app.IServiceConnection, int, int)",
    "39": "boolean unbindService(android.app.IServiceConnection)",
    "40": "void publishService(android.os.IBinder, android.content.Intent, android.os.IBinder)",
    "41": "void setDebugApp(java.lang.String, boolean, boolean)",
    "42": "void setAgentApp(java.lang.String, java.lang.String)",
    "43": "void setAlwaysFinish(boolean)",
    "44": "boolean startInstrumentation(android.content.ComponentName, java.lang.String, int, android.os.Bundle, android.app.IInstrumentationWatcher, android.app.IUiAutomationConnection, int, java.lang.String)",
    "45": "void addInstrumentationResults(android.app.IApplicationThread, android.os.Bundle)",
    "46": "void finishInstrumentation(android.app.IApplicationThread, int, android.os.Bundle)",
    "47": "android.content.res.Configuration getConfiguration()",
    "48": "boolean updateConfiguration(android.content.res.Configuration)",
    "49": "boolean updateMccMncConfiguration(java.lang.String, java.lang.String)",
    "50": "boolean stopServiceToken(android.content.ComponentName, android.os.IBinder, int)",
    "51": "void setProcessLimit(int)",
    "52": "int getProcessLimit()",
    "53": "int checkUriPermission(android.net.Uri, int, int, int, int, android.os.IBinder)",
    "54": "[I checkUriPermissions(java.util.List, int, int, int, int, android.os.IBinder)",
    "55": "void grantUriPermission(android.app.IApplicationThread, java.lang.String, android.net.Uri, int, int)",
    "56": "void revokeUriPermission(android.app.IApplicationThread, java.lang.String, android.net.Uri, int, int)",
    "57": "void setActivityController(android.app.IActivityController, boolean)",
    "58": "void showWaitingForDebugger(android.app.IApplicationThread, boolean)",
    "59": "void signalPersistentProcesses(int)",
    "60": "android.content.pm.ParceledListSlice getRecentTasks(int, int, int)",
    "61": "void serviceDoneExecuting(android.os.IBinder, int, int, int)",
    "62": "android.content.IIntentSender getIntentSender(int, java.lang.String, android.os.IBinder, java.lang.String, int, [Landroid.content.Intent;, [Ljava.lang.String;, int, android.os.Bundle, int)",
    "63": "android.content.IIntentSender getIntentSenderWithFeature(int, java.lang.String, java.lang.String, android.os.IBinder, java.lang.String, int, [Landroid.content.Intent;, [Ljava.lang.String;, int, android.os.Bundle, int)",
    "64": "void cancelIntentSender(android.content.IIntentSender)",
    "65": "android.app.ActivityManager$PendingIntentInfo getInfoForIntentSender(android.content.IIntentSender)",
    "66": "boolean registerIntentSenderCancelListenerEx(android.content.IIntentSender, com.android.internal.os.IResultReceiver)",
    "67": "void unregisterIntentSenderCancelListener(android.content.IIntentSender, com.android.internal.os.IResultReceiver)",
    "68": "void enterSafeMode()",
    "69": "void noteWakeupAlarm(android.content.IIntentSender, android.os.WorkSource, int, java.lang.String, java.lang.String)",
    "70": "void removeContentProvider(android.os.IBinder, boolean)",
    "71": "void setRequestedOrientation(android.os.IBinder, int)",
    "72": "void unbindFinished(android.os.IBinder, android.content.Intent, boolean)",
    "73": "void setProcessImportant(android.os.IBinder, int, boolean, java.lang.String)",
    "74": "void setServiceForeground(android.content.ComponentName, android.os.IBinder, int, android.app.Notification, int, int)",
    "75": "int getForegroundServiceType(android.content.ComponentName, android.os.IBinder)",
    "76": "boolean moveActivityTaskToBack(android.os.IBinder, boolean)",
    "77": "void getMemoryInfo(android.app.ActivityManager$MemoryInfo)",
    "78": "java.util.List getProcessesInErrorState()",
    "79": "boolean clearApplicationUserData(java.lang.String, boolean, android.content.pm.IPackageDataObserver, int)",
    "80": "void stopAppForUser(java.lang.String, int)",
    "81": "boolean registerForegroundServiceObserver(android.app.IForegroundServiceObserver)",
    "82": "void forceStopPackage(java.lang.String, int)",
    "83": "void forceStopPackageEvenWhenStopping(java.lang.String, int)",
    "84": "boolean killPids([I, java.lang.String, boolean)",
    "85": "java.util.List getServices(int, int)",
    "86": "java.util.List getRunningAppProcesses()",
    "87": "android.os.IBinder peekService(android.content.Intent, java.lang.String, java.lang.String)",
    "88": "boolean profileControl(java.lang.String, int, boolean, android.app.ProfilerInfo, int)",
    "89": "boolean shutdown(int)",
    "90": "void stopAppSwitches()",
    "91": "void resumeAppSwitches()",
    "92": "boolean bindBackupAgent(java.lang.String, int, int, int)",
    "93": "void backupAgentCreated(java.lang.String, android.os.IBinder, int)",
    "94": "void unbindBackupAgent(android.content.pm.ApplicationInfo)",
    "95": "int handleIncomingUser(int, int, int, boolean, boolean, java.lang.String, java.lang.String)",
    "96": "void addPackageDependency(java.lang.String)",
    "97": "void killApplication(java.lang.String, int, int, java.lang.String, int)",
    "98": "void closeSystemDialogs(java.lang.String)",
    "99": "[Landroid.os.Debug$MemoryInfo; getProcessMemoryInfo([I)",
    "100": "void killApplicationProcess(java.lang.String, int)",
    "101": "boolean handleApplicationWtf(android.os.IBinder, java.lang.String, boolean, android.app.ApplicationErrorReport$ParcelableCrashInfo, int)",
    "102": "void killBackgroundProcesses(java.lang.String, int)",
    "103": "boolean isUserAMonkey()",
    "104": "java.util.List getRunningExternalApplications()",
    "105": "void finishHeavyWeightApp()",
    "106": "void handleApplicationStrictModeViolation(android.os.IBinder, int, android.os.StrictMode$ViolationInfo)",
    "107": "void registerStrictModeCallback(android.os.IBinder)",
    "108": "boolean isTopActivityImmersive()",
    "109": "void crashApplicationWithType(int, int, java.lang.String, int, java.lang.String, boolean, int)",
    "110": "void crashApplicationWithTypeWithExtras(int, int, java.lang.String, int, java.lang.String, boolean, int, android.os.Bundle)",
    "111": "void getMimeTypeFilterAsync(android.net.Uri, int, android.os.RemoteCallback)",
    "112": "boolean dumpHeap(java.lang.String, int, boolean, boolean, boolean, java.lang.String, android.os.ParcelFileDescriptor, android.os.RemoteCallback)",
    "113": "boolean isUserRunning(int, int)",
    "114": "void setPackageScreenCompatMode(java.lang.String, int)",
    "115": "boolean switchUser(int)",
    "116": "java.lang.String getSwitchingFromUserMessage()",
    "117": "java.lang.String getSwitchingToUserMessage()",
    "118": "void setStopUserOnSwitch(int)",
    "119": "boolean removeTask(int)",
    "120": "void registerProcessObserver(android.app.IProcessObserver)",
    "121": "void unregisterProcessObserver(android.app.IProcessObserver)",
    "122": "boolean isIntentSenderTargetedToPackage(android.content.IIntentSender)",
    "123": "void updatePersistentConfiguration(android.content.res.Configuration)",
    "124": "void updatePersistentConfigurationWithAttribution(android.content.res.Configuration, java.lang.String, java.lang.String)",
    "125": "[J getProcessPss([I)",
    "126": "void showBootMessage(java.lang.CharSequence, boolean)",
    "127": "void killAllBackgroundProcesses()",
    "128": "android.app.ContentProviderHolder getContentProviderExternal(java.lang.String, int, android.os.IBinder, java.lang.String)",
    "129": "void removeContentProviderExternal(java.lang.String, android.os.IBinder)",
    "130": "void removeContentProviderExternalAsUser(java.lang.String, android.os.IBinder, int)",
    "131": "void getMyMemoryState(android.app.ActivityManager$RunningAppProcessInfo)",
    "132": "boolean killProcessesBelowForeground(java.lang.String)",
    "133": "android.content.pm.UserInfo getCurrentUser()",
    "134": "int getCurrentUserId()",
    "135": "int getLaunchedFromUid(android.os.IBinder)",
    "136": "void unstableProviderDied(android.os.IBinder)",
    "137": "boolean isIntentSenderAnActivity(android.content.IIntentSender)",
    "138": "int startActivityAsUser(android.app.IApplicationThread, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int)",
    "139": "int startActivityAsUserWithFeature(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.Intent, java.lang.String, android.os.IBinder, java.lang.String, int, int, android.app.ProfilerInfo, android.os.Bundle, int)",
    "140": "int stopUser(int, boolean, android.app.IStopUserCallback)",
    "141": "int stopUserWithDelayedLocking(int, boolean, android.app.IStopUserCallback)",
    "142": "void registerUserSwitchObserver(android.app.IUserSwitchObserver, java.lang.String)",
    "143": "void unregisterUserSwitchObserver(android.app.IUserSwitchObserver)",
    "144": "[I getRunningUserIds()",
    "145": "void requestSystemServerHeapDump()",
    "146": "void requestBugReport(int)",
    "147": "void requestBugReportWithDescription(java.lang.String, java.lang.String, int)",
    "148": "void requestTelephonyBugReport(java.lang.String, java.lang.String)",
    "149": "void requestWifiBugReport(java.lang.String, java.lang.String)",
    "150": "void requestInteractiveBugReportWithDescription(java.lang.String, java.lang.String)",
    "151": "void requestInteractiveBugReport()",
    "152": "void requestFullBugReport()",
    "153": "void requestRemoteBugReport(long)",
    "154": "boolean launchBugReportHandlerApp()",
    "155": "java.util.List getBugreportWhitelistedPackages()",
    "156": "android.content.Intent getIntentForIntentSender(android.content.IIntentSender)",
    "157": "java.lang.String getLaunchedFromPackage(android.os.IBinder)",
    "158": "void killUid(int, int, java.lang.String)",
    "159": "void setUserIsMonkey(boolean)",
    "160": "void hang(android.os.IBinder, boolean)",
    "161": "java.util.List getAllRootTaskInfos()",
    "162": "void moveTaskToRootTask(int, int, boolean)",
    "163": "void setFocusedRootTask(int)",
    "164": "android.app.ActivityTaskManager$RootTaskInfo getFocusedRootTaskInfo()",
    "165": "void restart()",
    "166": "void performIdleMaintenance()",
    "167": "void appNotRespondingViaProvider(android.os.IBinder)",
    "168": "android.graphics.Rect getTaskBounds(int)",
    "169": "boolean setProcessMemoryTrimLevel(java.lang.String, int, int)",
    "170": "java.lang.String getTagForIntentSender(android.content.IIntentSender, java.lang.String)",
    "171": "boolean startUserInBackground(int)",
    "172": "boolean isInLockTaskMode()",
    "173": "int startActivityFromRecents(int, android.os.Bundle)",
    "174": "void startSystemLockTaskMode(int)",
    "175": "boolean isTopOfTask(android.os.IBinder)",
    "176": "void bootAnimationComplete()",
    "177": "void registerTaskStackListener(android.app.ITaskStackListener)",
    "178": "void unregisterTaskStackListener(android.app.ITaskStackListener)",
    "179": "void notifyCleartextNetwork(int, [B)",
    "180": "void setTaskResizeable(int, int)",
    "181": "void resizeTask(int, android.graphics.Rect, int)",
    "182": "int getLockTaskModeState()",
    "183": "void setDumpHeapDebugLimit(java.lang.String, int, long, java.lang.String)",
    "184": "void dumpHeapFinished(java.lang.String)",
    "185": "void updateLockTaskPackages(int, [Ljava.lang.String;)",
    "186": "void noteAlarmStart(android.content.IIntentSender, android.os.WorkSource, int, java.lang.String)",
    "187": "void noteAlarmFinish(android.content.IIntentSender, android.os.WorkSource, int, java.lang.String)",
    "188": "int getPackageProcessState(java.lang.String, java.lang.String)",
    "189": "boolean startBinderTracking()",
    "190": "boolean stopBinderTrackingAndDump(android.os.ParcelFileDescriptor)",
    "191": "void suppressResizeConfigChanges(boolean)",
    "192": "boolean unlockUser(int, [B, [B, android.os.IProgressListener)",
    "193": "boolean unlockUser2(int, android.os.IProgressListener)",
    "194": "void killPackageDependents(java.lang.String, int)",
    "195": "void makePackageIdle(java.lang.String, int)",
    "196": "void setDeterministicUidIdle(boolean)",
    "197": "int getMemoryTrimLevel()",
    "198": "boolean isVrModePackageEnabled(android.content.ComponentName)",
    "199": "void notifyLockedProfile(int)",
    "200": "void startConfirmDeviceCredentialIntent(android.content.Intent, android.os.Bundle)",
    "201": "void sendIdleJobTrigger()",
    "202": "int sendIntentSender(android.app.IApplicationThread, android.content.IIntentSender, android.os.IBinder, int, android.content.Intent, java.lang.String, android.content.IIntentReceiver, java.lang.String, android.os.Bundle)",
    "203": "boolean isBackgroundRestricted(java.lang.String)",
    "204": "void setRenderThread(int)",
    "205": "void setHasTopUi(boolean)",
    "206": "void cancelTaskWindowTransition(int)",
    "207": "void scheduleApplicationInfoChanged(java.util.List, int)",
    "208": "void setPersistentVrThread(int)",
    "209": "void waitForNetworkStateUpdate(long)",
    "210": "void backgroundAllowlistUid(int)",
    "211": "boolean startUserInBackgroundWithListener(int, android.os.IProgressListener)",
    "212": "void startDelegateShellPermissionIdentity(int, [Ljava.lang.String;)",
    "213": "void stopDelegateShellPermissionIdentity()",
    "214": "java.util.List getDelegatedShellPermissions()",
    "215": "android.os.ParcelFileDescriptor getLifeMonitor()",
    "216": "boolean startUserInForegroundWithListener(int, android.os.IProgressListener)",
    "217": "void appNotResponding(java.lang.String)",
    "218": "android.content.pm.ParceledListSlice getHistoricalProcessStartReasons(java.lang.String, int, int)",
    "219": "void setApplicationStartInfoCompleteListener(android.app.IApplicationStartInfoCompleteListener, int)",
    "220": "void removeApplicationStartInfoCompleteListener(int)",
    "221": "android.content.pm.ParceledListSlice getHistoricalProcessExitReasons(java.lang.String, int, int, int)",
    "222": "void killProcessesWhenImperceptible([I, java.lang.String)",
    "223": "void setActivityLocusContext(android.content.ComponentName, android.content.LocusId, android.os.IBinder)",
    "224": "void setProcessStateSummary([B)",
    "225": "boolean isAppFreezerSupported()",
    "226": "boolean isAppFreezerEnabled()",
    "227": "void killUidForPermissionChange(int, int, java.lang.String)",
    "228": "void resetAppErrors()",
    "229": "boolean enableAppFreezer(boolean)",
    "230": "boolean enableFgsNotificationRateLimit(boolean)",
    "231": "void holdLock(android.os.IBinder, int)",
    "232": "boolean startProfile(int)",
    "233": "boolean stopProfile(int)",
    "234": "android.content.pm.ParceledListSlice queryIntentComponentsForIntentSender(android.content.IIntentSender, int)",
    "235": "int getUidProcessCapabilities(int, java.lang.String)",
    "236": "void waitForBroadcastIdle()",
    "237": "void waitForBroadcastBarrier()",
    "238": "void forceDelayBroadcastDelivery(java.lang.String, long)",
    "239": "boolean isModernBroadcastQueueEnabled()",
    "240": "boolean isProcessFrozen(int)",
    "241": "int getBackgroundRestrictionExemptionReason(int)",
    "242": "boolean startUserInBackgroundVisibleOnDisplay(int, int, android.os.IProgressListener)",
    "243": "boolean startProfileWithListener(int, android.os.IProgressListener)",
    "244": "int restartUserInBackground(int, int)",
    "245": "[I getDisplayIdsForStartingVisibleBackgroundUsers()",
    "246": "boolean shouldServiceTimeOut(android.content.ComponentName, android.os.IBinder)",
    "247": "void registerUidFrozenStateChangedCallback(android.app.IUidFrozenStateChangedCallback)",
    "248": "void unregisterUidFrozenStateChangedCallback(android.app.IUidFrozenStateChangedCallback)",
    "249": "[I getUidFrozenState([I)"
  },
  "android.accounts.IAccountManager": {
    "1": "java.lang.String getPassword(android.accounts.Account)",
    "2": "java.lang.String getUserData(android.accounts.Account, java.lang.String)",
    "3": "[Landroid.accounts.AuthenticatorDescription; getAuthenticatorTypes(int)",
    "4": "[Landroid.accounts.Account; getAccountsForPackage(java.lang.String, int, java.lang.String)",
    "5": "[Landroid.accounts.Account; getAccountsByTypeForPackage(java.lang.String, java.lang.String, java.lang.String)",
    "6": "[Landroid.accounts.Account; getAccountsAsUser(java.lang.String, int, java.lang.String)",
    "7": "void hasFeatures(android.accounts.IAccountManagerResponse, android.accounts.Account, [Ljava.lang.String;, int, java.lang.String)",
    "8": "void getAccountByTypeAndFeatures(android.accounts.IAccountManagerResponse, java.lang.String, [Ljava.lang.String;, java.lang.String)",
    "9": "void getAccountsByFeatures(android.accounts.IAccountManagerResponse, java.lang.String, [Ljava.lang.String;, java.lang.String)",
    "10": "boolean addAccountExplicitly(android.accounts.Account, java.lang.String, android.os.Bundle, java.lang.String)",
    "11": "void removeAccountAsUser(android.accounts.IAccountManagerResponse, android.accounts.Account, boolean, int)",
    "12": "boolean removeAccountExplicitly(android.accounts.Account)",
    "13": "void copyAccountToUser(android.accounts.IAccountManagerResponse, android.accounts.Account, int, int)",
    "14": "void invalidateAuthToken(java.lang.String, java.lang.String)",
    "15": "java.lang.String peekAuthToken(android.accounts.Account, java.lang.String)",
    "16": "void setAuthToken(android.accounts.Account, java.lang.String, java.lang.String)",
    "17": "void setPassword(android.accounts.Account, java.lang.String)",
    "18": "void clearPassword(android.accounts.Account)",
    "19": "void setUserData(android.accounts.Account, java.lang.String, java.lang.String)",
    "20": "void updateAppPermission(android.accounts.Account, java.lang.String, int, boolean)",
    "21": "void getAuthToken(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, boolean, android.os.Bundle)",
    "22": "void addAccount(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, [Ljava.lang.String;, boolean, android.os.Bundle)",
    "23": "void addAccountAsUser(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, [Ljava.lang.String;, boolean, android.os.Bundle, int)",
    "24": "void updateCredentials(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, android.os.Bundle)",
    "25": "void editProperties(android.accounts.IAccountManagerResponse, java.lang.String, boolean)",
    "26": "void confirmCredentialsAsUser(android.accounts.IAccountManagerResponse, android.accounts.Account, android.os.Bundle, boolean, int)",
    "27": "boolean accountAuthenticated(android.accounts.Account)",
    "28": "void getAuthTokenLabel(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String)",
    "29": "void addSharedAccountsFromParentUser(int, int, java.lang.String)",
    "30": "void renameAccount(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String)",
    "31": "java.lang.String getPreviousName(android.accounts.Account)",
    "32": "void startAddAccountSession(android.accounts.IAccountManagerResponse, java.lang.String, java.lang.String, [Ljava.lang.String;, boolean, android.os.Bundle)",
    "33": "void startUpdateCredentialsSession(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String, boolean, android.os.Bundle)",
    "34": "void finishSessionAsUser(android.accounts.IAccountManagerResponse, android.os.Bundle, boolean, android.os.Bundle, int)",
    "35": "boolean someUserHasAccount(android.accounts.Account)",
    "36": "void isCredentialsUpdateSuggested(android.accounts.IAccountManagerResponse, android.accounts.Account, java.lang.String)",
    "37": "java.util.Map getPackagesAndVisibilityForAccount(android.accounts.Account)",
    "38": "boolean addAccountExplicitlyWithVisibility(android.accounts.Account, java.lang.String, android.os.Bundle, java.util.Map, java.lang.String)",
    "39": "boolean setAccountVisibility(android.accounts.Account, java.lang.String, int)",
    "40": "int getAccountVisibility(android.accounts.Account, java.lang.String)",
    "41": "java.util.Map getAccountsAndVisibilityForPackage(java.lang.String, java.lang.String)",
    "42": "void registerAccountListener([Ljava.lang.String;, java.lang.String)",
    "43": "void unregisterAccountListener([Ljava.lang.String;, java.lang.String)",
    "44": "boolean hasAccountAccess(android.accounts.Account, java.lang.String, android.os.UserHandle)",
    "45": "android.content.IntentSender createRequestAccountAccessIntentSenderAsUser(android.accounts.Account, java.lang.String, android.os.UserHandle)",
    "46": "void onAccountAccessed(java.lang.String)"
  },
  "android.hardware.face.IFaceService": {
    "1": "android.hardware.biometrics.ITestSession createTestSession(int, android.hardware.biometrics.ITestSessionCallback, java.lang.String)",
    "2": "[B dumpSensorServiceStateProto(int, boolean)",
    "3": "java.util.List getSensorPropertiesInternal(java.lang.String)",
    "4": "android.hardware.face.FaceSensorPropertiesInternal getSensorProperties(int, java.lang.String)",
    "5": "long authenticate(android.os.IBinder, long, android.hardware.face.IFaceServiceReceiver, android.hardware.face.FaceAuthenticateOptions)",
    "6": "long detectFace(android.os.IBinder, android.hardware.face.IFaceServiceReceiver, android.hardware.face.FaceAuthenticateOptions)",
    "7": "void prepareForAuthentication(boolean, android.os.IBinder, long, android.hardware.biometrics.IBiometricSensorReceiver, android.hardware.face.FaceAuthenticateOptions, long, int, boolean)",
    "8": "void startPreparedClient(int, int)",
    "9": "void cancelAuthentication(android.os.IBinder, java.lang.String, long)",
    "10": "void cancelFaceDetect(android.os.IBinder, java.lang.String, long)",
    "11": "void cancelAuthenticationFromService(int, android.os.IBinder, java.lang.String, long)",
    "12": "long enroll(int, android.os.IBinder, [B, android.hardware.face.IFaceServiceReceiver, java.lang.String, [I, android.view.Surface, boolean)",
    "13": "long enrollRemotely(int, android.os.IBinder, [B, android.hardware.face.IFaceServiceReceiver, java.lang.String, [I)",
    "14": "void cancelEnrollment(android.os.IBinder, long)",
    "15": "void remove(android.os.IBinder, int, int, android.hardware.face.IFaceServiceReceiver, java.lang.String)",
    "16": "void removeAll(android.os.IBinder, int, android.hardware.face.IFaceServiceReceiver, java.lang.String)",
    "17": "java.util.List getEnrolledFaces(int, int, java.lang.String)",
    "18": "boolean isHardwareDetected(int, java.lang.String)",
    "19": "void generateChallenge(android.os.IBinder, int, int, android.hardware.face.IFaceServiceReceiver, java.lang.String)",
    "20": "void revokeChallenge(android.os.IBinder, int, int, java.lang.String, long)",
    "21": "boolean hasEnrolledFaces(int, int, java.lang.String)",
    "22": "int getLockoutModeForUser(int, int)",
    "23": "void invalidateAuthenticatorId(int, int, android.hardware.biometrics.IInvalidationCallback)",
    "24": "long getAuthenticatorId(int, int)",
    "25": "void resetLockout(android.os.IBinder, int, int, [B, java.lang.String)",
    "26": "void addLockoutResetCallback(android.hardware.biometrics.IBiometricServiceLockoutResetCallback, java.lang.String)",
    "27": "void setFeature(android.os.IBinder, int, int, boolean, [B, android.hardware.face.IFaceServiceReceiver, java.lang.String)",
    "28": "void getFeature(android.os.IBinder, int, int, android.hardware.face.IFaceServiceReceiver, java.lang.String)",
    "29": "void registerAuthenticators(java.util.List)",
    "30": "void addAuthenticatorsRegisteredCallback(android.hardware.face.IFaceAuthenticatorsRegisteredCallback)",
    "31": "void registerBiometricStateListener(android.hardware.biometrics.IBiometricStateListener)",
    "32": "void scheduleWatchdog()"
  },
  "android.service.textclassifier.ITextClassifierService": {
    "1": "void onSuggestSelection(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.TextSelection$Request, android.service.textclassifier.ITextClassifierCallback)",
    "2": "void onClassifyText(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.TextClassification$Request, android.service.textclassifier.ITextClassifierCallback)",
    "3": "void onGenerateLinks(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.TextLinks$Request, android.service.textclassifier.ITextClassifierCallback)",
    "4": "void onSelectionEvent(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.SelectionEvent)",
    "5": "void onTextClassifierEvent(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.TextClassifierEvent)",
    "6": "void onCreateTextClassificationSession(android.view.textclassifier.TextClassificationContext, android.view.textclassifier.TextClassificationSessionId)",
    "7": "void onDestroyTextClassificationSession(android.view.textclassifier.TextClassificationSessionId)",
    "8": "void onDetectLanguage(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.TextLanguage$Request, android.service.textclassifier.ITextClassifierCallback)",
    "9": "void onSuggestConversationActions(android.view.textclassifier.TextClassificationSessionId, android.view.textclassifier.ConversationActions$Request, android.service.textclassifier.ITextClassifierCallback)",
    "10": "void onConnectedStateChanged(int)"
  },
  "android.os.IThermalService": {
    "1": "boolean registerThermalEventListener(android.os.IThermalEventListener)",
    "2": "boolean registerThermalEventListenerWithType(android.os.IThermalEventListener, int)",
    "3": "boolean unregisterThermalEventListener(android.os.IThermalEventListener)",
    "4": "[Landroid.os.Temperature; getCurrentTemperatures()",
    "5": "[Landroid.os.Temperature; getCurrentTemperaturesWithType(int)",
    "6": "boolean registerThermalStatusListener(android.os.IThermalStatusListener)",
    "7": "boolean unregisterThermalStatusListener(android.os.IThermalStatusListener)",
    "8": "int getCurrentThermalStatus()",
    "9": "[Landroid.os.CoolingDevice; getCurrentCoolingDevices()",
    "10": "[Landroid.os.CoolingDevice; getCurrentCoolingDevicesWithType(int)",
    "11": "float getThermalHeadroom(int)"
  },
  "android.app.prediction.IPredictionManager": {
    "1": "void createPredictionSession(android.app.prediction.AppPredictionContext, android.app.prediction.AppPredictionSessionId, android.os.IBinder)",
    "2": "void notifyAppTargetEvent(android.app.prediction.AppPredictionSessionId, android.app.prediction.AppTargetEvent)",
    "3": "void notifyLaunchLocationShown(android.app.prediction.AppPredictionSessionId, java.lang.String, android.content.pm.ParceledListSlice)",
    "4": "void sortAppTargets(android.app.prediction.AppPredictionSessionId, android.content.pm.ParceledListSlice, android.app.prediction.IPredictionCallback)",
    "5": "void registerPredictionUpdates(android.app.prediction.AppPredictionSessionId, android.app.prediction.IPredictionCallback)",
    "6": "void unregisterPredictionUpdates(android.app.prediction.AppPredictionSessionId, android.app.prediction.IPredictionCallback)",
    "7": "void requestPredictionUpdate(android.app.prediction.AppPredictionSessionId)",
    "8": "void onDestroyPredictionSession(android.app.prediction.AppPredictionSessionId)"
  },
  "com.android.internal.telephony.ISms": {
    "1": "java.util.List getAllMessagesFromIccEfForSubscriber(int, java.lang.String)",
    "2": "boolean updateMessageOnIccEfForSubscriber(int, java.lang.String, int, int, [B)",
    "3": "boolean copyMessageToIccEfForSubscriber(int, java.lang.String, int, [B, [B)",
    "4": "void sendDataForSubscriber(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int, [B, android.app.PendingIntent, android.app.PendingIntent)",
    "5": "void sendTextForSubscriber(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, long)",
    "6": "void sendTextForSubscriberWithOptions(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.app.PendingIntent, android.app.PendingIntent, boolean, int, boolean, int)",
    "7": "void injectSmsPduForSubscriber(int, [B, java.lang.String, android.app.PendingIntent)",
    "8": "void sendMultipartTextForSubscriber(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, boolean, long)",
    "9": "void sendMultipartTextForSubscriberWithOptions(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.util.List, java.util.List, java.util.List, boolean, int, boolean, int)",
    "10": "boolean enableCellBroadcastForSubscriber(int, int, int)",
    "11": "boolean disableCellBroadcastForSubscriber(int, int, int)",
    "12": "boolean enableCellBroadcastRangeForSubscriber(int, int, int, int)",
    "13": "boolean disableCellBroadcastRangeForSubscriber(int, int, int, int)",
    "14": "int getPremiumSmsPermission(java.lang.String)",
    "15": "int getPremiumSmsPermissionForSubscriber(int, java.lang.String)",
    "16": "void setPremiumSmsPermission(java.lang.String, int)",
    "17": "void setPremiumSmsPermissionForSubscriber(int, java.lang.String, int)",
    "18": "boolean isImsSmsSupportedForSubscriber(int)",
    "19": "boolean isSmsSimPickActivityNeeded(int)",
    "20": "int getPreferredSmsSubscription()",
    "21": "java.lang.String getImsSmsFormatForSubscriber(int)",
    "22": "boolean isSMSPromptEnabled()",
    "23": "void sendStoredText(int, java.lang.String, java.lang.String, android.net.Uri, java.lang.String, android.app.PendingIntent, android.app.PendingIntent)",
    "24": "void sendStoredMultipartText(int, java.lang.String, java.lang.String, android.net.Uri, java.lang.String, java.util.List, java.util.List)",
    "25": "android.os.Bundle getCarrierConfigValuesForSubscriber(int)",
    "26": "java.lang.String createAppSpecificSmsToken(int, java.lang.String, android.app.PendingIntent)",
    "27": "java.lang.String createAppSpecificSmsTokenWithPackageInfo(int, java.lang.String, java.lang.String, android.app.PendingIntent)",
    "28": "void setStorageMonitorMemoryStatusOverride(int, boolean)",
    "29": "void clearStorageMonitorMemoryStatusOverride(int)",
    "30": "int checkSmsShortCodeDestination(int, java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "31": "java.lang.String getSmscAddressFromIccEfForSubscriber(int, java.lang.String)",
    "32": "boolean setSmscAddressOnIccEfForSubscriber(java.lang.String, int, java.lang.String)",
    "33": "int getSmsCapacityOnIccForSubscriber(int)",
    "34": "boolean resetAllCellBroadcastRanges(int)"
  },
  "android.hardware.lights.ILightsManager": {
    "1": "java.util.List getLights()",
    "2": "android.hardware.lights.LightState getLightState(int)",
    "3": "void openSession(android.os.IBinder, int)",
    "4": "void closeSession(android.os.IBinder)",
    "5": "void setLightStates(android.os.IBinder, [I, [Landroid.hardware.lights.LightState;)"
  },
  "android.os.IInstalld": {
    "1": "void createUserData(java.lang.String, int, int, int)",
    "2": "void destroyUserData(java.lang.String, int, int)",
    "3": "void setFirstBoot()",
    "4": "android.os.CreateAppDataResult createAppData(android.os.CreateAppDataArgs)",
    "5": "[Landroid.os.CreateAppDataResult; createAppDataBatched([Landroid.os.CreateAppDataArgs;)",
    "6": "void reconcileSdkData(android.os.ReconcileSdkDataArgs)",
    "7": "void restoreconAppData(java.lang.String, java.lang.String, int, int, int, java.lang.String)",
    "8": "void migrateAppData(java.lang.String, java.lang.String, int, int)",
    "9": "void clearAppData(java.lang.String, java.lang.String, int, int, long)",
    "10": "void destroyAppData(java.lang.String, java.lang.String, int, int, long)",
    "11": "void fixupAppData(java.lang.String, int)",
    "12": "[J getAppSize(java.lang.String, [Ljava.lang.String;, int, int, int, [J, [Ljava.lang.String;)",
    "13": "[J getUserSize(java.lang.String, int, int, [I)",
    "14": "[J getExternalSize(java.lang.String, int, int, [I)",
    "15": "[Landroid.os.storage.CrateMetadata; getAppCrates(java.lang.String, [Ljava.lang.String;, int)",
    "16": "[Landroid.os.storage.CrateMetadata; getUserCrates(java.lang.String, int)",
    "17": "void setAppQuota(java.lang.String, int, int, long)",
    "18": "void moveCompleteApp(java.lang.String, java.lang.String, java.lang.String, int, java.lang.String, int, java.lang.String)",
    "19": "boolean dexopt(java.lang.String, int, java.lang.String, java.lang.String, int, java.lang.String, int, java.lang.String, java.lang.String, java.lang.String, java.lang.String, boolean, int, java.lang.String, java.lang.String, java.lang.String)",
    "20": "void controlDexOptBlocking(boolean)",
    "21": "boolean compileLayouts(java.lang.String, java.lang.String, java.lang.String, int)",
    "22": "void rmdex(java.lang.String, java.lang.String)",
    "23": "int mergeProfiles(int, java.lang.String, java.lang.String)",
    "24": "boolean dumpProfiles(int, java.lang.String, java.lang.String, java.lang.String, boolean)",
    "25": "boolean copySystemProfile(java.lang.String, int, java.lang.String, java.lang.String)",
    "26": "void clearAppProfiles(java.lang.String, java.lang.String)",
    "27": "void destroyAppProfiles(java.lang.String)",
    "28": "void deleteReferenceProfile(java.lang.String, java.lang.String)",
    "29": "boolean createProfileSnapshot(int, java.lang.String, java.lang.String, java.lang.String)",
    "30": "void destroyProfileSnapshot(java.lang.String, java.lang.String)",
    "31": "void rmPackageDir(java.lang.String, java.lang.String)",
    "32": "void freeCache(java.lang.String, long, int)",
    "33": "void linkNativeLibraryDirectory(java.lang.String, java.lang.String, java.lang.String, int)",
    "34": "void createOatDir(java.lang.String, java.lang.String, java.lang.String)",
    "35": "void linkFile(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "36": "void moveAb(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "37": "long deleteOdex(java.lang.String, java.lang.String, java.lang.String, java.lang.String)",
    "38": "boolean reconcileSecondaryDexFile(java.lang.String, java.lang.String, int, [Ljava.lang.String;, java.lang.String, int)",
    "39": "[B hashSecondaryDexFile(java.lang.String, java.lang.String, int, java.lang.String, int)",
    "40": "void invalidateMounts()",
    "41": "boolean isQuotaSupported(java.lang.String)",
    "42": "boolean prepareAppProfile(java.lang.String, int, int, java.lang.String, java.lang.String, java.lang.String)",
    "43": "long snapshotAppData(java.lang.String, java.lang.String, int, int, int)",
    "44": "void restoreAppDataSnapshot(java.lang.String, java.lang.String, int, java.lang.String, int, int, int)",
    "45": "void destroyAppDataSnapshot(java.lang.String, java.lang.String, int, long, int, int)",
    "46": "void destroyCeSnapshotsNotSpecified(java.lang.String, int, [I)",
    "47": "void tryMountDataMirror(java.lang.String)",
    "48": "void onPrivateVolumeRemoved(java.lang.String)",
    "49": "void migrateLegacyObbData()",
    "50": "void cleanupInvalidPackageDirs(java.lang.String, int, int)",
    "51": "int getOdexVisibility(java.lang.String, java.lang.String, java.lang.String, java.lang.String)"
  },
  "android.app.IUiModeManager": {
    "1": "void addCallback(android.app.IUiModeManagerCallback)",
    "2": "void enableCarMode(int, int, java.lang.String)",
    "3": "void disableCarMode(int)",
    "4": "void disableCarModeByCallingPackage(int, java.lang.String)",
    "5": "int getCurrentModeType()",
    "6": "void setNightMode(int)",
    "7": "int getNightMode()",
    "8": "void setNightModeCustomType(int)",
    "9": "int getNightModeCustomType()",
    "10": "void setApplicationNightMode(int)",
    "11": "boolean isUiModeLocked()",
    "12": "boolean isNightModeLocked()",
    "13": "boolean setNightModeActivatedForCustomMode(int, boolean)",
    "14": "boolean setNightModeActivated(boolean)",
    "15": "long getCustomNightModeStart()",
    "16": "void setCustomNightModeStart(long)",
    "17": "long getCustomNightModeEnd()",
    "18": "void setCustomNightModeEnd(long)",
    "19": "boolean requestProjection(android.os.IBinder, int, java.lang.String)",
    "20": "boolean releaseProjection(int, java.lang.String)",
    "21": "void addOnProjectionStateChangedListener(android.app.IOnProjectionStateChangedListener, int)",
    "22": "void removeOnProjectionStateChangedListener(android.app.IOnProjectionStateChangedListener)",
    "23": "java.util.List getProjectingPackages(int)",
    "24": "int getActiveProjectionTypes()",
    "25": "float getContrast()"
  },
  "android.content.pm.ILauncherApps": {
    "1": "void addOnAppsChangedListener(java.lang.String, android.content.pm.IOnAppsChangedListener)",
    "2": "void removeOnAppsChangedListener(android.content.pm.IOnAppsChangedListener)",
    "3": "android.content.pm.ParceledListSlice getLauncherActivities(java.lang.String, java.lang.String, android.os.UserHandle)",
    "4": "android.content.pm.LauncherActivityInfoInternal resolveLauncherActivityInternal(java.lang.String, android.content.ComponentName, android.os.UserHandle)",
    "5": "void startSessionDetailsActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.pm.PackageInstaller$SessionInfo, android.graphics.Rect, android.os.Bundle, android.os.UserHandle)",
    "6": "void startActivityAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.ComponentName, android.graphics.Rect, android.os.Bundle, android.os.UserHandle)",
    "7": "android.app.PendingIntent getActivityLaunchIntent(java.lang.String, android.content.ComponentName, android.os.UserHandle)",
    "8": "void showAppDetailsAsUser(android.app.IApplicationThread, java.lang.String, java.lang.String, android.content.ComponentName, android.graphics.Rect, android.os.Bundle, android.os.UserHandle)",
    "9": "boolean isPackageEnabled(java.lang.String, java.lang.String, android.os.UserHandle)",
    "10": "android.os.Bundle getSuspendedPackageLauncherExtras(java.lang.String, android.os.UserHandle)",
    "11": "boolean isActivityEnabled(java.lang.String, android.content.ComponentName, android.os.UserHandle)",
    "12": "android.content.pm.ApplicationInfo getApplicationInfo(java.lang.String, java.lang.String, int, android.os.UserHandle)",
    "13": "android.content.pm.LauncherApps$AppUsageLimit getAppUsageLimit(java.lang.String, java.lang.String, android.os.UserHandle)",
    "14": "android.content.pm.ParceledListSlice getShortcuts(java.lang.String, android.content.pm.ShortcutQueryWrapper, android.os.UserHandle)",
    "15": "void getShortcutsAsync(java.lang.String, android.content.pm.ShortcutQueryWrapper, android.os.UserHandle, com.android.internal.infra.AndroidFuture)",
    "16": "void pinShortcuts(java.lang.String, java.lang.String, java.util.List, android.os.UserHandle)",
    "17": "boolean startShortcut(java.lang.String, java.lang.String, java.lang.String, java.lang.String, android.graphics.Rect, android.os.Bundle, int)",
    "18": "int getShortcutIconResId(java.lang.String, java.lang.String, java.lang.String, int)",
    "19": "android.os.ParcelFileDescriptor getShortcutIconFd(java.lang.String, java.lang.String, java.lang.String, int)",
    "20": "boolean hasShortcutHostPermission(java.lang.String)",
    "21": "boolean shouldHideFromSuggestions(java.lang.String, android.os.UserHandle)",
    "22": "android.content.pm.ParceledListSlice getShortcutConfigActivities(java.lang.String, java.lang.String, android.os.UserHandle)",
    "23": "android.content.IntentSender getShortcutConfigActivityIntent(java.lang.String, android.content.ComponentName, android.os.UserHandle)",
    "24": "android.app.PendingIntent getShortcutIntent(java.lang.String, java.lang.String, java.lang.String, android.os.Bundle, android.os.UserHandle)",
    "25": "void registerPackageInstallerCallback(java.lang.String, android.content.pm.IPackageInstallerCallback)",
    "26": "android.content.pm.ParceledListSlice getAllSessions(java.lang.String)",
    "27": "void registerShortcutChangeCallback(java.lang.String, android.content.pm.ShortcutQueryWrapper, android.content.pm.IShortcutChangeCallback)",
    "28": "void unregisterShortcutChangeCallback(java.lang.String, android.content.pm.IShortcutChangeCallback)",
    "29": "void cacheShortcuts(java.lang.String, java.lang.String, java.util.List, android.os.UserHandle, int)",
    "30": "void uncacheShortcuts(java.lang.String, java.lang.String, java.util.List, android.os.UserHandle, int)",
    "31": "java.lang.String getShortcutIconUri(java.lang.String, java.lang.String, java.lang.String, int)",
    "32": "java.util.Map getActivityOverrides(java.lang.String, int)",
    "33": "void registerDumpCallback(android.window.IDumpCallback)",
    "34": "void unRegisterDumpCallback(android.window.IDumpCallback)"
  },
  "com.android.internal.app.IAppOpsService": {
    "1": "int checkOperation(int, int, java.lang.String)",
    "2": "android.app.SyncNotedAppOp noteOperation(int, int, java.lang.String, java.lang.String, boolean, java.lang.String, boolean)",
    "3": "android.app.SyncNotedAppOp startOperation(android.os.IBinder, int, int, java.lang.String, java.lang.String, boolean, boolean, java.lang.String, boolean, int, int)",
    "4": "void finishOperation(android.os.IBinder, int, int, java.lang.String, java.lang.String)",
    "5": "void startWatchingMode(int, java.lang.String, com.android.internal.app.IAppOpsCallback)",
    "6": "void stopWatchingMode(com.android.internal.app.IAppOpsCallback)",
    "7": "int permissionToOpCode(java.lang.String)",
    "8": "int checkAudioOperation(int, int, int, java.lang.String)",
    "9": "boolean shouldCollectNotes(int)",
    "10": "void setCameraAudioRestriction(int)",
    "11": "void startWatchingModeWithFlags(int, java.lang.String, int, com.android.internal.app.IAppOpsCallback)",
    "12": "android.app.SyncNotedAppOp noteProxyOperation(int, android.content.AttributionSource, boolean, java.lang.String, boolean, boolean)",
    "13": "android.app.SyncNotedAppOp startProxyOperation(android.os.IBinder, int, android.content.AttributionSource, boolean, boolean, java.lang.String, boolean, boolean, int, int, int)",
    "14": "void finishProxyOperation(android.os.IBinder, int, android.content.AttributionSource, boolean)",
    "15": "int checkPackage(int, java.lang.String)",
    "16": "android.app.RuntimeAppOpAccessMessage collectRuntimeAppOpAccessMessage()",
    "17": "com.android.internal.app.MessageSamplingConfig reportRuntimeAppOpAccessMessageAndGetConfig(java.lang.String, android.app.SyncNotedAppOp, java.lang.String)",
    "18": "java.util.List getPackagesForOps([I)",
    "19": "java.util.List getOpsForPackage(int, java.lang.String, [I)",
    "20": "void getHistoricalOps(int, java.lang.String, java.lang.String, java.util.List, int, int, long, long, int, android.os.RemoteCallback)",
    "21": "void getHistoricalOpsFromDiskRaw(int, java.lang.String, java.lang.String, java.util.List, int, int, long, long, int, android.os.RemoteCallback)",
    "22": "void offsetHistory(long)",
    "23": "void setHistoryParameters(int, long, int)",
    "24": "void addHistoricalOps(android.app.AppOpsManager$HistoricalOps)",
    "25": "void resetHistoryParameters()",
    "26": "void resetPackageOpsNoHistory(java.lang.String)",
    "27": "void clearHistory()",
    "28": "void rebootHistory(long)",
    "29": "java.util.List getUidOps(int, [I)",
    "30": "void setUidMode(int, int, int)",
    "31": "void setMode(int, int, java.lang.String, int)",
    "32": "void resetAllModes(int, java.lang.String)",
    "33": "void setAudioRestriction(int, int, int, int, [Ljava.lang.String;)",
    "34": "void setUserRestrictions(android.os.Bundle, android.os.IBinder, int)",
    "35": "void setUserRestriction(int, boolean, android.os.IBinder, int, android.os.PackageTagsList)",
    "36": "void removeUser(int)",
    "37": "void startWatchingActive([I, com.android.internal.app.IAppOpsActiveCallback)",
    "38": "void stopWatchingActive(com.android.internal.app.IAppOpsActiveCallback)",
    "39": "boolean isOperationActive(int, int, java.lang.String)",
    "40": "boolean isProxying(int, java.lang.String, java.lang.String, int, java.lang.String)",
    "41": "void startWatchingStarted([I, com.android.internal.app.IAppOpsStartedCallback)",
    "42": "void stopWatchingStarted(com.android.internal.app.IAppOpsStartedCallback)",
    "43": "void startWatchingNoted([I, com.android.internal.app.IAppOpsNotedCallback)",
    "44": "void stopWatchingNoted(com.android.internal.app.IAppOpsNotedCallback)",
    "45": "void startWatchingAsyncNoted(java.lang.String, com.android.internal.app.IAppOpsAsyncNotedCallback)",
    "46": "void stopWatchingAsyncNoted(java.lang.String, com.android.internal.app.IAppOpsAsyncNotedCallback)",
    "47": "java.util.List extractAsyncOps(java.lang.String)",
    "48": "int checkOperationRaw(int, int, java.lang.String, java.lang.String)",
    "49": "void reloadNonHistoricalState()",
    "50": "void collectNoteOpCallsForValidation(java.lang.String, int, java.lang.String, long)"
  },
  "android.app.contentsuggestions.IContentSuggestionsManager": {
    "1": "void provideContextImage(int, int, android.os.Bundle)",
    "2": "void provideContextBitmap(int, android.graphics.Bitmap, android.os.Bundle)",
    "3": "void suggestContentSelections(int, android.app.contentsuggestions.SelectionsRequest, android.app.contentsuggestions.ISelectionsCallback)",
    "4": "void classifyContentSelections(int, android.app.contentsuggestions.ClassificationsRequest, android.app.contentsuggestions.IClassificationsCallback)",
    "5": "void notifyInteraction(int, java.lang.String, android.os.Bundle)",
    "6": "void isEnabled(int, com.android.internal.os.IResultReceiver)",
    "7": "void resetTemporaryService(int)",
    "8": "void setTemporaryService(int, java.lang.String, int)",
    "9": "void setDefaultServiceEnabled(int, boolean)"
  },
  "android.os.ISystemUpdateManager": {
    "1": "android.os.Bundle retrieveSystemUpdateInfo()",
    "2": "void updateSystemUpdateInfo(android.os.PersistableBundle)"
  },
  "android.view.accessibility.IAccessibilityManager": {
    "1": "void interrupt(int)",
    "2": "void sendAccessibilityEvent(android.view.accessibility.AccessibilityEvent, int)",
    "3": "long addClient(android.view.accessibility.IAccessibilityManagerClient, int)",
    "4": "boolean removeClient(android.view.accessibility.IAccessibilityManagerClient, int)",
    "5": "java.util.List getInstalledAccessibilityServiceList(int)",
    "6": "java.util.List getEnabledAccessibilityServiceList(int, int)",
    "7": "int addAccessibilityInteractionConnection(android.view.IWindow, android.os.IBinder, android.view.accessibility.IAccessibilityInteractionConnection, java.lang.String, int)",
    "8": "void removeAccessibilityInteractionConnection(android.view.IWindow)",
    "9": "void setPictureInPictureActionReplacingConnection(android.view.accessibility.IAccessibilityInteractionConnection)",
    "10": "void registerUiTestAutomationService(android.os.IBinder, android.accessibilityservice.IAccessibilityServiceClient, android.accessibilityservice.AccessibilityServiceInfo, int, int)",
    "11": "void unregisterUiTestAutomationService(android.accessibilityservice.IAccessibilityServiceClient)",
    "12": "android.os.IBinder getWindowToken(int, int)",
    "13": "void notifyAccessibilityButtonClicked(int, java.lang.String)",
    "14": "void notifyAccessibilityButtonVisibilityChanged(boolean)",
    "15": "void performAccessibilityShortcut(java.lang.String)",
    "16": "java.util.List getAccessibilityShortcutTargets(int)",
    "17": "boolean sendFingerprintGesture(int)",
    "18": "int getAccessibilityWindowId(android.os.IBinder)",
    "19": "long getRecommendedTimeoutMillis()",
    "20": "void registerSystemAction(android.app.RemoteAction, int)",
    "21": "void unregisterSystemAction(int)",
    "22": "void setWindowMagnificationConnection(android.view.accessibility.IWindowMagnificationConnection)",
    "23": "void associateEmbeddedHierarchy(android.os.IBinder, android.os.IBinder)",
    "24": "void disassociateEmbeddedHierarchy(android.os.IBinder)",
    "25": "int getFocusStrokeWidth()",
    "26": "int getFocusColor()",
    "27": "boolean isAudioDescriptionByDefaultEnabled()",
    "28": "void setSystemAudioCaptioningEnabled(boolean, int)",
    "29": "boolean isSystemAudioCaptioningUiEnabled(int)",
    "30": "void setSystemAudioCaptioningUiEnabled(boolean, int)",
    "31": "void setAccessibilityWindowAttributes(int, int, int, android.view.accessibility.AccessibilityWindowAttributes)",
    "32": "boolean registerProxyForDisplay(android.accessibilityservice.IAccessibilityServiceClient, int)",
    "33": "boolean unregisterProxyForDisplay(int)",
    "34": "void injectInputEventToInputFilter(android.view.InputEvent)",
    "35": "boolean startFlashNotificationSequence(java.lang.String, int, android.os.IBinder)",
    "36": "boolean stopFlashNotificationSequence(java.lang.String)",
    "37": "boolean startFlashNotificationEvent(java.lang.String, int, java.lang.String)",
    "38": "boolean isAccessibilityTargetAllowed(java.lang.String, int, int)",
    "39": "boolean sendRestrictedDialogIntent(java.lang.String, int, int)",
    "40": "android.view.accessibility.IAccessibilityManager$WindowTransformationSpec getWindowTransformationSpec(int)"
  },
  "android.os.IDeviceIdentifiersPolicyService": {
    "1": "java.lang.String getSerial()",
    "2": "java.lang.String getSerialForPackage(java.lang.String, java.lang.String)"
  },
  "com.android.internal.appwidget.IAppWidgetService": {
    "1": "android.content.pm.ParceledListSlice startListening(com.android.internal.appwidget.IAppWidgetHost, java.lang.String, int, [I)",
    "2": "void stopListening(java.lang.String, int)",
    "3": "int allocateAppWidgetId(java.lang.String, int)",
    "4": "void deleteAppWidgetId(java.lang.String, int)",
    "5": "void deleteHost(java.lang.String, int)",
    "6": "void deleteAllHosts()",
    "7": "android.widget.RemoteViews getAppWidgetViews(java.lang.String, int)",
    "8": "[I getAppWidgetIdsForHost(java.lang.String, int)",
    "9": "void setAppWidgetHidden(java.lang.String, int)",
    "10": "android.content.IntentSender createAppWidgetConfigIntentSender(java.lang.String, int, int)",
    "11": "void updateAppWidgetIds(java.lang.String, [I, android.widget.RemoteViews)",
    "12": "void updateAppWidgetOptions(java.lang.String, int, android.os.Bundle)",
    "13": "android.os.Bundle getAppWidgetOptions(java.lang.String, int)",
    "14": "void partiallyUpdateAppWidgetIds(java.lang.String, [I, android.widget.RemoteViews)",
    "15": "void updateAppWidgetProvider(android.content.ComponentName, android.widget.RemoteViews)",
    "16": "void updateAppWidgetProviderInfo(android.content.ComponentName, java.lang.String)",
    "17": "void notifyAppWidgetViewDataChanged(java.lang.String, [I, int)",
    "18": "android.content.pm.ParceledListSlice getInstalledProvidersForProfile(int, int, java.lang.String)",
    "19": "android.appwidget.AppWidgetProviderInfo getAppWidgetInfo(java.lang.String, int)",
    "20": "boolean hasBindAppWidgetPermission(java.lang.String, int)",
    "21": "void setBindAppWidgetPermission(java.lang.String, int, boolean)",
    "22": "boolean bindAppWidgetId(java.lang.String, int, int, android.content.ComponentName, android.os.Bundle)",
    "23": "boolean bindRemoteViewsService(java.lang.String, int, android.content.Intent, android.app.IApplicationThread, android.os.IBinder, android.app.IServiceConnection, long)",
    "24": "void notifyProviderInheritance([Landroid.content.ComponentName;)",
    "25": "[I getAppWidgetIds(android.content.ComponentName)",
    "26": "boolean isBoundWidgetPackage(java.lang.String, int)",
    "27": "boolean requestPinAppWidget(java.lang.String, android.content.ComponentName, android.os.Bundle, android.content.IntentSender)",
    "28": "boolean isRequestPinAppWidgetSupported()",
    "29": "void noteAppWidgetTapped(java.lang.String, int)"
  },
  "android.os.ISchedulingPolicyService": {
    "1": "int requestPriority(int, int, int, boolean)",
    "2": "int requestCpusetBoost(boolean, android.os.IBinder)"
  },
  "android.app.trust.ITrustManager": {
    "1": "void reportUnlockAttempt(boolean, int)",
    "2": "void reportUserRequestedUnlock(int, boolean)",
    "3": "void reportUserMayRequestUnlock(int)",
    "4": "void reportUnlockLockout(int, int)",
    "5": "void reportEnabledTrustAgentsChanged(int)",
    "6": "void registerTrustListener(android.app.trust.ITrustListener)",
    "7": "void unregisterTrustListener(android.app.trust.ITrustListener)",
    "8": "void reportKeyguardShowingChanged()",
    "9": "void setDeviceLockedForUser(int, boolean)",
    "10": "boolean isDeviceLocked(int, int)",
    "11": "boolean isDeviceSecure(int, int)",
    "12": "boolean isTrustUsuallyManaged(int)",
    "13": "void unlockedByBiometricForUser(int, android.hardware.biometrics.BiometricSourceType)",
    "14": "void clearAllBiometricRecognized(android.hardware.biometrics.BiometricSourceType, int)",
    "15": "boolean isActiveUnlockRunning(int)"
  },
  "android.bluetooth.IBluetoothManager": {
    "1": "android.bluetooth.IBluetooth registerAdapter(android.bluetooth.IBluetoothManagerCallback)",
    "2": "void unregisterAdapter(android.bluetooth.IBluetoothManagerCallback)",
    "3": "void registerStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)",
    "4": "void unregisterStateChangeCallback(android.bluetooth.IBluetoothStateChangeCallback)",
    "5": "boolean enable(android.content.AttributionSource)",
    "6": "boolean enableNoAutoConnect(android.content.AttributionSource)",
    "7": "boolean disable(android.content.AttributionSource, boolean)",
    "8": "int getState()",
    "9": "android.bluetooth.IBluetoothGatt getBluetoothGatt()",
    "10": "boolean bindBluetoothProfileService(int, java.lang.String, android.bluetooth.IBluetoothProfileServiceConnection)",
    "11": "void unbindBluetoothProfileService(int, android.bluetooth.IBluetoothProfileServiceConnection)",
    "12": "java.lang.String getAddress(android.content.AttributionSource)",
    "13": "java.lang.String getName(android.content.AttributionSource)",
    "14": "boolean onFactoryReset(android.content.AttributionSource)",
    "15": "boolean isBleScanAlwaysAvailable()",
    "16": "boolean enableBle(android.content.AttributionSource, android.os.IBinder)",
    "17": "boolean disableBle(android.content.AttributionSource, android.os.IBinder)",
    "18": "boolean isBleAppPresent()",
    "19": "boolean isHearingAidProfileSupported()",
    "20": "int setBtHciSnoopLogMode(int)",
    "21": "int getBtHciSnoopLogMode()"
  },
  "com.android.internal.telephony.IPhoneSubInfo": {
    "1": "java.lang.String getDeviceId(java.lang.String)",
    "2": "java.lang.String getDeviceIdWithFeature(java.lang.String, java.lang.String)",
    "3": "java.lang.String getNaiForSubscriber(int, java.lang.String, java.lang.String)",
    "4": "java.lang.String getDeviceIdForPhone(int, java.lang.String, java.lang.String)",
    "5": "java.lang.String getImeiForSubscriber(int, java.lang.String, java.lang.String)",
    "6": "java.lang.String getDeviceSvn(java.lang.String, java.lang.String)",
    "7": "java.lang.String getDeviceSvnUsingSubId(int, java.lang.String, java.lang.String)",
    "8": "java.lang.String getSubscriberId(java.lang.String)",
    "9": "java.lang.String getSubscriberIdWithFeature(java.lang.String, java.lang.String)",
    "10": "java.lang.String getSubscriberIdForSubscriber(int, java.lang.String, java.lang.String)",
    "11": "java.lang.String getGroupIdLevel1ForSubscriber(int, java.lang.String, java.lang.String)",
    "12": "java.lang.String getIccSerialNumber(java.lang.String)",
    "13": "java.lang.String getIccSerialNumberWithFeature(java.lang.String, java.lang.String)",
    "14": "java.lang.String getIccSerialNumberForSubscriber(int, java.lang.String, java.lang.String)",
    "15": "java.lang.String getLine1Number(java.lang.String, java.lang.String)",
    "16": "java.lang.String getLine1NumberForSubscriber(int, java.lang.String, java.lang.String)",
    "17": "java.lang.String getLine1AlphaTag(java.lang.String, java.lang.String)",
    "18": "java.lang.String getLine1AlphaTagForSubscriber(int, java.lang.String, java.lang.String)",
    "19": "java.lang.String getMsisdn(java.lang.String, java.lang.String)",
    "20": "java.lang.String getMsisdnForSubscriber(int, java.lang.String, java.lang.String)",
    "21": "java.lang.String getVoiceMailNumber(java.lang.String, java.lang.String)",
    "22": "java.lang.String getVoiceMailNumberForSubscriber(int, java.lang.String, java.lang.String)",
    "23": "android.telephony.ImsiEncryptionInfo getCarrierInfoForImsiEncryption(int, int, java.lang.String)",
    "24": "void setCarrierInfoForImsiEncryption(int, java.lang.String, android.telephony.ImsiEncryptionInfo)",
    "25": "void resetCarrierKeysForImsiEncryption(int, java.lang.String)",
    "26": "java.lang.String getVoiceMailAlphaTag(java.lang.String, java.lang.String)",
    "27": "java.lang.String getVoiceMailAlphaTagForSubscriber(int, java.lang.String, java.lang.String)",
    "28": "java.lang.String getIsimImpi(int)",
    "29": "java.lang.String getImsPrivateUserIdentity(int, java.lang.String, java.lang.String)",
    "30": "java.lang.String getIsimDomain(int)",
    "31": "[Ljava.lang.String; getIsimImpu(int)",
    "32": "java.util.List getImsPublicUserIdentities(int, java.lang.String, java.lang.String)",
    "33": "java.lang.String getIsimIst(int)",
    "34": "[Ljava.lang.String; getIsimPcscf(int)",
    "35": "java.lang.String getIccSimChallengeResponse(int, int, int, java.lang.String, java.lang.String, java.lang.String)",
    "36": "android.net.Uri getSmscIdentity(int, int)",
    "37": "java.lang.String getSimServiceTable(int, int)"
  },
  "android.security.attestationverification.IAttestationVerificationManagerService": {
    "1": "void verifyAttestation(android.security.attestationverification.AttestationProfile, int, android.os.Bundle, [B, com.android.internal.infra.AndroidFuture)",
    "2": "void verifyToken(android.security.attestationverification.VerificationToken, android.os.ParcelDuration, com.android.internal.infra.AndroidFuture)"
  },
  "android.net.IIpSecService": {
    "1": "android.net.IpSecSpiResponse allocateSecurityParameterIndex(java.lang.String, int, android.os.IBinder)",
    "2": "void releaseSecurityParameterIndex(int)",
    "3": "android.net.IpSecUdpEncapResponse openUdpEncapsulationSocket(int, android.os.IBinder)",
    "4": "void closeUdpEncapsulationSocket(int)",
    "5": "android.net.IpSecTunnelInterfaceResponse createTunnelInterface(java.lang.String, java.lang.String, android.net.Network, android.os.IBinder, java.lang.String)",
    "6": "void addAddressToTunnelInterface(int, android.net.LinkAddress, java.lang.String)",
    "7": "void removeAddressFromTunnelInterface(int, android.net.LinkAddress, java.lang.String)",
    "8": "void setNetworkForTunnelInterface(int, android.net.Network, java.lang.String)",
    "9": "void deleteTunnelInterface(int, java.lang.String)",
    "10": "android.net.IpSecTransformResponse createTransform(android.net.IpSecConfig, android.os.IBinder, java.lang.String)",
    "11": "void migrateTransform(int, java.lang.String, java.lang.String, java.lang.String)",
    "12": "void deleteTransform(int)",
    "13": "void applyTransportModeTransform(android.os.ParcelFileDescriptor, int, int)",
    "14": "void applyTunnelModeTransform(int, int, int, java.lang.String)",
    "15": "void removeTransportModeTransforms(android.os.ParcelFileDescriptor)"
  },
  "android.net.wifi.IWifiManager": {
    "1": "long getSupportedFeatures()",
    "2": "void getWifiActivityEnergyInfoAsync(android.net.wifi.IOnWifiActivityEnergyInfoListener)",
    "3": "void setNetworkSelectionConfig(android.net.wifi.WifiNetworkSelectionConfig)",
    "4": "void getNetworkSelectionConfig(android.net.wifi.IWifiNetworkSelectionConfigListener)",
    "5": "void setThirdPartyAppEnablingWifiConfirmationDialogEnabled(boolean)",
    "6": "boolean isThirdPartyAppEnablingWifiConfirmationDialogEnabled()",
    "7": "void setScreenOnScanSchedule([I, [I)",
    "8": "void setOneShotScreenOnConnectivityScanDelayMillis(int)",
    "9": "com.android.wifi.x.com.android.modules.utils.ParceledListSlice getConfiguredNetworks(java.lang.String, java.lang.String, boolean)",
    "10": "com.android.wifi.x.com.android.modules.utils.ParceledListSlice getPrivilegedConfiguredNetworks(java.lang.String, java.lang.String, android.os.Bundle)",
    "11": "android.net.wifi.WifiConfiguration getPrivilegedConnectedNetwork(java.lang.String, java.lang.String, android.os.Bundle)",
    "12": "java.util.Map getAllMatchingFqdnsForScanResults(java.util.List)",
    "13": "void setSsidsAllowlist(java.lang.String, java.util.List)",
    "14": "java.util.List getSsidsAllowlist(java.lang.String)",
    "15": "java.util.Map getMatchingOsuProviders(java.util.List)",
    "16": "java.util.Map getMatchingPasspointConfigsForOsuProviders(java.util.List)",
    "17": "int addOrUpdateNetwork(android.net.wifi.WifiConfiguration, java.lang.String, android.os.Bundle)",
    "18": "android.net.wifi.WifiManager$AddNetworkResult addOrUpdateNetworkPrivileged(android.net.wifi.WifiConfiguration, java.lang.String)",
    "19": "boolean addOrUpdatePasspointConfiguration(android.net.wifi.hotspot2.PasspointConfiguration, java.lang.String)",
    "20": "boolean removePasspointConfiguration(java.lang.String, java.lang.String)",
    "21": "java.util.List getPasspointConfigurations(java.lang.String)",
    "22": "java.util.List getWifiConfigsForPasspointProfiles(java.util.List)",
    "23": "void queryPasspointIcon(long, java.lang.String)",
    "24": "int matchProviderWithCurrentNetwork(java.lang.String)",
    "25": "boolean removeNetwork(int, java.lang.String)",
    "26": "boolean removeNonCallerConfiguredNetworks(java.lang.String)",
    "27": "boolean enableNetwork(int, boolean, java.lang.String)",
    "28": "boolean disableNetwork(int, java.lang.String)",
    "29": "void allowAutojoinGlobal(boolean, java.lang.String, android.os.Bundle)",
    "30": "void queryAutojoinGlobal(android.net.wifi.IBooleanListener)",
    "31": "void allowAutojoin(int, boolean)",
    "32": "void allowAutojoinPasspoint(java.lang.String, boolean)",
    "33": "void setMacRandomizationSettingPasspointEnabled(java.lang.String, boolean)",
    "34": "void setPasspointMeteredOverride(java.lang.String, int)",
    "35": "boolean startScan(java.lang.String, java.lang.String)",
    "36": "java.util.List getScanResults(java.lang.String, java.lang.String)",
    "37": "void getChannelData(android.net.wifi.IListListener, java.lang.String, android.os.Bundle)",
    "38": "boolean disconnect(java.lang.String)",
    "39": "boolean reconnect(java.lang.String)",
    "40": "boolean reassociate(java.lang.String)",
    "41": "android.net.wifi.WifiInfo getConnectionInfo(java.lang.String, java.lang.String)",
    "42": "boolean setWifiEnabled(java.lang.String, boolean)",
    "43": "int getWifiEnabledState()",
    "44": "void registerDriverCountryCodeChangedListener(android.net.wifi.IOnWifiDriverCountryCodeChangedListener, java.lang.String, java.lang.String)",
    "45": "void unregisterDriverCountryCodeChangedListener(android.net.wifi.IOnWifiDriverCountryCodeChangedListener)",
    "46": "void addWifiNetworkStateChangedListener(android.net.wifi.IWifiNetworkStateChangedListener)",
    "47": "void removeWifiNetworkStateChangedListener(android.net.wifi.IWifiNetworkStateChangedListener)",
    "48": "java.lang.String getCountryCode(java.lang.String, java.lang.String)",
    "49": "void setOverrideCountryCode(java.lang.String)",
    "50": "void clearOverrideCountryCode()",
    "51": "void setDefaultCountryCode(java.lang.String)",
    "52": "boolean is24GHzBandSupported()",
    "53": "boolean is5GHzBandSupported()",
    "54": "boolean is6GHzBandSupported()",
    "55": "boolean is60GHzBandSupported()",
    "56": "boolean isWifiStandardSupported(int)",
    "57": "android.net.DhcpInfo getDhcpInfo(java.lang.String)",
    "58": "void setScanAlwaysAvailable(boolean, java.lang.String)",
    "59": "boolean isScanAlwaysAvailable()",
    "60": "boolean acquireWifiLock(android.os.IBinder, int, java.lang.String, android.os.WorkSource)",
    "61": "void updateWifiLockWorkSource(android.os.IBinder, android.os.WorkSource)",
    "62": "boolean releaseWifiLock(android.os.IBinder)",
    "63": "void initializeMulticastFiltering()",
    "64": "boolean isMulticastEnabled()",
    "65": "void acquireMulticastLock(android.os.IBinder, java.lang.String)",
    "66": "void releaseMulticastLock(java.lang.String)",
    "67": "void updateInterfaceIpState(java.lang.String, int)",
    "68": "boolean isDefaultCoexAlgorithmEnabled()",
    "69": "void setCoexUnsafeChannels(java.util.List, int)",
    "70": "void registerCoexCallback(android.net.wifi.ICoexCallback)",
    "71": "void unregisterCoexCallback(android.net.wifi.ICoexCallback)",
    "72": "boolean startSoftAp(android.net.wifi.WifiConfiguration, java.lang.String)",
    "73": "boolean startTetheredHotspot(android.net.wifi.SoftApConfiguration, java.lang.String)",
    "74": "boolean stopSoftAp()",
    "75": "boolean validateSoftApConfiguration(android.net.wifi.SoftApConfiguration)",
    "76": "int startLocalOnlyHotspot(android.net.wifi.ILocalOnlyHotspotCallback, java.lang.String, java.lang.String, android.net.wifi.SoftApConfiguration, android.os.Bundle)",
    "77": "void stopLocalOnlyHotspot()",
    "78": "void registerLocalOnlyHotspotSoftApCallback(android.net.wifi.ISoftApCallback, android.os.Bundle)",
    "79": "void unregisterLocalOnlyHotspotSoftApCallback(android.net.wifi.ISoftApCallback, android.os.Bundle)",
    "80": "void startWatchLocalOnlyHotspot(android.net.wifi.ILocalOnlyHotspotCallback)",
    "81": "void stopWatchLocalOnlyHotspot()",
    "82": "int getWifiApEnabledState()",
    "83": "android.net.wifi.WifiConfiguration getWifiApConfiguration()",
    "84": "android.net.wifi.SoftApConfiguration getSoftApConfiguration()",
    "85": "void queryLastConfiguredTetheredApPassphraseSinceBoot(android.net.wifi.IStringListener)",
    "86": "boolean setWifiApConfiguration(android.net.wifi.WifiConfiguration, java.lang.String)",
    "87": "boolean setSoftApConfiguration(android.net.wifi.SoftApConfiguration, java.lang.String)",
    "88": "void notifyUserOfApBandConversion(java.lang.String)",
    "89": "void enableTdls(java.lang.String, boolean)",
    "90": "void enableTdlsWithRemoteIpAddress(java.lang.String, boolean, android.net.wifi.IBooleanListener)",
    "91": "void enableTdlsWithMacAddress(java.lang.String, boolean)",
    "92": "void enableTdlsWithRemoteMacAddress(java.lang.String, boolean, android.net.wifi.IBooleanListener)",
    "93": "void isTdlsOperationCurrentlyAvailable(android.net.wifi.IBooleanListener)",
    "94": "void getMaxSupportedConcurrentTdlsSessions(android.net.wifi.IIntegerListener)",
    "95": "void getNumberOfEnabledTdlsSessions(android.net.wifi.IIntegerListener)",
    "96": "java.lang.String getCurrentNetworkWpsNfcConfigurationToken()",
    "97": "void enableVerboseLogging(int)",
    "98": "int getVerboseLoggingLevel()",
    "99": "void disableEphemeralNetwork(java.lang.String, java.lang.String)",
    "100": "void factoryReset(java.lang.String)",
    "101": "android.net.Network getCurrentNetwork()",
    "102": "[B retrieveBackupData()",
    "103": "void restoreBackupData([B)",
    "104": "[B retrieveSoftApBackupData()",
    "105": "android.net.wifi.SoftApConfiguration restoreSoftApBackupData([B)",
    "106": "void restoreSupplicantBackupData([B, [B)",
    "107": "void startSubscriptionProvisioning(android.net.wifi.hotspot2.OsuProvider, android.net.wifi.hotspot2.IProvisioningCallback)",
    "108": "void registerSoftApCallback(android.net.wifi.ISoftApCallback)",
    "109": "void unregisterSoftApCallback(android.net.wifi.ISoftApCallback)",
    "110": "void addWifiVerboseLoggingStatusChangedListener(android.net.wifi.IWifiVerboseLoggingStatusChangedListener)",
    "111": "void removeWifiVerboseLoggingStatusChangedListener(android.net.wifi.IWifiVerboseLoggingStatusChangedListener)",
    "112": "void addOnWifiUsabilityStatsListener(android.net.wifi.IOnWifiUsabilityStatsListener)",
    "113": "void removeOnWifiUsabilityStatsListener(android.net.wifi.IOnWifiUsabilityStatsListener)",
    "114": "void registerTrafficStateCallback(android.net.wifi.ITrafficStateCallback)",
    "115": "void unregisterTrafficStateCallback(android.net.wifi.ITrafficStateCallback)",
    "116": "void registerNetworkRequestMatchCallback(android.net.wifi.INetworkRequestMatchCallback)",
    "117": "void unregisterNetworkRequestMatchCallback(android.net.wifi.INetworkRequestMatchCallback)",
    "118": "int addNetworkSuggestions(java.util.List, java.lang.String, java.lang.String)",
    "119": "int removeNetworkSuggestions(java.util.List, java.lang.String, int)",
    "120": "java.util.List getNetworkSuggestions(java.lang.String)",
    "121": "[Ljava.lang.String; getFactoryMacAddresses()",
    "122": "void setDeviceMobilityState(int)",
    "123": "void startDppAsConfiguratorInitiator(android.os.IBinder, java.lang.String, java.lang.String, int, int, android.net.wifi.IDppCallback)",
    "124": "void startDppAsEnrolleeInitiator(android.os.IBinder, java.lang.String, android.net.wifi.IDppCallback)",
    "125": "void startDppAsEnrolleeResponder(android.os.IBinder, java.lang.String, int, android.net.wifi.IDppCallback)",
    "126": "void stopDppSession()",
    "127": "void updateWifiUsabilityScore(int, int, int)",
    "128": "void connect(android.net.wifi.WifiConfiguration, int, android.net.wifi.IActionListener, java.lang.String)",
    "129": "void save(android.net.wifi.WifiConfiguration, android.net.wifi.IActionListener, java.lang.String)",
    "130": "void forget(int, android.net.wifi.IActionListener)",
    "131": "void registerScanResultsCallback(android.net.wifi.IScanResultsCallback)",
    "132": "void unregisterScanResultsCallback(android.net.wifi.IScanResultsCallback)",
    "133": "void registerSuggestionConnectionStatusListener(android.net.wifi.ISuggestionConnectionStatusListener, java.lang.String, java.lang.String)",
    "134": "void unregisterSuggestionConnectionStatusListener(android.net.wifi.ISuggestionConnectionStatusListener, java.lang.String)",
    "135": "void addLocalOnlyConnectionStatusListener(android.net.wifi.ILocalOnlyConnectionStatusListener, java.lang.String, java.lang.String)",
    "136": "void removeLocalOnlyConnectionStatusListener(android.net.wifi.ILocalOnlyConnectionStatusListener, java.lang.String)",
    "137": "int calculateSignalLevel(int)",
    "138": "java.util.List getWifiConfigForMatchedNetworkSuggestionsSharedWithUser(java.util.List)",
    "139": "boolean setWifiConnectedNetworkScorer(android.os.IBinder, android.net.wifi.IWifiConnectedNetworkScorer)",
    "140": "void clearWifiConnectedNetworkScorer()",
    "141": "void setExternalPnoScanRequest(android.os.IBinder, android.net.wifi.IPnoScanResultsCallback, java.util.List, [I, java.lang.String, java.lang.String)",
    "142": "void clearExternalPnoScanRequest()",
    "143": "void getLastCallerInfoForApi(int, android.net.wifi.ILastCallerListener)",
    "144": "java.util.Map getMatchingScanResults(java.util.List, java.util.List, java.lang.String, java.lang.String)",
    "145": "void setScanThrottleEnabled(boolean)",
    "146": "boolean isScanThrottleEnabled()",
    "147": "java.util.Map getAllMatchingPasspointProfilesForScanResults(java.util.List)",
    "148": "void setAutoWakeupEnabled(boolean)",
    "149": "boolean isAutoWakeupEnabled()",
    "150": "void startRestrictingAutoJoinToSubscriptionId(int)",
    "151": "void stopRestrictingAutoJoinToSubscriptionId()",
    "152": "void setCarrierNetworkOffloadEnabled(int, boolean, boolean)",
    "153": "boolean isCarrierNetworkOffloadEnabled(int, boolean)",
    "154": "void registerSubsystemRestartCallback(android.net.wifi.ISubsystemRestartCallback)",
    "155": "void unregisterSubsystemRestartCallback(android.net.wifi.ISubsystemRestartCallback)",
    "156": "void restartWifiSubsystem()",
    "157": "void addSuggestionUserApprovalStatusListener(android.net.wifi.ISuggestionUserApprovalStatusListener, java.lang.String)",
    "158": "void removeSuggestionUserApprovalStatusListener(android.net.wifi.ISuggestionUserApprovalStatusListener, java.lang.String)",
    "159": "void setEmergencyScanRequestInProgress(boolean)",
    "160": "void removeAppState(int, java.lang.String)",
    "161": "boolean setWifiScoringEnabled(boolean)",
    "162": "void flushPasspointAnqpCache(java.lang.String)",
    "163": "java.util.List getUsableChannels(int, int, int, java.lang.String, android.os.Bundle)",
    "164": "boolean isWifiPasspointEnabled()",
    "165": "void setWifiPasspointEnabled(boolean)",
    "166": "int getStaConcurrencyForMultiInternetMode()",
    "167": "boolean setStaConcurrencyForMultiInternetMode(int)",
    "168": "void notifyMinimumRequiredWifiSecurityLevelChanged(int)",
    "169": "void notifyWifiSsidPolicyChanged(int, java.util.List)",
    "170": "[Ljava.lang.String; getOemPrivilegedWifiAdminPackages()",
    "171": "void replyToP2pInvitationReceivedDialog(int, boolean, java.lang.String)",
    "172": "void replyToSimpleDialog(int, int)",
    "173": "void addCustomDhcpOptions(android.net.wifi.WifiSsid, [B, java.util.List)",
    "174": "void removeCustomDhcpOptions(android.net.wifi.WifiSsid, [B)",
    "175": "void reportCreateInterfaceImpact(java.lang.String, int, boolean, android.net.wifi.IInterfaceCreationInfoCallback)",
    "176": "int getMaxNumberOfChannelsPerRequest()",
    "177": "void addQosPolicies(java.util.List, android.os.IBinder, java.lang.String, android.net.wifi.IListListener)",
    "178": "void removeQosPolicies([I, java.lang.String)",
    "179": "void removeAllQosPolicies(java.lang.String)",
    "180": "void setLinkLayerStatsPollingInterval(int)",
    "181": "void getLinkLayerStatsPollingInterval(android.net.wifi.IIntegerListener)",
    "182": "void setMloMode(int, android.net.wifi.IBooleanListener)",
    "183": "void getMloMode(android.net.wifi.IIntegerListener)",
    "184": "void addWifiLowLatencyLockListener(android.net.wifi.IWifiLowLatencyLockListener)",
    "185": "void removeWifiLowLatencyLockListener(android.net.wifi.IWifiLowLatencyLockListener)",
    "186": "void getMaxMloAssociationLinkCount(android.net.wifi.IIntegerListener, android.os.Bundle)",
    "187": "void getMaxMloStrLinkCount(android.net.wifi.IIntegerListener, android.os.Bundle)",
    "188": "void getSupportedSimultaneousBandCombinations(android.net.wifi.IWifiBandsListener, android.os.Bundle)"
  },
  "android.hardware.usb.IUsbManager": {
    "1": "void getDeviceList(android.os.Bundle)",
    "2": "android.os.ParcelFileDescriptor openDevice(java.lang.String, java.lang.String)",
    "3": "android.hardware.usb.UsbAccessory getCurrentAccessory()",
    "4": "android.os.ParcelFileDescriptor openAccessory(android.hardware.usb.UsbAccessory)",
    "5": "void setDevicePackage(android.hardware.usb.UsbDevice, java.lang.String, int)",
    "6": "void setAccessoryPackage(android.hardware.usb.UsbAccessory, java.lang.String, int)",
    "7": "void addDevicePackagesToPreferenceDenied(android.hardware.usb.UsbDevice, [Ljava.lang.String;, android.os.UserHandle)",
    "8": "void addAccessoryPackagesToPreferenceDenied(android.hardware.usb.UsbAccessory, [Ljava.lang.String;, android.os.UserHandle)",
    "9": "void removeDevicePackagesFromPreferenceDenied(android.hardware.usb.UsbDevice, [Ljava.lang.String;, android.os.UserHandle)",
    "10": "void removeAccessoryPackagesFromPreferenceDenied(android.hardware.usb.UsbAccessory, [Ljava.lang.String;, android.os.UserHandle)",
    "11": "void setDevicePersistentPermission(android.hardware.usb.UsbDevice, int, android.os.UserHandle, boolean)",
    "12": "void setAccessoryPersistentPermission(android.hardware.usb.UsbAccessory, int, android.os.UserHandle, boolean)",
    "13": "boolean hasDevicePermission(android.hardware.usb.UsbDevice, java.lang.String)",
    "14": "boolean hasDevicePermissionWithIdentity(android.hardware.usb.UsbDevice, java.lang.String, int, int)",
    "15": "boolean hasAccessoryPermission(android.hardware.usb.UsbAccessory)",
    "16": "boolean hasAccessoryPermissionWithIdentity(android.hardware.usb.UsbAccessory, int, int)",
    "17": "void requestDevicePermission(android.hardware.usb.UsbDevice, java.lang.String, android.app.PendingIntent)",
    "18": "void requestAccessoryPermission(android.hardware.usb.UsbAccessory, java.lang.String, android.app.PendingIntent)",
    "19": "void grantDevicePermission(android.hardware.usb.UsbDevice, int)",
    "20": "void grantAccessoryPermission(android.hardware.usb.UsbAccessory, int)",
    "21": "boolean hasDefaults(java.lang.String, int)",
    "22": "void clearDefaults(java.lang.String, int)",
    "23": "boolean isFunctionEnabled(java.lang.String)",
    "24": "void setCurrentFunctions(long, int)",
    "25": "void setCurrentFunction(java.lang.String, boolean, int)",
    "26": "long getCurrentFunctions()",
    "27": "int getCurrentUsbSpeed()",
    "28": "int getGadgetHalVersion()",
    "29": "void setScreenUnlockedFunctions(long)",
    "30": "long getScreenUnlockedFunctions()",
    "31": "void resetUsbGadget()",
    "32": "void resetUsbPort(java.lang.String, int, android.hardware.usb.IUsbOperationInternal)",
    "33": "boolean enableUsbData(java.lang.String, boolean, int, android.hardware.usb.IUsbOperationInternal)",
    "34": "void enableUsbDataWhileDocked(java.lang.String, int, android.hardware.usb.IUsbOperationInternal)",
    "35": "int getUsbHalVersion()",
    "36": "android.os.ParcelFileDescriptor getControlFd(long)",
    "37": "java.util.List getPorts()",
    "38": "android.hardware.usb.UsbPortStatus getPortStatus(java.lang.String)",
    "39": "void setPortRoles(java.lang.String, int, int)",
    "40": "void enableLimitPowerTransfer(java.lang.String, boolean, int, android.hardware.usb.IUsbOperationInternal)",
    "41": "void enableContaminantDetection(java.lang.String, boolean)",
    "42": "void setUsbDeviceConnectionHandler(android.content.ComponentName)",
    "43": "boolean registerForDisplayPortEvents(android.hardware.usb.IDisplayPortAltModeInfoListener)",
    "44": "void unregisterForDisplayPortEvents(android.hardware.usb.IDisplayPortAltModeInfoListener)"
  },
  "android.media.IMediaRouterService": {
    "1": "void registerClientAsUser(android.media.IMediaRouterClient, java.lang.String, int)",
    "2": "void unregisterClient(android.media.IMediaRouterClient)",
    "3": "void registerClientGroupId(android.media.IMediaRouterClient, java.lang.String)",
    "4": "android.media.MediaRouterClientState getState(android.media.IMediaRouterClient)",
    "5": "boolean isPlaybackActive(android.media.IMediaRouterClient)",
    "6": "void setBluetoothA2dpOn(android.media.IMediaRouterClient, boolean)",
    "7": "void setDiscoveryRequest(android.media.IMediaRouterClient, int, boolean)",
    "8": "void setSelectedRoute(android.media.IMediaRouterClient, java.lang.String, boolean)",
    "9": "void requestSetVolume(android.media.IMediaRouterClient, java.lang.String, int)",
    "10": "void requestUpdateVolume(android.media.IMediaRouterClient, java.lang.String, int)",
    "11": "boolean verifyPackageExists(java.lang.String)",
    "12": "java.util.List getSystemRoutes()",
    "13": "android.media.RoutingSessionInfo getSystemSessionInfo()",
    "14": "void registerRouter2(android.media.IMediaRouter2, java.lang.String)",
    "15": "void unregisterRouter2(android.media.IMediaRouter2)",
    "16": "void setDiscoveryRequestWithRouter2(android.media.IMediaRouter2, android.media.RouteDiscoveryPreference)",
    "17": "void setRouteListingPreference(android.media.IMediaRouter2, android.media.RouteListingPreference)",
    "18": "void setRouteVolumeWithRouter2(android.media.IMediaRouter2, android.media.MediaRoute2Info, int)",
    "19": "void requestCreateSessionWithRouter2(android.media.IMediaRouter2, int, long, android.media.RoutingSessionInfo, android.media.MediaRoute2Info, android.os.Bundle)",
    "20": "void selectRouteWithRouter2(android.media.IMediaRouter2, java.lang.String, android.media.MediaRoute2Info)",
    "21": "void deselectRouteWithRouter2(android.media.IMediaRouter2, java.lang.String, android.media.MediaRoute2Info)",
    "22": "void transferToRouteWithRouter2(android.media.IMediaRouter2, java.lang.String, android.media.MediaRoute2Info)",
    "23": "void setSessionVolumeWithRouter2(android.media.IMediaRouter2, java.lang.String, int)",
    "24": "void releaseSessionWithRouter2(android.media.IMediaRouter2, java.lang.String)",
    "25": "java.util.List getRemoteSessions(android.media.IMediaRouter2Manager)",
    "26": "android.media.RoutingSessionInfo getSystemSessionInfoForPackage(android.media.IMediaRouter2Manager, java.lang.String)",
    "27": "void registerManager(android.media.IMediaRouter2Manager, java.lang.String)",
    "28": "void unregisterManager(android.media.IMediaRouter2Manager)",
    "29": "void setRouteVolumeWithManager(android.media.IMediaRouter2Manager, int, android.media.MediaRoute2Info, int)",
    "30": "void startScan(android.media.IMediaRouter2Manager)",
    "31": "void stopScan(android.media.IMediaRouter2Manager)",
    "32": "void requestCreateSessionWithManager(android.media.IMediaRouter2Manager, int, android.media.RoutingSessionInfo, android.media.MediaRoute2Info)",
    "33": "void selectRouteWithManager(android.media.IMediaRouter2Manager, int, java.lang.String, android.media.MediaRoute2Info)",
    "34": "void deselectRouteWithManager(android.media.IMediaRouter2Manager, int, java.lang.String, android.media.MediaRoute2Info)",
    "35": "void transferToRouteWithManager(android.media.IMediaRouter2Manager, int, java.lang.String, android.media.MediaRoute2Info)",
    "36": "void setSessionVolumeWithManager(android.media.IMediaRouter2Manager, int, java.lang.String, int)",
    "37": "void releaseSessionWithManager(android.media.IMediaRouter2Manager, int, java.lang.String)",
    "38": "boolean showMediaOutputSwitcher(java.lang.String)"
  },
  "android.permission.IPermissionManager": {
    "1": "android.content.pm.ParceledListSlice getAllPermissionGroups(int)",
    "2": "android.content.pm.PermissionGroupInfo getPermissionGroupInfo(java.lang.String, int)",
    "3": "android.content.pm.PermissionInfo getPermissionInfo(java.lang.String, java.lang.String, int)",
    "4": "android.content.pm.ParceledListSlice queryPermissionsByGroup(java.lang.String, int)",
    "5": "boolean addPermission(android.content.pm.PermissionInfo, boolean)",
    "6": "void removePermission(java.lang.String)",
    "7": "int getPermissionFlags(java.lang.String, java.lang.String, int)",
    "8": "void updatePermissionFlags(java.lang.String, java.lang.String, int, int, boolean, int)",
    "9": "void updatePermissionFlagsForAllApps(int, int, int)",
    "10": "void addOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)",
    "11": "void removeOnPermissionsChangeListener(android.permission.IOnPermissionsChangeListener)",
    "12": "java.util.List getAllowlistedRestrictedPermissions(java.lang.String, int, int)",
    "13": "boolean addAllowlistedRestrictedPermission(java.lang.String, java.lang.String, int, int)",
    "14": "boolean removeAllowlistedRestrictedPermission(java.lang.String, java.lang.String, int, int)",
    "15": "void grantRuntimePermission(java.lang.String, java.lang.String, int)",
    "16": "void revokeRuntimePermission(java.lang.String, java.lang.String, int, java.lang.String)",
    "17": "void revokePostNotificationPermissionWithoutKillForTest(java.lang.String, int)",
    "18": "boolean shouldShowRequestPermissionRationale(java.lang.String, java.lang.String, int)",
    "19": "boolean isPermissionRevokedByPolicy(java.lang.String, java.lang.String, int)",
    "20": "java.util.List getSplitPermissions()",
    "21": "void startOneTimePermissionSession(java.lang.String, int, long, long)",
    "22": "void stopOneTimePermissionSession(java.lang.String, int)",
    "23": "java.util.List getAutoRevokeExemptionRequestedPackages(int)",
    "24": "java.util.List getAutoRevokeExemptionGrantedPackages(int)",
    "25": "boolean setAutoRevokeExempted(java.lang.String, boolean, int)",
    "26": "boolean isAutoRevokeExempted(java.lang.String, int)",
    "27": "void registerAttributionSource(android.content.AttributionSourceState)",
    "28": "boolean isRegisteredAttributionSource(android.content.AttributionSourceState)"
  },
  "android.app.admin.IDevicePolicyManager": {
    "1": "void setPasswordQuality(android.content.ComponentName, int, boolean)",
    "2": "int getPasswordQuality(android.content.ComponentName, int, boolean)",
    "3": "void setPasswordMinimumLength(android.content.ComponentName, int, boolean)",
    "4": "int getPasswordMinimumLength(android.content.ComponentName, int, boolean)",
    "5": "void setPasswordMinimumUpperCase(android.content.ComponentName, int, boolean)",
    "6": "int getPasswordMinimumUpperCase(android.content.ComponentName, int, boolean)",
    "7": "void setPasswordMinimumLowerCase(android.content.ComponentName, int, boolean)",
    "8": "int getPasswordMinimumLowerCase(android.content.ComponentName, int, boolean)",
    "9": "void setPasswordMinimumLetters(android.content.ComponentName, int, boolean)",
    "10": "int getPasswordMinimumLetters(android.content.ComponentName, int, boolean)",
    "11": "void setPasswordMinimumNumeric(android.content.ComponentName, int, boolean)",
    "12": "int getPasswordMinimumNumeric(android.content.ComponentName, int, boolean)",
    "13": "void setPasswordMinimumSymbols(android.content.ComponentName, int, boolean)",
    "14": "int getPasswordMinimumSymbols(android.content.ComponentName, int, boolean)",
    "15": "void setPasswordMinimumNonLetter(android.content.ComponentName, int, boolean)",
    "16": "int getPasswordMinimumNonLetter(android.content.ComponentName, int, boolean)",
    "17": "android.app.admin.PasswordMetrics getPasswordMinimumMetrics(int, boolean)",
    "18": "void setPasswordHistoryLength(android.content.ComponentName, int, boolean)",
    "19": "int getPasswordHistoryLength(android.content.ComponentName, int, boolean)",
    "20": "void setPasswordExpirationTimeout(android.content.ComponentName, java.lang.String, long, boolean)",
    "21": "long getPasswordExpirationTimeout(android.content.ComponentName, int, boolean)",
    "22": "long getPasswordExpiration(android.content.ComponentName, int, boolean)",
    "23": "boolean isActivePasswordSufficient(java.lang.String, int, boolean)",
    "24": "boolean isActivePasswordSufficientForDeviceRequirement()",
    "25": "boolean isPasswordSufficientAfterProfileUnification(int, int)",
    "26": "int getPasswordComplexity(boolean)",
    "27": "void setRequiredPasswordComplexity(java.lang.String, int, boolean)",
    "28": "int getRequiredPasswordComplexity(java.lang.String, boolean)",
    "29": "int getAggregatedPasswordComplexityForUser(int, boolean)",
    "30": "boolean isUsingUnifiedPassword(android.content.ComponentName)",
    "31": "int getCurrentFailedPasswordAttempts(java.lang.String, int, boolean)",
    "32": "int getProfileWithMinimumFailedPasswordsForWipe(int, boolean)",
    "33": "void setMaximumFailedPasswordsForWipe(android.content.ComponentName, java.lang.String, int, boolean)",
    "34": "int getMaximumFailedPasswordsForWipe(android.content.ComponentName, int, boolean)",
    "35": "boolean resetPassword(java.lang.String, int)",
    "36": "void setMaximumTimeToLock(android.content.ComponentName, java.lang.String, long, boolean)",
    "37": "long getMaximumTimeToLock(android.content.ComponentName, int, boolean)",
    "38": "void setRequiredStrongAuthTimeout(android.content.ComponentName, java.lang.String, long, boolean)",
    "39": "long getRequiredStrongAuthTimeout(android.content.ComponentName, int, boolean)",
    "40": "void lockNow(int, java.lang.String, boolean)",
    "41": "void wipeDataWithReason(java.lang.String, int, java.lang.String, boolean, boolean)",
    "42": "void setFactoryResetProtectionPolicy(android.content.ComponentName, java.lang.String, android.app.admin.FactoryResetProtectionPolicy)",
    "43": "android.app.admin.FactoryResetProtectionPolicy getFactoryResetProtectionPolicy(android.content.ComponentName)",
    "44": "boolean isFactoryResetProtectionPolicySupported()",
    "45": "void sendLostModeLocationUpdate(com.android.internal.infra.AndroidFuture)",
    "46": "android.content.ComponentName setGlobalProxy(android.content.ComponentName, java.lang.String, java.lang.String)",
    "47": "android.content.ComponentName getGlobalProxyAdmin(int)",
    "48": "void setRecommendedGlobalProxy(android.content.ComponentName, android.net.ProxyInfo)",
    "49": "int setStorageEncryption(android.content.ComponentName, boolean)",
    "50": "boolean getStorageEncryption(android.content.ComponentName, int)",
    "51": "int getStorageEncryptionStatus(java.lang.String, int)",
    "52": "boolean requestBugreport(android.content.ComponentName)",
    "53": "void setCameraDisabled(android.content.ComponentName, java.lang.String, boolean, boolean)",
    "54": "boolean getCameraDisabled(android.content.ComponentName, java.lang.String, int, boolean)",
    "55": "void setScreenCaptureDisabled(android.content.ComponentName, java.lang.String, boolean, boolean)",
    "56": "boolean getScreenCaptureDisabled(android.content.ComponentName, int, boolean)",
    "57": "void setNearbyNotificationStreamingPolicy(int)",
    "58": "int getNearbyNotificationStreamingPolicy(int)",
    "59": "void setNearbyAppStreamingPolicy(int)",
    "60": "int getNearbyAppStreamingPolicy(int)",
    "61": "void setKeyguardDisabledFeatures(android.content.ComponentName, java.lang.String, int, boolean)",
    "62": "int getKeyguardDisabledFeatures(android.content.ComponentName, int, boolean)",
    "63": "void setActiveAdmin(android.content.ComponentName, boolean, int)",
    "64": "boolean isAdminActive(android.content.ComponentName, int)",
    "65": "java.util.List getActiveAdmins(int)",
    "66": "boolean packageHasActiveAdmins(java.lang.String, int)",
    "67": "void getRemoveWarning(android.content.ComponentName, android.os.RemoteCallback, int)",
    "68": "void removeActiveAdmin(android.content.ComponentName, int)",
    "69": "void forceRemoveActiveAdmin(android.content.ComponentName, int)",
    "70": "boolean hasGrantedPolicy(android.content.ComponentName, int, int)",
    "71": "void reportPasswordChanged(android.app.admin.PasswordMetrics, int)",
    "72": "void reportFailedPasswordAttempt(int, boolean)",
    "73": "void reportSuccessfulPasswordAttempt(int)",
    "74": "void reportFailedBiometricAttempt(int)",
    "75": "void reportSuccessfulBiometricAttempt(int)",
    "76": "void reportKeyguardDismissed(int)",
    "77": "void reportKeyguardSecured(int)",
    "78": "boolean setDeviceOwner(android.content.ComponentName, int, boolean)",
    "79": "android.content.ComponentName getDeviceOwnerComponent(boolean)",
    "80": "boolean hasDeviceOwner()",
    "81": "java.lang.String getDeviceOwnerName()",
    "82": "void clearDeviceOwner(java.lang.String)",
    "83": "int getDeviceOwnerUserId()",
    "84": "boolean setProfileOwner(android.content.ComponentName, int)",
    "85": "android.content.ComponentName getProfileOwnerAsUser(int)",
    "86": "android.content.ComponentName getProfileOwnerOrDeviceOwnerSupervisionComponent(android.os.UserHandle)",
    "87": "boolean isSupervisionComponent(android.content.ComponentName)",
    "88": "java.lang.String getProfileOwnerName(int)",
    "89": "void setProfileEnabled(android.content.ComponentName)",
    "90": "void setProfileName(android.content.ComponentName, java.lang.String)",
    "91": "void clearProfileOwner(android.content.ComponentName)",
    "92": "boolean hasUserSetupCompleted()",
    "93": "boolean isOrganizationOwnedDeviceWithManagedProfile()",
    "94": "boolean checkDeviceIdentifierAccess(java.lang.String, int, int)",
    "95": "void setDeviceOwnerLockScreenInfo(android.content.ComponentName, java.lang.CharSequence)",
    "96": "java.lang.CharSequence getDeviceOwnerLockScreenInfo()",
    "97": "[Ljava.lang.String; setPackagesSuspended(android.content.ComponentName, java.lang.String, [Ljava.lang.String;, boolean)",
    "98": "boolean isPackageSuspended(android.content.ComponentName, java.lang.String, java.lang.String)",
    "99": "java.util.List listPolicyExemptApps()",
    "100": "boolean installCaCert(android.content.ComponentName, java.lang.String, [B)",
    "101": "void uninstallCaCerts(android.content.ComponentName, java.lang.String, [Ljava.lang.String;)",
    "102": "void enforceCanManageCaCerts(android.content.ComponentName, java.lang.String)",
    "103": "boolean approveCaCert(java.lang.String, int, boolean)",
    "104": "boolean isCaCertApproved(java.lang.String, int)",
    "105": "boolean installKeyPair(android.content.ComponentName, java.lang.String, [B, [B, [B, java.lang.String, boolean, boolean)",
    "106": "boolean removeKeyPair(android.content.ComponentName, java.lang.String, java.lang.String)",
    "107": "boolean hasKeyPair(java.lang.String, java.lang.String)",
    "108": "boolean generateKeyPair(android.content.ComponentName, java.lang.String, java.lang.String, android.security.keystore.ParcelableKeyGenParameterSpec, int, android.security.keymaster.KeymasterCertificateChain)",
    "109": "boolean setKeyPairCertificate(android.content.ComponentName, java.lang.String, java.lang.String, [B, [B, boolean)",
    "110": "void choosePrivateKeyAlias(int, android.net.Uri, java.lang.String, android.os.IBinder)",
    "111": "void setDelegatedScopes(android.content.ComponentName, java.lang.String, java.util.List)",
    "112": "java.util.List getDelegatedScopes(android.content.ComponentName, java.lang.String)",
    "113": "java.util.List getDelegatePackages(android.content.ComponentName, java.lang.String)",
    "114": "void setCertInstallerPackage(android.content.ComponentName, java.lang.String)",
    "115": "java.lang.String getCertInstallerPackage(android.content.ComponentName)",
    "116": "boolean setAlwaysOnVpnPackage(android.content.ComponentName, java.lang.String, boolean, java.util.List)",
    "117": "java.lang.String getAlwaysOnVpnPackage(android.content.ComponentName)",
    "118": "java.lang.String getAlwaysOnVpnPackageForUser(int)",
    "119": "boolean isAlwaysOnVpnLockdownEnabled(android.content.ComponentName)",
    "120": "boolean isAlwaysOnVpnLockdownEnabledForUser(int)",
    "121": "java.util.List getAlwaysOnVpnLockdownAllowlist(android.content.ComponentName)",
    "122": "void addPersistentPreferredActivity(android.content.ComponentName, java.lang.String, android.content.IntentFilter, android.content.ComponentName)",
    "123": "void clearPackagePersistentPreferredActivities(android.content.ComponentName, java.lang.String, java.lang.String)",
    "124": "void setDefaultSmsApplication(android.content.ComponentName, java.lang.String, java.lang.String, boolean)",
    "125": "void setDefaultDialerApplication(java.lang.String)",
    "126": "void setApplicationRestrictions(android.content.ComponentName, java.lang.String, java.lang.String, android.os.Bundle)",
    "127": "android.os.Bundle getApplicationRestrictions(android.content.ComponentName, java.lang.String, java.lang.String)",
    "128": "boolean setApplicationRestrictionsManagingPackage(android.content.ComponentName, java.lang.String)",
    "129": "java.lang.String getApplicationRestrictionsManagingPackage(android.content.ComponentName)",
    "130": "boolean isCallerApplicationRestrictionsManagingPackage(java.lang.String)",
    "131": "void setRestrictionsProvider(android.content.ComponentName, android.content.ComponentName)",
    "132": "android.content.ComponentName getRestrictionsProvider(int)",
    "133": "void setUserRestriction(android.content.ComponentName, java.lang.String, java.lang.String, boolean, boolean)",
    "134": "void setUserRestrictionGlobally(java.lang.String, java.lang.String)",
    "135": "android.os.Bundle getUserRestrictions(android.content.ComponentName, java.lang.String, boolean)",
    "136": "android.os.Bundle getUserRestrictionsGlobally(java.lang.String)",
    "137": "void addCrossProfileIntentFilter(android.content.ComponentName, java.lang.String, android.content.IntentFilter, int)",
    "138": "void clearCrossProfileIntentFilters(android.content.ComponentName, java.lang.String)",
    "139": "boolean setPermittedAccessibilityServices(android.content.ComponentName, java.util.List)",
    "140": "java.util.List getPermittedAccessibilityServices(android.content.ComponentName)",
    "141": "java.util.List getPermittedAccessibilityServicesForUser(int)",
    "142": "boolean isAccessibilityServicePermittedByAdmin(android.content.ComponentName, java.lang.String, int)",
    "143": "boolean setPermittedInputMethods(android.content.ComponentName, java.lang.String, java.util.List, boolean)",
    "144": "java.util.List getPermittedInputMethods(android.content.ComponentName, java.lang.String, boolean)",
    "145": "java.util.List getPermittedInputMethodsAsUser(int)",
    "146": "boolean isInputMethodPermittedByAdmin(android.content.ComponentName, java.lang.String, int, boolean)",
    "147": "boolean setPermittedCrossProfileNotificationListeners(android.content.ComponentName, java.util.List)",
    "148": "java.util.List getPermittedCrossProfileNotificationListeners(android.content.ComponentName)",
    "149": "boolean isNotificationListenerServicePermitted(java.lang.String, int)",
    "150": "android.content.Intent createAdminSupportIntent(java.lang.String)",
    "151": "android.os.Bundle getEnforcingAdminAndUserDetails(int, java.lang.String)",
    "152": "boolean setApplicationHidden(android.content.ComponentName, java.lang.String, java.lang.String, boolean, boolean)",
    "153": "boolean isApplicationHidden(android.content.ComponentName, java.lang.String, java.lang.String, boolean)",
    "154": "android.os.UserHandle createAndManageUser(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, int)",
    "155": "boolean removeUser(android.content.ComponentName, android.os.UserHandle)",
    "156": "boolean switchUser(android.content.ComponentName, android.os.UserHandle)",
    "157": "int startUserInBackground(android.content.ComponentName, android.os.UserHandle)",
    "158": "int stopUser(android.content.ComponentName, android.os.UserHandle)",
    "159": "int logoutUser(android.content.ComponentName)",
    "160": "int logoutUserInternal()",
    "161": "int getLogoutUserId()",
    "162": "java.util.List getSecondaryUsers(android.content.ComponentName)",
    "163": "void acknowledgeNewUserDisclaimer(int)",
    "164": "boolean isNewUserDisclaimerAcknowledged(int)",
    "165": "void enableSystemApp(android.content.ComponentName, java.lang.String, java.lang.String)",
    "166": "int enableSystemAppWithIntent(android.content.ComponentName, java.lang.String, android.content.Intent)",
    "167": "boolean installExistingPackage(android.content.ComponentName, java.lang.String, java.lang.String)",
    "168": "void setAccountManagementDisabled(android.content.ComponentName, java.lang.String, java.lang.String, boolean, boolean)",
    "169": "[Ljava.lang.String; getAccountTypesWithManagementDisabled(java.lang.String)",
    "170": "[Ljava.lang.String; getAccountTypesWithManagementDisabledAsUser(int, java.lang.String, boolean)",
    "171": "void setSecondaryLockscreenEnabled(android.content.ComponentName, boolean)",
    "172": "boolean isSecondaryLockscreenEnabled(android.os.UserHandle)",
    "173": "void setPreferentialNetworkServiceConfigs(java.util.List)",
    "174": "java.util.List getPreferentialNetworkServiceConfigs()",
    "175": "void setLockTaskPackages(android.content.ComponentName, java.lang.String, [Ljava.lang.String;)",
    "176": "[Ljava.lang.String; getLockTaskPackages(android.content.ComponentName, java.lang.String)",
    "177": "boolean isLockTaskPermitted(java.lang.String)",
    "178": "void setLockTaskFeatures(android.content.ComponentName, java.lang.String, int)",
    "179": "int getLockTaskFeatures(android.content.ComponentName, java.lang.String)",
    "180": "void setGlobalSetting(android.content.ComponentName, java.lang.String, java.lang.String)",
    "181": "void setSystemSetting(android.content.ComponentName, java.lang.String, java.lang.String)",
    "182": "void setSecureSetting(android.content.ComponentName, java.lang.String, java.lang.String)",
    "183": "void setConfiguredNetworksLockdownState(android.content.ComponentName, java.lang.String, boolean)",
    "184": "boolean hasLockdownAdminConfiguredNetworks(android.content.ComponentName)",
    "185": "void setLocationEnabled(android.content.ComponentName, boolean)",
    "186": "boolean setTime(android.content.ComponentName, java.lang.String, long)",
    "187": "boolean setTimeZone(android.content.ComponentName, java.lang.String, java.lang.String)",
    "188": "void setMasterVolumeMuted(android.content.ComponentName, boolean)",
    "189": "boolean isMasterVolumeMuted(android.content.ComponentName)",
    "190": "void notifyLockTaskModeChanged(boolean, java.lang.String, int)",
    "191": "void setUninstallBlocked(android.content.ComponentName, java.lang.String, java.lang.String, boolean)",
    "192": "boolean isUninstallBlocked(java.lang.String)",
    "193": "void setCrossProfileCallerIdDisabled(android.content.ComponentName, boolean)",
    "194": "boolean getCrossProfileCallerIdDisabled(android.content.ComponentName)",
    "195": "boolean getCrossProfileCallerIdDisabledForUser(int)",
    "196": "void setCrossProfileContactsSearchDisabled(android.content.ComponentName, boolean)",
    "197": "boolean getCrossProfileContactsSearchDisabled(android.content.ComponentName)",
    "198": "boolean getCrossProfileContactsSearchDisabledForUser(int)",
    "199": "void startManagedQuickContact(java.lang.String, long, boolean, long, android.content.Intent)",
    "200": "void setManagedProfileCallerIdAccessPolicy(android.app.admin.PackagePolicy)",
    "201": "android.app.admin.PackagePolicy getManagedProfileCallerIdAccessPolicy()",
    "202": "boolean hasManagedProfileCallerIdAccess(int, java.lang.String)",
    "203": "void setCredentialManagerPolicy(android.app.admin.PackagePolicy)",
    "204": "android.app.admin.PackagePolicy getCredentialManagerPolicy()",
    "205": "void setManagedProfileContactsAccessPolicy(android.app.admin.PackagePolicy)",
    "206": "android.app.admin.PackagePolicy getManagedProfileContactsAccessPolicy()",
    "207": "boolean hasManagedProfileContactsAccess(int, java.lang.String)",
    "208": "void setBluetoothContactSharingDisabled(android.content.ComponentName, boolean)",
    "209": "boolean getBluetoothContactSharingDisabled(android.content.ComponentName)",
    "210": "boolean getBluetoothContactSharingDisabledForUser(int)",
    "211": "void setTrustAgentConfiguration(android.content.ComponentName, java.lang.String, android.content.ComponentName, android.os.PersistableBundle, boolean)",
    "212": "java.util.List getTrustAgentConfiguration(android.content.ComponentName, android.content.ComponentName, int, boolean)",
    "213": "boolean addCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String, java.lang.String)",
    "214": "boolean removeCrossProfileWidgetProvider(android.content.ComponentName, java.lang.String, java.lang.String)",
    "215": "java.util.List getCrossProfileWidgetProviders(android.content.ComponentName, java.lang.String)",
    "216": "void setAutoTimeRequired(android.content.ComponentName, boolean)",
    "217": "boolean getAutoTimeRequired()",
    "218": "void setAutoTimeEnabled(android.content.ComponentName, java.lang.String, boolean)",
    "219": "boolean getAutoTimeEnabled(android.content.ComponentName, java.lang.String)",
    "220": "void setAutoTimeZoneEnabled(android.content.ComponentName, java.lang.String, boolean)",
    "221": "boolean getAutoTimeZoneEnabled(android.content.ComponentName, java.lang.String)",
    "222": "void setForceEphemeralUsers(android.content.ComponentName, boolean)",
    "223": "boolean getForceEphemeralUsers(android.content.ComponentName)",
    "224": "boolean isRemovingAdmin(android.content.ComponentName, int)",
    "225": "void setUserIcon(android.content.ComponentName, android.graphics.Bitmap)",
    "226": "void setSystemUpdatePolicy(android.content.ComponentName, java.lang.String, android.app.admin.SystemUpdatePolicy)",
    "227": "android.app.admin.SystemUpdatePolicy getSystemUpdatePolicy()",
    "228": "void clearSystemUpdatePolicyFreezePeriodRecord()",
    "229": "boolean setKeyguardDisabled(android.content.ComponentName, boolean)",
    "230": "boolean setStatusBarDisabled(android.content.ComponentName, java.lang.String, boolean)",
    "231": "boolean isStatusBarDisabled(java.lang.String)",
    "232": "boolean getDoNotAskCredentialsOnBoot()",
    "233": "void notifyPendingSystemUpdate(android.app.admin.SystemUpdateInfo)",
    "234": "android.app.admin.SystemUpdateInfo getPendingSystemUpdate(android.content.ComponentName)",
    "235": "void setPermissionPolicy(android.content.ComponentName, java.lang.String, int)",
    "236": "int getPermissionPolicy(android.content.ComponentName)",
    "237": "void setPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String, int, android.os.RemoteCallback)",
    "238": "int getPermissionGrantState(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String)",
    "239": "boolean isProvisioningAllowed(java.lang.String, java.lang.String)",
    "240": "int checkProvisioningPrecondition(java.lang.String, java.lang.String)",
    "241": "void setKeepUninstalledPackages(android.content.ComponentName, java.lang.String, java.util.List)",
    "242": "java.util.List getKeepUninstalledPackages(android.content.ComponentName, java.lang.String)",
    "243": "boolean isManagedProfile(android.content.ComponentName)",
    "244": "java.lang.String getWifiMacAddress(android.content.ComponentName, java.lang.String)",
    "245": "void reboot(android.content.ComponentName)",
    "246": "void setShortSupportMessage(android.content.ComponentName, java.lang.String, java.lang.CharSequence)",
    "247": "java.lang.CharSequence getShortSupportMessage(android.content.ComponentName, java.lang.String)",
    "248": "void setLongSupportMessage(android.content.ComponentName, java.lang.CharSequence)",
    "249": "java.lang.CharSequence getLongSupportMessage(android.content.ComponentName)",
    "250": "java.lang.CharSequence getShortSupportMessageForUser(android.content.ComponentName, int)",
    "251": "java.lang.CharSequence getLongSupportMessageForUser(android.content.ComponentName, int)",
    "252": "void setOrganizationColor(android.content.ComponentName, int)",
    "253": "void setOrganizationColorForUser(int, int)",
    "254": "void clearOrganizationIdForUser(int)",
    "255": "int getOrganizationColor(android.content.ComponentName)",
    "256": "int getOrganizationColorForUser(int)",
    "257": "void setOrganizationName(android.content.ComponentName, java.lang.String, java.lang.CharSequence)",
    "258": "java.lang.CharSequence getOrganizationName(android.content.ComponentName, java.lang.String)",
    "259": "java.lang.CharSequence getDeviceOwnerOrganizationName()",
    "260": "java.lang.CharSequence getOrganizationNameForUser(int)",
    "261": "int getUserProvisioningState(int)",
    "262": "void setUserProvisioningState(int, int)",
    "263": "void setAffiliationIds(android.content.ComponentName, java.util.List)",
    "264": "java.util.List getAffiliationIds(android.content.ComponentName)",
    "265": "boolean isCallingUserAffiliated()",
    "266": "boolean isAffiliatedUser(int)",
    "267": "void setSecurityLoggingEnabled(android.content.ComponentName, java.lang.String, boolean)",
    "268": "boolean isSecurityLoggingEnabled(android.content.ComponentName, java.lang.String)",
    "269": "android.content.pm.ParceledListSlice retrieveSecurityLogs(android.content.ComponentName, java.lang.String)",
    "270": "android.content.pm.ParceledListSlice retrievePreRebootSecurityLogs(android.content.ComponentName, java.lang.String)",
    "271": "long forceNetworkLogs()",
    "272": "long forceSecurityLogs()",
    "273": "boolean isUninstallInQueue(java.lang.String)",
    "274": "void uninstallPackageWithActiveAdmins(java.lang.String)",
    "275": "boolean isDeviceProvisioned()",
    "276": "boolean isDeviceProvisioningConfigApplied()",
    "277": "void setDeviceProvisioningConfigApplied()",
    "278": "void forceUpdateUserSetupComplete(int)",
    "279": "void setBackupServiceEnabled(android.content.ComponentName, boolean)",
    "280": "boolean isBackupServiceEnabled(android.content.ComponentName)",
    "281": "void setNetworkLoggingEnabled(android.content.ComponentName, java.lang.String, boolean)",
    "282": "boolean isNetworkLoggingEnabled(android.content.ComponentName, java.lang.String)",
    "283": "java.util.List retrieveNetworkLogs(android.content.ComponentName, java.lang.String, long)",
    "284": "boolean bindDeviceAdminServiceAsUser(android.content.ComponentName, android.app.IApplicationThread, android.os.IBinder, android.content.Intent, android.app.IServiceConnection, long, int)",
    "285": "java.util.List getBindDeviceAdminTargetUsers(android.content.ComponentName)",
    "286": "boolean isEphemeralUser(android.content.ComponentName)",
    "287": "long getLastSecurityLogRetrievalTime()",
    "288": "long getLastBugReportRequestTime()",
    "289": "long getLastNetworkLogRetrievalTime()",
    "290": "boolean setResetPasswordToken(android.content.ComponentName, java.lang.String, [B)",
    "291": "boolean clearResetPasswordToken(android.content.ComponentName, java.lang.String)",
    "292": "boolean isResetPasswordTokenActive(android.content.ComponentName, java.lang.String)",
    "293": "boolean resetPasswordWithToken(android.content.ComponentName, java.lang.String, java.lang.String, [B, int)",
    "294": "boolean isCurrentInputMethodSetByOwner()",
    "295": "android.content.pm.StringParceledListSlice getOwnerInstalledCaCerts(android.os.UserHandle)",
    "296": "void clearApplicationUserData(android.content.ComponentName, java.lang.String, android.content.pm.IPackageDataObserver)",
    "297": "void setLogoutEnabled(android.content.ComponentName, boolean)",
    "298": "boolean isLogoutEnabled()",
    "299": "java.util.List getDisallowedSystemApps(android.content.ComponentName, int, java.lang.String)",
    "300": "void transferOwnership(android.content.ComponentName, android.content.ComponentName, android.os.PersistableBundle)",
    "301": "android.os.PersistableBundle getTransferOwnershipBundle()",
    "302": "void setStartUserSessionMessage(android.content.ComponentName, java.lang.CharSequence)",
    "303": "void setEndUserSessionMessage(android.content.ComponentName, java.lang.CharSequence)",
    "304": "java.lang.CharSequence getStartUserSessionMessage(android.content.ComponentName)",
    "305": "java.lang.CharSequence getEndUserSessionMessage(android.content.ComponentName)",
    "306": "java.util.List setMeteredDataDisabledPackages(android.content.ComponentName, java.util.List)",
    "307": "java.util.List getMeteredDataDisabledPackages(android.content.ComponentName)",
    "308": "int addOverrideApn(android.content.ComponentName, android.telephony.data.ApnSetting)",
    "309": "boolean updateOverrideApn(android.content.ComponentName, int, android.telephony.data.ApnSetting)",
    "310": "boolean removeOverrideApn(android.content.ComponentName, int)",
    "311": "java.util.List getOverrideApns(android.content.ComponentName)",
    "312": "void setOverrideApnsEnabled(android.content.ComponentName, boolean)",
    "313": "boolean isOverrideApnEnabled(android.content.ComponentName)",
    "314": "boolean isMeteredDataDisabledPackageForUser(android.content.ComponentName, java.lang.String, int)",
    "315": "int setGlobalPrivateDns(android.content.ComponentName, int, java.lang.String)",
    "316": "int getGlobalPrivateDnsMode(android.content.ComponentName)",
    "317": "java.lang.String getGlobalPrivateDnsHost(android.content.ComponentName)",
    "318": "void setProfileOwnerOnOrganizationOwnedDevice(android.content.ComponentName, int, boolean)",
    "319": "void installUpdateFromFile(android.content.ComponentName, java.lang.String, android.os.ParcelFileDescriptor, android.app.admin.StartInstallingUpdateCallback)",
    "320": "void setCrossProfileCalendarPackages(android.content.ComponentName, java.util.List)",
    "321": "java.util.List getCrossProfileCalendarPackages(android.content.ComponentName)",
    "322": "boolean isPackageAllowedToAccessCalendarForUser(java.lang.String, int)",
    "323": "java.util.List getCrossProfileCalendarPackagesForUser(int)",
    "324": "void setCrossProfilePackages(android.content.ComponentName, java.util.List)",
    "325": "java.util.List getCrossProfilePackages(android.content.ComponentName)",
    "326": "java.util.List getAllCrossProfilePackages(int)",
    "327": "java.util.List getDefaultCrossProfilePackages()",
    "328": "boolean isManagedKiosk()",
    "329": "boolean isUnattendedManagedKiosk()",
    "330": "boolean startViewCalendarEventInManagedProfile(java.lang.String, long, long, long, boolean, int)",
    "331": "boolean setKeyGrantForApp(android.content.ComponentName, java.lang.String, java.lang.String, java.lang.String, boolean)",
    "332": "android.app.admin.ParcelableGranteeMap getKeyPairGrants(java.lang.String, java.lang.String)",
    "333": "boolean setKeyGrantToWifiAuth(java.lang.String, java.lang.String, boolean)",
    "334": "boolean isKeyPairGrantedToWifiAuth(java.lang.String, java.lang.String)",
    "335": "void setUserControlDisabledPackages(android.content.ComponentName, java.lang.String, java.util.List)",
    "336": "java.util.List getUserControlDisabledPackages(android.content.ComponentName, java.lang.String)",
    "337": "void setCommonCriteriaModeEnabled(android.content.ComponentName, java.lang.String, boolean)",
    "338": "boolean isCommonCriteriaModeEnabled(android.content.ComponentName)",
    "339": "int getPersonalAppsSuspendedReasons(android.content.ComponentName)",
    "340": "void setPersonalAppsSuspended(android.content.ComponentName, boolean)",
    "341": "long getManagedProfileMaximumTimeOff(android.content.ComponentName)",
    "342": "void setManagedProfileMaximumTimeOff(android.content.ComponentName, long)",
    "343": "void acknowledgeDeviceCompliant()",
    "344": "boolean isComplianceAcknowledgementRequired()",
    "345": "boolean canProfileOwnerResetPasswordWhenLocked(int)",
    "346": "void setNextOperationSafety(int, int)",
    "347": "boolean isSafeOperation(int)",
    "348": "java.lang.String getEnrollmentSpecificId(java.lang.String)",
    "349": "void setOrganizationIdForUser(java.lang.String, java.lang.String, int)",
    "350": "android.os.UserHandle createAndProvisionManagedProfile(android.app.admin.ManagedProfileProvisioningParams, java.lang.String)",
    "351": "void provisionFullyManagedDevice(android.app.admin.FullyManagedDeviceProvisioningParams, java.lang.String)",
    "352": "void finalizeWorkProfileProvisioning(android.os.UserHandle, android.accounts.Account)",
    "353": "void setDeviceOwnerType(android.content.ComponentName, int)",
    "354": "int getDeviceOwnerType(android.content.ComponentName)",
    "355": "void resetDefaultCrossProfileIntentFilters(int)",
    "356": "boolean canAdminGrantSensorsPermissions()",
    "357": "void setUsbDataSignalingEnabled(java.lang.String, boolean)",
    "358": "boolean isUsbDataSignalingEnabled(java.lang.String)",
    "359": "boolean isUsbDataSignalingEnabledForUser(int)",
    "360": "boolean canUsbDataSignalingBeDisabled()",
    "361": "void setMinimumRequiredWifiSecurityLevel(java.lang.String, int)",
    "362": "int getMinimumRequiredWifiSecurityLevel()",
    "363": "void setWifiSsidPolicy(java.lang.String, android.app.admin.WifiSsidPolicy)",
    "364": "android.app.admin.WifiSsidPolicy getWifiSsidPolicy(java.lang.String)",
    "365": "java.util.List listForegroundAffiliatedUsers()",
    "366": "void setDrawables(java.util.List)",
    "367": "void resetDrawables(java.util.List)",
    "368": "android.app.admin.ParcelableResource getDrawable(java.lang.String, java.lang.String, java.lang.String)",
    "369": "boolean isDpcDownloaded()",
    "370": "void setDpcDownloaded(boolean)",
    "371": "void setStrings(java.util.List)",
    "372": "void resetStrings(java.util.List)",
    "373": "android.app.admin.ParcelableResource getString(java.lang.String)",
    "374": "void resetShouldAllowBypassingDevicePolicyManagementRoleQualificationState()",
    "375": "boolean shouldAllowBypassingDevicePolicyManagementRoleQualification()",
    "376": "java.util.List getPolicyManagedProfiles(android.os.UserHandle)",
    "377": "void setApplicationExemptions(java.lang.String, java.lang.String, [I)",
    "378": "[I getApplicationExemptions(java.lang.String)",
    "379": "void setMtePolicy(int, java.lang.String)",
    "380": "int getMtePolicy(java.lang.String)",
    "381": "void setManagedSubscriptionsPolicy(android.app.admin.ManagedSubscriptionsPolicy)",
    "382": "android.app.admin.ManagedSubscriptionsPolicy getManagedSubscriptionsPolicy()",
    "383": "android.app.admin.DevicePolicyState getDevicePolicyState()",
    "384": "void setOverrideKeepProfilesRunning(boolean)",
    "385": "boolean triggerDevicePolicyEngineMigration(boolean)",
    "386": "boolean isDeviceFinanced(java.lang.String)",
    "387": "java.lang.String getFinancedDeviceKioskRoleHolder(java.lang.String)",
    "388": "void calculateHasIncompatibleAccounts()"
  },
  "android.print.IPrintManager": {
    "1": "java.util.List getPrintJobInfos(int, int)",
    "2": "android.print.PrintJobInfo getPrintJobInfo(android.print.PrintJobId, int, int)",
    "3": "android.os.Bundle print(java.lang.String, android.print.IPrintDocumentAdapter, android.print.PrintAttributes, java.lang.String, int, int)",
    "4": "void cancelPrintJob(android.print.PrintJobId, int, int)",
    "5": "void restartPrintJob(android.print.PrintJobId, int, int)",
    "6": "void addPrintJobStateChangeListener(android.print.IPrintJobStateChangeListener, int, int)",
    "7": "void removePrintJobStateChangeListener(android.print.IPrintJobStateChangeListener, int)",
    "8": "void addPrintServicesChangeListener(android.print.IPrintServicesChangeListener, int)",
    "9": "void removePrintServicesChangeListener(android.print.IPrintServicesChangeListener, int)",
    "10": "java.util.List getPrintServices(int, int)",
    "11": "void setPrintServiceEnabled(android.content.ComponentName, boolean, int)",
    "12": "boolean isPrintServiceEnabled(android.content.ComponentName, int)",
    "13": "void addPrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener, int)",
    "14": "void removePrintServiceRecommendationsChangeListener(android.printservice.recommendation.IRecommendationsChangeListener, int)",
    "15": "java.util.List getPrintServiceRecommendations(int)",
    "16": "void createPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver, int)",
    "17": "void startPrinterDiscovery(android.print.IPrinterDiscoveryObserver, java.util.List, int)",
    "18": "void stopPrinterDiscovery(android.print.IPrinterDiscoveryObserver, int)",
    "19": "void validatePrinters(java.util.List, int)",
    "20": "void startPrinterStateTracking(android.print.PrinterId, int)",
    "21": "android.graphics.drawable.Icon getCustomPrinterIcon(android.print.PrinterId, int)",
    "22": "void stopPrinterStateTracking(android.print.PrinterId, int)",
    "23": "void destroyPrinterDiscoverySession(android.print.IPrinterDiscoveryObserver, int)",
    "24": "boolean getBindInstantServiceAllowed(int)",
    "25": "void setBindInstantServiceAllowed(int, boolean)"
  },
  "android.media.soundtrigger_middleware.ISoundTriggerMiddlewareService": {
    "1": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5"
  },
  "android.security.rkp.IRemoteProvisioning": {
    "1": "void getRegistration(java.lang.String, android.security.rkp.IGetRegistrationCallback)"
  },
  "android.app.IGrammaticalInflectionManager": {
    "1": "void setRequestedApplicationGrammaticalGender(java.lang.String, int, int)"
  },
  "android.hardware.ICameraServiceProxy": {
    "1": "void pingForUserUpdate()",
    "2": "void notifyCameraState(android.hardware.CameraSessionStats)",
    "3": "int getRotateAndCropOverride(java.lang.String, int, int)",
    "4": "int getAutoframingOverride(java.lang.String)",
    "5": "boolean isCameraDisabled(int)"
  },
  "android.net.IVpnManager": {
    "1": "boolean prepareVpn(java.lang.String, java.lang.String, int)",
    "2": "void setVpnPackageAuthorization(java.lang.String, int, int)",
    "3": "android.os.ParcelFileDescriptor establishVpn(com.android.internal.net.VpnConfig)",
    "4": "boolean addVpnAddress(java.lang.String, int)",
    "5": "boolean removeVpnAddress(java.lang.String, int)",
    "6": "boolean setUnderlyingNetworksForVpn([Landroid.net.Network;)",
    "7": "boolean provisionVpnProfile(com.android.internal.net.VpnProfile, java.lang.String)",
    "8": "void deleteVpnProfile(java.lang.String)",
    "9": "java.lang.String startVpnProfile(java.lang.String)",
    "10": "void stopVpnProfile(java.lang.String)",
    "11": "android.net.VpnProfileState getProvisionedVpnProfileState(java.lang.String)",
    "12": "boolean setAppExclusionList(int, java.lang.String, java.util.List)",
    "13": "java.util.List getAppExclusionList(int, java.lang.String)",
    "14": "boolean isAlwaysOnVpnPackageSupported(int, java.lang.String)",
    "15": "boolean setAlwaysOnVpnPackage(int, java.lang.String, boolean, java.util.List)",
    "16": "java.lang.String getAlwaysOnVpnPackage(int)",
    "17": "boolean isVpnLockdownEnabled(int)",
    "18": "java.util.List getVpnLockdownAllowlist(int)",
    "19": "boolean isCallerCurrentAlwaysOnVpnApp()",
    "20": "boolean isCallerCurrentAlwaysOnVpnLockdownApp()",
    "21": "void startLegacyVpn(com.android.internal.net.VpnProfile)",
    "22": "com.android.internal.net.LegacyVpnInfo getLegacyVpnInfo(int)",
    "23": "boolean updateLockdownVpn()",
    "24": "com.android.internal.net.VpnConfig getVpnConfig(int)",
    "25": "void factoryReset()"
  },
  "android.app.wearable.IWearableSensingManager": {
    "1": "void provideDataStream(android.os.ParcelFileDescriptor, android.os.RemoteCallback)",
    "2": "void provideData(android.os.PersistableBundle, android.os.SharedMemory, android.os.RemoteCallback)"
  },
  "com.android.internal.compat.IPlatformCompatNative": {
    "1": "void reportChangeByPackageName(long, java.lang.String, int)",
    "2": "void reportChangeByUid(long, int)",
    "3": "boolean isChangeEnabledByPackageName(long, java.lang.String, int)",
    "4": "boolean isChangeEnabledByUid(long, int)"
  },
  "android.view.contentcapture.IContentCaptureManager": {
    "1": "void startSession(android.os.IBinder, android.os.IBinder, android.content.ComponentName, int, int, com.android.internal.os.IResultReceiver)",
    "2": "void finishSession(int)",
    "3": "void getServiceComponentName(com.android.internal.os.IResultReceiver)",
    "4": "void removeData(android.view.contentcapture.DataRemovalRequest)",
    "5": "void shareData(android.view.contentcapture.DataShareRequest, android.view.contentcapture.IDataShareWriteAdapter)",
    "6": "void isContentCaptureFeatureEnabled(com.android.internal.os.IResultReceiver)",
    "7": "void getServiceSettingsActivity(com.android.internal.os.IResultReceiver)",
    "8": "void getContentCaptureConditions(java.lang.String, com.android.internal.os.IResultReceiver)",
    "9": "void resetTemporaryService(int)",
    "10": "void setTemporaryService(int, java.lang.String, int)",
    "11": "void setDefaultServiceEnabled(int, boolean)",
    "12": "void registerContentCaptureOptionsCallback(java.lang.String, android.view.contentcapture.IContentCaptureOptionsCallback)"
  },
  "com.android.internal.telecom.ITelecomService": {
    "1": "void showInCallScreen(boolean, java.lang.String, java.lang.String)",
    "2": "android.telecom.PhoneAccountHandle getDefaultOutgoingPhoneAccount(java.lang.String, java.lang.String, java.lang.String)",
    "3": "android.telecom.PhoneAccountHandle getUserSelectedOutgoingPhoneAccount(java.lang.String)",
    "4": "void setUserSelectedOutgoingPhoneAccount(android.telecom.PhoneAccountHandle)",
    "5": "android.content.pm.ParceledListSlice getCallCapablePhoneAccounts(boolean, java.lang.String, java.lang.String)",
    "6": "android.content.pm.ParceledListSlice getSelfManagedPhoneAccounts(java.lang.String, java.lang.String)",
    "7": "android.content.pm.ParceledListSlice getOwnSelfManagedPhoneAccounts(java.lang.String, java.lang.String)",
    "8": "android.content.pm.ParceledListSlice getPhoneAccountsSupportingScheme(java.lang.String, java.lang.String)",
    "9": "android.content.pm.ParceledListSlice getPhoneAccountsForPackage(java.lang.String)",
    "10": "android.telecom.PhoneAccount getPhoneAccount(android.telecom.PhoneAccountHandle, java.lang.String)",
    "11": "int getAllPhoneAccountsCount()",
    "12": "android.content.pm.ParceledListSlice getAllPhoneAccounts()",
    "13": "android.content.pm.ParceledListSlice getAllPhoneAccountHandles()",
    "14": "android.telecom.PhoneAccountHandle getSimCallManager(int, java.lang.String)",
    "15": "android.telecom.PhoneAccountHandle getSimCallManagerForUser(int, java.lang.String)",
    "16": "void registerPhoneAccount(android.telecom.PhoneAccount, java.lang.String)",
    "17": "void unregisterPhoneAccount(android.telecom.PhoneAccountHandle, java.lang.String)",
    "18": "void clearAccounts(java.lang.String)",
    "19": "boolean isVoiceMailNumber(android.telecom.PhoneAccountHandle, java.lang.String, java.lang.String, java.lang.String)",
    "20": "java.lang.String getVoiceMailNumber(android.telecom.PhoneAccountHandle, java.lang.String, java.lang.String)",
    "21": "java.lang.String getLine1Number(android.telecom.PhoneAccountHandle, java.lang.String, java.lang.String)",
    "22": "android.content.ComponentName getDefaultPhoneApp()",
    "23": "java.lang.String getDefaultDialerPackage(java.lang.String)",
    "24": "java.lang.String getDefaultDialerPackageForUser(int)",
    "25": "java.lang.String getSystemDialerPackage(java.lang.String)",
    "26": "android.telecom.TelecomAnalytics dumpCallAnalytics()",
    "27": "void silenceRinger(java.lang.String)",
    "28": "boolean isInCall(java.lang.String, java.lang.String)",
    "29": "boolean hasManageOngoingCallsPermission(java.lang.String)",
    "30": "boolean isInManagedCall(java.lang.String, java.lang.String)",
    "31": "boolean isRinging(java.lang.String)",
    "32": "int getCallState()",
    "33": "int getCallStateUsingPackage(java.lang.String, java.lang.String)",
    "34": "boolean endCall(java.lang.String)",
    "35": "void acceptRingingCall(java.lang.String)",
    "36": "void acceptRingingCallWithVideoState(java.lang.String, int)",
    "37": "void cancelMissedCallsNotification(java.lang.String)",
    "38": "boolean handlePinMmi(java.lang.String, java.lang.String)",
    "39": "boolean handlePinMmiForPhoneAccount(android.telecom.PhoneAccountHandle, java.lang.String, java.lang.String)",
    "40": "android.net.Uri getAdnUriForPhoneAccount(android.telecom.PhoneAccountHandle, java.lang.String)",
    "41": "boolean isTtySupported(java.lang.String, java.lang.String)",
    "42": "int getCurrentTtyMode(java.lang.String, java.lang.String)",
    "43": "void addNewIncomingCall(android.telecom.PhoneAccountHandle, android.os.Bundle, java.lang.String)",
    "44": "void addNewIncomingConference(android.telecom.PhoneAccountHandle, android.os.Bundle, java.lang.String)",
    "45": "void addNewUnknownCall(android.telecom.PhoneAccountHandle, android.os.Bundle)",
    "46": "void startConference(java.util.List, android.os.Bundle, java.lang.String)",
    "47": "void placeCall(android.net.Uri, android.os.Bundle, java.lang.String, java.lang.String)",
    "48": "boolean enablePhoneAccount(android.telecom.PhoneAccountHandle, boolean)",
    "49": "boolean setDefaultDialer(java.lang.String)",
    "50": "void stopBlockSuppression()",
    "51": "android.content.Intent createManageBlockedNumbersIntent(java.lang.String)",
    "52": "android.content.Intent createLaunchEmergencyDialerIntent(java.lang.String)",
    "53": "boolean isIncomingCallPermitted(android.telecom.PhoneAccountHandle, java.lang.String)",
    "54": "boolean isOutgoingCallPermitted(android.telecom.PhoneAccountHandle, java.lang.String)",
    "55": "void waitOnHandlers()",
    "56": "void acceptHandover(android.net.Uri, int, android.telecom.PhoneAccountHandle, java.lang.String)",
    "57": "void setTestEmergencyPhoneAccountPackageNameFilter(java.lang.String)",
    "58": "boolean isInEmergencyCall()",
    "59": "void handleCallIntent(android.content.Intent, java.lang.String)",
    "60": "void cleanupStuckCalls()",
    "61": "int cleanupOrphanPhoneAccounts()",
    "62": "void resetCarMode()",
    "63": "void setTestDefaultCallRedirectionApp(java.lang.String)",
    "64": "void requestLogMark(java.lang.String)",
    "65": "void setTestPhoneAcctSuggestionComponent(java.lang.String)",
    "66": "void setTestDefaultCallScreeningApp(java.lang.String)",
    "67": "void addOrRemoveTestCallCompanionApp(java.lang.String, boolean)",
    "68": "void setSystemDialer(android.content.ComponentName)",
    "69": "void setTestDefaultDialer(java.lang.String)",
    "70": "void setTestCallDiagnosticService(java.lang.String)",
    "71": "boolean isInSelfManagedCall(java.lang.String, android.os.UserHandle, java.lang.String)",
    "72": "void addCall(android.telecom.CallAttributes, com.android.internal.telecom.ICallEventCallback, java.lang.String, java.lang.String)"
  },
  "android.telephony.ims.aidl.IImsRcsController": {
    "1": "void registerImsRegistrationCallback(int, android.telephony.ims.aidl.IImsRegistrationCallback)",
    "2": "void unregisterImsRegistrationCallback(int, android.telephony.ims.aidl.IImsRegistrationCallback)",
    "3": "void getImsRcsRegistrationState(int, com.android.internal.telephony.IIntegerConsumer)",
    "4": "void getImsRcsRegistrationTransportType(int, com.android.internal.telephony.IIntegerConsumer)",
    "5": "void registerRcsAvailabilityCallback(int, android.telephony.ims.aidl.IImsCapabilityCallback)",
    "6": "void unregisterRcsAvailabilityCallback(int, android.telephony.ims.aidl.IImsCapabilityCallback)",
    "7": "boolean isCapable(int, int, int)",
    "8": "boolean isAvailable(int, int, int)",
    "9": "void requestCapabilities(int, java.lang.String, java.lang.String, java.util.List, android.telephony.ims.aidl.IRcsUceControllerCallback)",
    "10": "void requestAvailability(int, java.lang.String, java.lang.String, android.net.Uri, android.telephony.ims.aidl.IRcsUceControllerCallback)",
    "11": "int getUcePublishState(int)",
    "12": "boolean isUceSettingEnabled(int, java.lang.String, java.lang.String)",
    "13": "void setUceSettingEnabled(int, boolean)",
    "14": "void registerUcePublishStateCallback(int, android.telephony.ims.aidl.IRcsUcePublishStateCallback)",
    "15": "void unregisterUcePublishStateCallback(int, android.telephony.ims.aidl.IRcsUcePublishStateCallback)",
    "16": "boolean isSipDelegateSupported(int)",
    "17": "void createSipDelegate(int, android.telephony.ims.DelegateRequest, java.lang.String, android.telephony.ims.aidl.ISipDelegateConnectionStateCallback, android.telephony.ims.aidl.ISipDelegateMessageCallback)",
    "18": "void destroySipDelegate(int, android.telephony.ims.aidl.ISipDelegate, int)",
    "19": "void triggerNetworkRegistration(int, android.telephony.ims.aidl.ISipDelegate, int, java.lang.String)",
    "20": "void registerSipDialogStateCallback(int, com.android.internal.telephony.ISipDialogStateCallback)",
    "21": "void unregisterSipDialogStateCallback(int, com.android.internal.telephony.ISipDialogStateCallback)",
    "22": "void registerRcsFeatureCallback(int, com.android.ims.internal.IImsServiceFeatureCallback)",
    "23": "void unregisterImsFeatureCallback(com.android.ims.internal.IImsServiceFeatureCallback)"
  },
  "com.android.internal.textservice.ITextServicesManager": {
    "1": "android.view.textservice.SpellCheckerInfo getCurrentSpellChecker(int, java.lang.String)",
    "2": "android.view.textservice.SpellCheckerSubtype getCurrentSpellCheckerSubtype(int, boolean)",
    "3": "void getSpellCheckerService(int, java.lang.String, java.lang.String, com.android.internal.textservice.ITextServicesSessionListener, com.android.internal.textservice.ISpellCheckerSessionListener, android.os.Bundle, int)",
    "4": "void finishSpellCheckerService(int, com.android.internal.textservice.ISpellCheckerSessionListener)",
    "5": "boolean isSpellCheckerEnabled(int)",
    "6": "[Landroid.view.textservice.SpellCheckerInfo; getEnabledSpellCheckers(int)"
  },
  "android.system.suspend.internal.ISuspendControlServiceInternal": {
    "1": "1",
    "2": "2",
    "3": "3",
    "4": "4",
    "5": "5"
  },
  "android.os.IVibratorManagerService": {
    "1": "[I getVibratorIds()",
    "2": "android.os.VibratorInfo getVibratorInfo(int)",
    "3": "boolean isVibrating(int)",
    "4": "boolean registerVibratorStateListener(int, android.os.IVibratorStateListener)",
    "5": "boolean unregisterVibratorStateListener(int, android.os.IVibratorStateListener)",
    "6": "boolean setAlwaysOnEffect(int, java.lang.String, int, android.os.CombinedVibration, android.os.VibrationAttributes)",
    "7": "void vibrate(int, int, java.lang.String, android.os.CombinedVibration, android.os.VibrationAttributes, java.lang.String, android.os.IBinder)",
    "8": "void cancelVibrate(int, android.os.IBinder)"
  },
  "android.media.session.ISessionManager": {
    "1": "android.media.session.ISession createSession(java.lang.String, android.media.session.ISessionCallback, java.lang.String, android.os.Bundle, int)",
    "2": "java.util.List getSessions(android.content.ComponentName, int)",
    "3": "android.media.session.MediaSession$Token getMediaKeyEventSession(java.lang.String)",
    "4": "java.lang.String getMediaKeyEventSessionPackageName(java.lang.String)",
    "5": "void dispatchMediaKeyEvent(java.lang.String, boolean, android.view.KeyEvent, boolean)",
    "6": "boolean dispatchMediaKeyEventToSessionAsSystemService(java.lang.String, android.view.KeyEvent, android.media.session.MediaSession$Token)",
    "7": "void dispatchVolumeKeyEvent(java.lang.String, java.lang.String, boolean, android.view.KeyEvent, int, boolean)",
    "8": "void dispatchVolumeKeyEventToSessionAsSystemService(java.lang.String, java.lang.String, android.view.KeyEvent, android.media.session.MediaSession$Token)",
    "9": "void dispatchAdjustVolume(java.lang.String, java.lang.String, int, int, int)",
    "10": "void addSessionsListener(android.media.session.IActiveSessionsListener, android.content.ComponentName, int)",
    "11": "void removeSessionsListener(android.media.session.IActiveSessionsListener)",
    "12": "void addSession2TokensListener(android.media.session.ISession2TokensListener, int)",
    "13": "void removeSession2TokensListener(android.media.session.ISession2TokensListener)",
    "14": "void registerRemoteSessionCallback(android.media.IRemoteSessionCallback)",
    "15": "void unregisterRemoteSessionCallback(android.media.IRemoteSessionCallback)",
    "16": "boolean isGlobalPriorityActive()",
    "17": "void addOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)",
    "18": "void removeOnMediaKeyEventDispatchedListener(android.media.session.IOnMediaKeyEventDispatchedListener)",
    "19": "void addOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener, java.lang.String)",
    "20": "void removeOnMediaKeyEventSessionChangedListener(android.media.session.IOnMediaKeyEventSessionChangedListener)",
    "21": "void setOnVolumeKeyLongPressListener(android.media.session.IOnVolumeKeyLongPressListener)",
    "22": "void setOnMediaKeyListener(android.media.session.IOnMediaKeyListener)",
    "23": "boolean isTrusted(java.lang.String, int, int)",
    "24": "void setCustomMediaKeyDispatcher(java.lang.String)",
    "25": "void setCustomMediaSessionPolicyProvider(java.lang.String)",
    "26": "boolean hasCustomMediaKeyDispatcher(java.lang.String)",
    "27": "boolean hasCustomMediaSessionPolicyProvider(java.lang.String)",
    "28": "int getSessionPolicies(android.media.session.MediaSession$Token)",
    "29": "void setSessionPolicies(android.media.session.MediaSession$Token, int)"
  },
  "android.app.role.IRoleManager": {
    "1": "boolean isRoleAvailable(java.lang.String)",
    "2": "boolean isRoleHeld(java.lang.String, java.lang.String)",
    "3": "java.util.List getRoleHoldersAsUser(java.lang.String, int)",
    "4": "void addRoleHolderAsUser(java.lang.String, java.lang.String, int, int, android.os.RemoteCallback)",
    "5": "void removeRoleHolderAsUser(java.lang.String, java.lang.String, int, int, android.os.RemoteCallback)",
    "6": "void clearRoleHoldersAsUser(java.lang.String, int, int, android.os.RemoteCallback)",
    "7": "java.lang.String getDefaultApplicationAsUser(java.lang.String, int)",
    "8": "void setDefaultApplicationAsUser(java.lang.String, java.lang.String, int, int, android.os.RemoteCallback)",
    "9": "void addOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener, int)",
    "10": "void removeOnRoleHoldersChangedListenerAsUser(android.app.role.IOnRoleHoldersChangedListener, int)",
    "11": "boolean isBypassingRoleQualification()",
    "12": "void setBypassingRoleQualification(boolean)",
    "13": "void setRoleNamesFromController(java.util.List)",
    "14": "boolean addRoleHolderFromController(java.lang.String, java.lang.String)",
    "15": "boolean removeRoleHolderFromController(java.lang.String, java.lang.String)",
    "16": "java.util.List getHeldRolesFromController(java.lang.String)",
    "17": "java.lang.String getBrowserRoleHolder(int)",
    "18": "boolean setBrowserRoleHolder(java.lang.String, int)",
    "19": "java.lang.String getSmsRoleHolder(int)"
  },
  "android.content.pm.verify.domain.IDomainVerificationManager": {
    "1": "java.util.List queryValidVerificationPackageNames()",
    "2": "android.content.pm.verify.domain.DomainVerificationInfo getDomainVerificationInfo(java.lang.String)",
    "3": "android.content.pm.verify.domain.DomainVerificationUserState getDomainVerificationUserState(java.lang.String, int)",
    "4": "java.util.List getOwnersForDomain(java.lang.String, int)",
    "5": "int setDomainVerificationStatus(java.lang.String, android.content.pm.verify.domain.DomainSet, int)",
    "6": "void setDomainVerificationLinkHandlingAllowed(java.lang.String, boolean, int)",
    "7": "int setDomainVerificationUserSelection(java.lang.String, android.content.pm.verify.domain.DomainSet, boolean, int)"
  },
  "com.android.internal.os.IBinaryTransparencyService": {
    "1": "java.lang.String getSignedImageInfo()",
    "2": "void recordMeasurementsForAllPackages()",
    "3": "java.util.List collectAllApexInfo(boolean)",
    "4": "java.util.List collectAllUpdatedPreloadInfo(android.os.Bundle)",
    "5": "java.util.List collectAllSilentInstalledMbaInfo(android.os.Bundle)"
  },
  "android.net.wifi.p2p.IWifiP2pManager": {
    "1": "android.os.Messenger getMessenger(android.os.IBinder, java.lang.String, android.os.Bundle)",
    "2": "android.os.Messenger getP2pStateMachineMessenger()",
    "3": "void close(android.os.IBinder)",
    "4": "void setMiracastMode(int)",
    "5": "void checkConfigureWifiDisplayPermission()",
    "6": "long getSupportedFeatures()"
  },
  "android.os.IVold": {
    "1": "void setListener(android.os.IVoldListener)",
    "2": "void abortFuse()",
    "3": "void monitor()",
    "4": "void reset()",
    "5": "void shutdown()",
    "6": "void onUserAdded(int, int, int)",
    "7": "void onUserRemoved(int)",
    "8": "void onUserStarted(int)",
    "9": "void onUserStopped(int)",
    "10": "void addAppIds([Ljava.lang.String;, [I)",
    "11": "void addSandboxIds([I, [Ljava.lang.String;)",
    "12": "void onSecureKeyguardStateChanged(boolean)",
    "13": "void partition(java.lang.String, int, int)",
    "14": "void forgetPartition(java.lang.String, java.lang.String)",
    "15": "void mount(java.lang.String, int, int, android.os.IVoldMountCallback)",
    "16": "void unmount(java.lang.String)",
    "17": "void format(java.lang.String, java.lang.String)",
    "18": "void benchmark(java.lang.String, android.os.IVoldTaskListener)",
    "19": "void moveStorage(java.lang.String, java.lang.String, android.os.IVoldTaskListener)",
    "20": "void remountUid(int, int)",
    "21": "void remountAppStorageDirs(int, int, [Ljava.lang.String;)",
    "22": "void unmountAppStorageDirs(int, int, [Ljava.lang.String;)",
    "23": "void setupAppDir(java.lang.String, int)",
    "24": "void fixupAppDir(java.lang.String, int)",
    "25": "void ensureAppDirsCreated([Ljava.lang.String;, int)",
    "26": "java.lang.String createObb(java.lang.String, int)",
    "27": "void destroyObb(java.lang.String)",
    "28": "void fstrim(int, android.os.IVoldTaskListener)",
    "29": "void runIdleMaint(boolean, android.os.IVoldTaskListener)",
    "30": "void abortIdleMaint(android.os.IVoldTaskListener)",
    "31": "int getStorageLifeTime()",
    "32": "void setGCUrgentPace(int, int, float, float, int, int, int)",
    "33": "void refreshLatestWrite()",
    "34": "int getWriteAmount()",
    "35": "java.io.FileDescriptor mountAppFuse(int, int)",
    "36": "void unmountAppFuse(int, int)",
    "37": "void fbeEnable()",
    "38": "void initUser0()",
    "39": "void mountFstab(java.lang.String, java.lang.String, java.lang.String)",
    "40": "void encryptFstab(java.lang.String, java.lang.String, boolean, java.lang.String, java.lang.String)",
    "41": "void setStorageBindingSeed([B)",
    "42": "void createUserKey(int, int, boolean)",
    "43": "void destroyUserKey(int)",
    "44": "void setUserKeyProtection(int, java.lang.String)",
    "45": "[I getUnlockedUsers()",
    "46": "void unlockUserKey(int, int, java.lang.String)",
    "47": "void lockUserKey(int)",
    "48": "void prepareUserStorage(java.lang.String, int, int, int)",
    "49": "void destroyUserStorage(java.lang.String, int, int)",
    "50": "void prepareSandboxForApp(java.lang.String, int, java.lang.String, int)",
    "51": "void destroySandboxForApp(java.lang.String, java.lang.String, int)",
    "52": "void startCheckpoint(int)",
    "53": "boolean needsCheckpoint()",
    "54": "boolean needsRollback()",
    "55": "boolean isCheckpointing()",
    "56": "void abortChanges(java.lang.String, boolean)",
    "57": "void commitChanges()",
    "58": "void prepareCheckpoint()",
    "59": "void restoreCheckpoint(java.lang.String)",
    "60": "void restoreCheckpointPart(java.lang.String, int)",
    "61": "void markBootAttempt()",
    "62": "boolean supportsCheckpoint()",
    "63": "boolean supportsBlockCheckpoint()",
    "64": "boolean supportsFileCheckpoint()",
    "65": "void resetCheckpoint()",
    "66": "void earlyBootEnded()",
    "67": "java.lang.String createStubVolume(java.lang.String, java.lang.String, java.lang.String, java.lang.String, java.lang.String, int)",
    "68": "void destroyStubVolume(java.lang.String)",
    "69": "java.io.FileDescriptor openAppFuseFile(int, int, int, int)",
    "70": "boolean incFsEnabled()",
    "71": "android.os.incremental.IncrementalFileSystemControlParcel mountIncFs(java.lang.String, java.lang.String, int, java.lang.String)",
    "72": "void unmountIncFs(java.lang.String)",
    "73": "void setIncFsMountOptions(android.os.incremental.IncrementalFileSystemControlParcel, boolean, boolean, java.lang.String)",
    "74": "void bindMount(java.lang.String, java.lang.String)",
    "75": "void destroyDsuMetadataKey(java.lang.String)"
  },
  "android.content.rollback.IRollbackManager": {
    "1": "android.content.pm.ParceledListSlice getAvailableRollbacks()",
    "2": "android.content.pm.ParceledListSlice getRecentlyCommittedRollbacks()",
    "3": "void commitRollback(int, android.content.pm.ParceledListSlice, java.lang.String, android.content.IntentSender)",
    "4": "void snapshotAndRestoreUserData(java.lang.String, [I, int, long, java.lang.String, int)",
    "5": "void reloadPersistedData()",
    "6": "void expireRollbackForPackage(java.lang.String)",
    "7": "int notifyStagedSession(int)",
    "8": "void blockRollbackManager(long)"
  },
  "com.android.internal.telephony.IOns": {
    "1": "boolean setEnable(boolean, java.lang.String)",
    "2": "boolean isEnabled(java.lang.String)",
    "3": "void setPreferredDataSubscriptionId(int, boolean, com.android.internal.telephony.ISetOpportunisticDataCallback, java.lang.String)",
    "4": "int getPreferredDataSubscriptionId(java.lang.String, java.lang.String)",
    "5": "void updateAvailableNetworks(java.util.List, com.android.internal.telephony.IUpdateAvailableNetworksCallback, java.lang.String)"
  },
  "android.net.IPacProxyManager": {
    "1": "void addListener(android.net.IPacProxyInstalledListener)",
    "2": "void removeListener(android.net.IPacProxyInstalledListener)",
    "3": "void setCurrentProxyScriptUrl(android.net.ProxyInfo)"
  },
  "com.android.internal.statusbar.IStatusBarService": {
    "1": "void expandNotificationsPanel()",
    "2": "void collapsePanels()",
    "3": "void togglePanel()",
    "4": "void disable(int, android.os.IBinder, java.lang.String)",
    "5": "void disableForUser(int, android.os.IBinder, java.lang.String, int)",
    "6": "void disable2(int, android.os.IBinder, java.lang.String)",
    "7": "void disable2ForUser(int, android.os.IBinder, java.lang.String, int)",
    "8": "[I getDisableFlags(android.os.IBinder, int)",
    "9": "void setIcon(java.lang.String, java.lang.String, int, int, java.lang.String)",
    "10": "void setIconVisibility(java.lang.String, boolean)",
    "11": "void removeIcon(java.lang.String)",
    "12": "void setImeWindowStatus(int, android.os.IBinder, int, int, boolean)",
    "13": "void expandSettingsPanel(java.lang.String)",
    "14": "com.android.internal.statusbar.RegisterStatusBarResult registerStatusBar(com.android.internal.statusbar.IStatusBar)",
    "15": "void onPanelRevealed(boolean, int)",
    "16": "void onPanelHidden()",
    "17": "void clearNotificationEffects()",
    "18": "void onNotificationClick(java.lang.String, com.android.internal.statusbar.NotificationVisibility)",
    "19": "void onNotificationActionClick(java.lang.String, int, android.app.Notification$Action, com.android.internal.statusbar.NotificationVisibility, boolean)",
    "20": "void onNotificationError(java.lang.String, java.lang.String, int, int, int, java.lang.String, int)",
    "21": "void onClearAllNotifications(int)",
    "22": "void onNotificationClear(java.lang.String, int, java.lang.String, int, int, com.android.internal.statusbar.NotificationVisibility)",
    "23": "void onNotificationVisibilityChanged([Lcom.android.internal.statusbar.NotificationVisibility;, [Lcom.android.internal.statusbar.NotificationVisibility;)",
    "24": "void onNotificationExpansionChanged(java.lang.String, boolean, boolean, int)",
    "25": "void onNotificationDirectReplied(java.lang.String)",
    "26": "void onNotificationSmartSuggestionsAdded(java.lang.String, int, int, boolean, boolean)",
    "27": "void onNotificationSmartReplySent(java.lang.String, int, java.lang.CharSequence, int, boolean)",
    "28": "void onNotificationSettingsViewed(java.lang.String)",
    "29": "void onNotificationBubbleChanged(java.lang.String, boolean, int)",
    "30": "void onBubbleMetadataFlagChanged(java.lang.String, int)",
    "31": "void hideCurrentInputMethodForBubbles()",
    "32": "void grantInlineReplyUriPermission(java.lang.String, android.net.Uri, android.os.UserHandle, java.lang.String)",
    "33": "void clearInlineReplyUriPermissions(java.lang.String)",
    "34": "void onNotificationFeedbackReceived(java.lang.String, android.os.Bundle)",
    "35": "void onGlobalActionsShown()",
    "36": "void onGlobalActionsHidden()",
    "37": "void shutdown()",
    "38": "void reboot(boolean)",
    "39": "void restart()",
    "40": "void addTile(android.content.ComponentName)",
    "41": "void remTile(android.content.ComponentName)",
    "42": "void clickTile(android.content.ComponentName)",
    "43": "void handleSystemKey(android.view.KeyEvent)",
    "44": "int getLastSystemKey()",
    "45": "void showPinningEnterExitToast(boolean)",
    "46": "void showPinningEscapeToast()",
    "47": "void showAuthenticationDialog(android.hardware.biometrics.PromptInfo, android.hardware.biometrics.IBiometricSysuiReceiver, [I, boolean, boolean, int, long, java.lang.String, long)",
    "48": "void onBiometricAuthenticated(int)",
    "49": "void onBiometricHelp(int, java.lang.String)",
    "50": "void onBiometricError(int, int, int)",
    "51": "void hideAuthenticationDialog(long)",
    "52": "void setBiometicContextListener(android.hardware.biometrics.IBiometricContextListener)",
    "53": "void setUdfpsRefreshRateCallback(android.hardware.fingerprint.IUdfpsRefreshRateRequestCallback)",
    "54": "void showInattentiveSleepWarning()",
    "55": "void dismissInattentiveSleepWarning(boolean)",
    "56": "void startTracing()",
    "57": "void stopTracing()",
    "58": "boolean isTracing()",
    "59": "void suppressAmbientDisplay(boolean)",
    "60": "void requestTileServiceListeningState(android.content.ComponentName, int)",
    "61": "void requestAddTile(android.content.ComponentName, java.lang.CharSequence, android.graphics.drawable.Icon, int, com.android.internal.statusbar.IAddTileResultCallback)",
    "62": "void cancelRequestAddTile(java.lang.String)",
    "63": "void setNavBarMode(int)",
    "64": "int getNavBarMode()",
    "65": "void registerSessionListener(int, com.android.internal.statusbar.ISessionListener)",
    "66": "void unregisterSessionListener(int, com.android.internal.statusbar.ISessionListener)",
    "67": "void onSessionStarted(int, com.android.internal.logging.InstanceId)",
    "68": "void onSessionEnded(int, com.android.internal.logging.InstanceId)",
    "69": "void updateMediaTapToTransferSenderDisplay(int, android.media.MediaRoute2Info, com.android.internal.statusbar.IUndoMediaTransferCallback)",
    "70": "void updateMediaTapToTransferReceiverDisplay(int, android.media.MediaRoute2Info, android.graphics.drawable.Icon, java.lang.CharSequence)",
    "71": "void registerNearbyMediaDevicesProvider(android.media.INearbyMediaDevicesProvider)",
    "72": "void unregisterNearbyMediaDevicesProvider(android.media.INearbyMediaDevicesProvider)",
    "73": "void showRearDisplayDialog(int)"
  }
}